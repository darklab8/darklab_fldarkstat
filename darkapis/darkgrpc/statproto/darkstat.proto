syntax = "proto3";

option go_package = "github.com/darklab8/fl-darkstat/darkapis/darkgrpc/statproto";

package statproto;
/*
Newest Darkstat API. it is accessable with gRPC and with regular JSON at this grpc API gateway.
https://github.com/darklab8/fl-darkstat#alternatively-we-offer-client-generation-through-grpc
Check documentation how u can generate Client Library for your language of choice, C#, Python, Typescript or even C++.
Full list of supported languages https://grpc.io/docs/languages/
Then u will be able to benefit pulling this data with the most comfort.
Or you can just pull as jsons from this json API as alternative.

In case of local usage, this API is available both at TCP localhost, and over Unix Domain Socket when darkstat is run at Linux ^_^.
With Unix Sockets u get extra performance boosts to pull all the data.

the Grpc api is the one for any new feature additions
Grpc API gateway to access same data over regular json POST requests is automatically syncronized with Grpc RPC calls available.

`NOTE`: Routes have defined input "include_market_goods" and "include_tech_compat" at least.
Depending on your having them true or not, significantly different amount of data is pushed

`WARNING`: if u will be using this Swagger interface to make test call for example.
make sure to turn off booleans like include_market_goods, include_tech_compat and etc. When they are enabled, they overload swagger interface with too much data ;)
Or just call test examples over curl/postman instead (with preferably disabled prettifying)

`NOTE`: By default Grpc goes through grpc endpoint and uses compression of Protocol Buffers. Ability to go Json in API Gateway (for which Swagger documentation is provided) is ONLY FALLBACK for situations when people unable to go gRPC native way. If you will go through gRPC getting started instruction, u will receive automatically for your language client generated to utilize Protocol Buffers
*/

service Darkstat {
  // Just to check if grpc works. Returns boolean value if it is healthy as true
  rpc GetHealth (Empty) returns (HealthReply);

  // Get all Freelancer NPC Bases
  rpc GetBasesNpc (GetBasesInput) returns (GetBasesReply);
  // Get all imaginary bases that in place of mining fields. Useful for trading calculations
  rpc GetBasesMiningOperations (GetBasesInput) returns (GetBasesReply);
  // Get all Player Owned Bases in the same format as Npc Bases. Returns only PoBs which have known positions
  // Useful for trading calculations
  rpc GetBasesPoBs (GetBasesInput) returns (GetBasesReply);

  // Get all Player Owned Bases. Completely all that are public exposed
  rpc GetPoBs (Empty) returns (GetPoBsReply);
  // Get all PoB goods, where they are sold and bought. Reverse search by PoBs
  rpc GetPoBGoods (Empty) returns (GetPoBGoodsReply);

  rpc GetCommodities (GetCommoditiesInput) returns (GetCommoditiesReply) {}
  rpc GetAmmos (GetEquipmentInput) returns (GetAmmoReply) {}
  rpc GetCounterMeasures (GetEquipmentInput) returns (GetCounterMeasuresReply) {}
  rpc GetEngines (GetEquipmentInput) returns (GetEnginesReply) {}
  rpc GetGuns (GetGunsInput) returns (GetGunsReply) {}
  rpc GetMissiles (GetGunsInput) returns (GetGunsReply) {}
  rpc GetMines (GetEquipmentInput) returns (GetMinesReply) {}
  rpc GetScanners (GetEquipmentInput) returns (GetScannersReply) {}
  rpc GetShields (GetEquipmentInput) returns (GetShieldsReply) {}
  rpc GetShips (GetEquipmentInput) returns (GetShipsReply) {}
  rpc GetThrusters (GetEquipmentInput) returns (GetThrustersReply) {}

  rpc GetFactions (GetFactionsInput) returns (GetFactionsReply) {}

  // Get Tractors. For Discovery those are IDs
  rpc GetTractors (GetTractorsInput) returns (GetTractorsReply) {}
  rpc GetHashes (Empty) returns (GetHashesReply);
  rpc GetInfocards (GetInfocardsInput) returns (GetInfocardsReply);
  rpc GetGraphPaths (GetGraphPathsInput) returns (GetGraphPathsReply);
}

// The request message containing the user's name.
message Empty {
}
message GetInfocardsInput {
  repeated string nicknames = 1;
}
message GetInfocardsReply {
  repeated GetInfocardAnswer Answers = 1;
}

message GetInfocardAnswer {
  string query = 1;
  optional Infocard infocard = 2;
  optional string error = 3;
}
message Infocard {
  repeated InfocardLine Lines  = 1;
}
message InfocardLine {
  repeated InfocardPhrase Phrases = 1;
}
message InfocardPhrase {
  string Phrase = 1;
  optional string Link = 2;
  bool Bold = 3;
}

message HealthReply {
  bool is_healthy = 1;
}
message GetEquipmentInput {
  bool include_market_goods = 1;
  bool include_tech_compat = 2;
  bool filter_to_useful = 3;
}
message GetGunsInput {
  bool include_market_goods = 1;
  bool include_tech_compat = 2;
  bool filter_to_useful = 3;
  bool include_damage_bonuses = 4;
}

message GetBasesInput {
  //  "insert 'true' if wish to filter items only to useful, usually they are sold, or have goods, or craftable or findable in loot, or bases that are flight reachable from manhattan"
  bool include_market_goods = 1;
  // "insert 'true' if wish to include market goods under 'market goods' key or not. Such data can add a lot of extra weight"
  bool filter_to_useful = 2;
  // filters by base nicknames
  repeated string filter_nicknames = 3;
  // filters market goods in bases to specific category. valid categories are written in market goods in same named attribute.
  repeated string filter_market_good_category = 4;
}
message GetTractorsInput {
  bool include_market_goods = 1;
  bool filter_to_useful = 2;
}
message GetBasesReply {
  repeated Base Items = 1;
}

// The response message containing the greetings
message Base {
  string Name = 1;
  repeated string Archetypes = 2;
  string Nickname = 3; 
  string FactionName = 5; 
  string System = 6; 
  string SystemNickname = 7; 
  string Region = 9;
  int64 StridName = 10; 
  int64 InfocardID = 11; 
  string File = 12; 
  string BGCS_base_run_by = 13;
  Pos Pos = 14; 
  string SectorCoord = 15;
  bool IsTransportUnreachable = 16; 
  bool Reachable = 18; 
  bool IsPob = 19;

  map<string, MarketGood> MarketGoodsPerNick = 20;
}

message MiningInfo {
  int64 DynamicLootMin = 1;   
	int64 DynamicLootMax = 2;
	int64 DynamicLootDifficulty = 3;
	optional MarketGood MinedGood = 4;         
}


message MarketGood {
  string Nickname = 1;
  string ShipNickname = 2; 
  string Name = 3;     
  int64 PriceBase = 4; 
  string HpType = 5;   
  string Category = 6;

    int64 LevelRequired = 7;
    double RepRequired = 8;
    optional int64 PriceBaseBuysFor = 9; 
    int64 PriceBaseSellsFor  = 10;
    double Volume   = 11;   
    int64 ShipClass  = 12;        
    bool BaseSells    = 13;    
    bool IsServerSideOverride = 14;
    bool NotBuyable      = 15;     
    bool IsTransportUnreachable = 16;
    BaseInfo base_info = 17;
}
message BaseInfo {
  string BaseNickname = 1; 
  string BaseName = 2;   
  string  SystemName = 3; 
  string  Region = 4;    
  string  FactionName = 5; 
  Pos BasePos = 6;     
  string SectorCoord = 7;
}

message Pos {
  double X = 1;
  double Y = 2;
  double Z = 3;
}

message GetCommoditiesInput {
  // To Include market goods, where the item is sold and bought or not. Adds a lot of extra weight to data
  //
  // Example: `false`
  bool include_market_goods = 1;
  bool filter_to_useful = 2;
}
message GetCommoditiesReply {
  repeated Commodity Items = 1;
}

message Commodity {
	string Nickname = 1;        
	int64 PriceBase = 2;                                   
	string Name     = 3;                         
	bool Combinable = 4;  
	double Volume   = 5;                                    
	int64 ShipClass = 6;         
	int64 NameID      = 7;                                      
	int64 InfocardID  = 8; 
	map<string, MarketGood> Bases  = 9;            
	int64 PriceBestBaseBuysFor     = 10;                          
	int64 PriceBestBaseSellsFor    = 11;        
	int64 ProffitMargin            = 12;                          
	double Mass    = 13;            
}

message GetAmmoReply {
  repeated Ammo Items = 1;
}

message Ammo {
	string Name  = 1;
	int64 Price  = 2;

	int64 HitPts  = 3;
	double Volume = 4;
	double MunitionLifetime = 5;

	string Nickname = 6;
	int64 NameID    = 7;
	int64 InfoID    = 8;
	string SeekerType  = 9;
	int64 SeekerRange  = 10;
	int64 SeekerFovDeg = 11;

	map<string, MarketGood> Bases  = 12;            

	optional DiscoveryTechCompat DiscoveryTechCompat = 13;

  AmmoLimit AmmoLimit = 14;
  double Mass    = 16;
}

message DiscoveryTechCompat {
  map<string, double> TechcompatByID = 1;
  string TechCell = 2;
}

message TechCompatAnswer {
  optional DiscoveryTechCompat TechCompat = 1;
  optional string Error = 2;
  string Nickname = 3;
}

message GetTechCompatInput {
  repeated string nicknames = 1;
}

message GetTechCompatReply {
  repeated TechCompatAnswer Answers = 1;
}

message GetCounterMeasuresReply {
  repeated CounterMeasure Items = 1;
}
message CounterMeasure {
	string Name = 1;
	int64 Price = 2;

	int64 HitPts    = 3;
	int64  AIRange  = 4;
	int64  Lifetime = 5;
	int64  Range    = 6;
	int64  DiversionPctg = 7;

	bool Lootable   = 8;
	string Nickname      = 9;
	int64  NameID        = 10;
	int64  InfoID        = 11;

	map<string, MarketGood> Bases  = 12;            
	optional DiscoveryTechCompat DiscoveryTechCompat = 13;
  AmmoLimit AmmoLimit = 14;
	double Mass      = 16;
}

message GetEnginesReply {
  repeated Engine Items = 1;
}
message Engine {
	string Name = 1;
	int64 Price = 2;

	int64 CruiseSpeed      = 3;
	int64 CruiseChargeTime = 4;
	int64 LinearDrag       = 5;
	int64 MaxForce         = 6;
	double ReverseFraction = 7;
	double ImpulseSpeed    = 8;

	string HpType          = 9;
	string FlameEffect     = 10;
	string TrailEffect     = 11;

	string Nickname        = 12;
	int64 NameID           = 13;
	int64 InfoID           = 14;

	map<string, MarketGood> Bases  = 15;            
	optional DiscoveryTechCompat DiscoveryTechCompat = 16;
	double Mass            = 17;
}
message GetFactionsInput {
  bool include_reputations = 1;
  bool include_bribes = 2;
  bool filter_to_useful = 3;
}
message GetFactionsReply {
  repeated Faction Items = 1;
}
message Faction {
  string Name = 1;
  string ShortName = 2;
  string Nickname = 3;
  double ObjectDestruction = 4;
  double MissionSuccess = 5;
	double MissionFailure = 6;
	double MissionAbort   = 7;

  int64 InfonameID = 8;
  int64 InfocardID = 9;

  repeated Reputation Reputations = 10;
  repeated Bribe Bribes = 11;
}
message Reputation {
  string Name = 1;
  double Rep = 2;
  double Empathy = 3;
  string Nickname = 4;
}
message Bribe {
  string BaseNickname = 1;
  double Chance = 2;
  BaseInfo BaseInfo = 3;
}

message GetGunsReply {
  repeated Gun Items = 1;
}
message Gun {
  map<string, MarketGood> Bases  = 1;            
	optional DiscoveryTechCompat DiscoveryTechCompat = 2;

	string Nickname = 3;
	string Name     = 4;
	string Type     = 5;
	int64 Price     = 6;
	string Class    = 7;
	string HpType   = 8;
	int64 IdsName   = 9;
	int64 IdsInfo   = 10;
	double Volume   = 11;

	string HitPts       = 12;
	double PowerUsage   = 13;
	double Refire       = 14;
	double Range        = 15;
	double Toughness    = 16;
	bool IsAutoTurret   = 17;
	bool Lootable       = 18;

	bool RequiredAmmo   = 19;
	int64 HullDamage      = 20;
	int64 EnergyDamage    = 21;
	int64 ShieldDamage    = 22;
	int64 AvgShieldDamage = 23;
	string DamageType      = 24;
	double LifeTime        = 25;
	double Speed           = 26;
	double GunTurnRate     = 27;
	double DispersionAngle = 28;

	double HullDamagePerSec       = 29;
	double AvgShieldDamagePerSec  = 30;
	double EnergyDamagePerSec     = 31;
	double PowerUsagePerSec       = 32;
	double AvgEfficiency          = 33;
	double HullEfficiency         = 34;
	double ShieldEfficiency       = 35;
	double EnergyDamageEfficiency = 36;
	repeated DamageBonus DamageBonuses = 37;

  // has data defined but only for missile guns :)
	Missile Missile = 38;
	GunDetailed GunDetailed = 39;

	optional int64 NumBarrels = 40;
	optional BurstFire BurstFire = 41;
	AmmoLimit  AmmoLimit = 42;

	double Mass = 43;
	optional DiscoGun DiscoGun = 44;
}
message DamageBonus {
  string Type = 1;
  double Modifier = 2;
}
message Missile {
  double MaxAngularVelocity = 1;
}
message GunDetailed {
  string FlashParticleName = 1;
	string ConstEffect  = 2;
	string MunitionHitEffect = 3; 
}
message BurstFire {
  double SustainedRefire = 1;
	int64 Ammo             = 2;
	double ReloadTime       = 3;

	double SustainedHullDamagePerSec      = 4;
	double SustainedAvgShieldDamagePerSec = 5;
	double SustainedEnergyDamagePerSec    = 6;
	double SustainedPowerUsagePerSec      = 7;
}
message DiscoGun {
  double ArmorPen = 1;
}
message GetMinesReply {
  repeated Mine Items = 1;
}
message Mine {
	string Name  = 1;
	int64 Price  = 2;
	int64 AmmoPrice  = 3;
	string Nickname  = 4;
	string ProjectileArchetype = 5;
	int64 IdsName         = 6;
	int64 IdsInfo         = 7;

	int64 HullDamage    =8;
	int64 EnergyDamange = 9;
	int64 ShieldDamage  = 10;
	double PowerUsage   = 11;

	double Value            = 12;
	double Refire           = 13;
	double DetonationDistance = 14;
	double Radius             = 15;
	int64 SeekDistance        = 16;
	int64 TopSpeed            = 17;
	int64 Acceleration        = 18;
	double LinearDrag         = 19;
	double LifeTime           = 20;
	int64 OwnerSafe           = 21;
	double Toughness          = 22;

	int64 HitPts    = 23;
	bool Lootable  = 24;
	AmmoLimit AmmoLimit = 25;
	double Mass     = 26;

  map<string, MarketGood> Bases  = 27;            
	optional DiscoveryTechCompat DiscoveryTechCompat = 28;
}
message AmmoLimit {
  optional int64 AmountInCatridge = 1;
  optional int64 MaxCatridges     = 2;
}
message GetScannersReply {
  repeated Scanner Items = 1;
}
message Scanner {
	string Name = 1;
	int64 Price = 2;
	int64 Range  = 3;
	int64 CargoScanRange = 4;
	bool Lootable   = 5;
	string Nickname = 6;
	int64 NameID    = 7;
	int64 InfoID    = 8;
	double Mass     = 9;

  map<string, MarketGood> Bases  = 10;            
	optional DiscoveryTechCompat DiscoveryTechCompat = 11;
}
message GetShieldsReply {
  repeated Shield Items = 1;
}
message Shield {
	string Name  = 1;

	string Class = 2;
	string Type  = 3;
	string Technology = 4;
	int64 Price       = 5;

	int64 Capacity          = 6;
	int64 RegenerationRate  = 7;
	int64 ConstantPowerDraw = 8;
	double Value            = 9;
	int64 RebuildPowerDraw  = 10;
	int64 OffRebuildTime    = 11;

	double Toughness        = 12;
	int64 HitPts            = 13;
	bool Lootable           = 14;

	string Nickname         = 15;
	string HpType           = 16;
	int64 IdsName           = 17;
	int64 IdsInfo           = 18;
	double Mass             = 19;

	map<string, MarketGood> Bases  = 20;            
	optional DiscoveryTechCompat DiscoveryTechCompat = 21;
}
message GetShipsReply {
  repeated Ship Items = 1;
}
message Ship {
	string Nickname  = 1;
	string Name      = 2;
	int64 Class      = 3;
	string Type      = 4;
	int64 Price      = 5;
	int64 Armor      = 6;
	int64 HoldSize   = 7;
	int64 Nanobots   = 8;
	int64 Batteries  = 9;
	double Mass      = 10;

	int64 PowerCapacity     = 11;
	int64 PowerRechargeRate = 12;
	int64 CruiseSpeed       = 13;
	double LinearDrag       = 14;
	int64 EngineMaxForce    = 15;
	double ImpulseSpeed     = 16;
	repeated int64 ThrusterSpeed = 17;
	double ReverseFraction  = 18;
	int64 ThrustCapacity    = 19;
	int64 ThrustRecharge    = 20;

	double MaxAngularSpeedDegS           = 21;
	double AngularDistanceFrom0ToHalfSec = 22;
	double TimeTo90MaxAngularSpeed       = 23;

	double NudgeForce  = 24;
	double StrafeForce = 25;
	int64 NameID       = 26;
	int64 InfoID       = 27;

	repeated EquipmentSlot Slots     = 28;
	repeated string BiggestHardpoint = 29;
	repeated ShipPackage ShipPackages  = 30;

	map<string, MarketGood> Bases  = 31;            
	optional DiscoveryTechCompat DiscoveryTechCompat = 32;

	optional DiscoShip DiscoShip = 33;
}
message EquipmentSlot {
  string SlotName   = 1;
  repeated string AllowedEquip = 2;
}
message ShipPackage {
  string Nickname  = 1;
}
message DiscoShip {
  double ArmorMult = 1;
}
message GetThrustersReply {
  repeated Thruster Items = 1;
}
message Thruster {
  string Name    = 1;
	int64 Price    = 2;
	int64 MaxForce = 3;
	int64 PowerUsage = 4;
	double Efficiency = 5;
	double Value      = 6;
	int64 HitPts      = 7;
	bool Lootable     = 8;
	string Nickname   = 9;
	int64 NameID      = 10;
	int64 InfoID      = 11;
	double Mass       = 12;
  map<string, MarketGood> Bases  = 13;            
	optional DiscoveryTechCompat DiscoveryTechCompat = 14;

}
message GetTractorsReply {
  repeated Tractor Items = 1;
}
message Tractor {
	string Name  = 1;
	int64 Price  = 2;

	int64 MaxLength  = 3;
	int64 ReachSpeed = 4;

	bool Lootable   = 5;
	string Nickname = 6;
	string ShortNickname = 7;
	int64 NameID      = 8;
	int64 InfoID      = 9;
	map<string, MarketGood> Bases  = 10;            
  double Mass    = 11;

}
message GetHashesReply {
  map<string,Hash> HashesByNick = 1;
}
message Hash {
  int32 Int32   = 1;
	uint32 Uint32 = 2;
	string Hex    = 3;
}
message GetPoBsReply {
  repeated PoB Items = 1;
}
message PoBCore {
  string Nickname = 1;
  string Name = 2;
  optional string Pos = 3;
  optional int64 Level = 4;

	optional int64 Money = 5;
	optional double Health = 6;
	optional int64 DefenseMode = 7;

	optional string SystemNick = 8;
	optional string SystemName  = 9; 
	optional string FactionNick = 10;
	optional string FactionName = 11;

	optional string ForumThreadUrl  = 12;
	optional int64 CargoSpaceLeft   = 13;

	optional Pos BasePos            = 14;
	optional string SectorCoord     = 15;
	optional string Region          = 16;
}
message PoB {
  PoBCore Core = 1;
  repeated ShopItem ShopItems = 2;
}
message ShopItem {
  string Nickname = 1;
  string Name = 2;
  string Category = 3;

  int64 Id = 4;
  int64 Quantity = 5;
  int64 Price    = 6;
	int64 SellPrice = 7;
	int64 MinStock  = 8;
	int64 MaxStock  = 9;
}

message GetPoBGoodsReply {
  repeated PoBGood Items = 1;
}
message PoBGood {
  string Nickname = 1;
  string Name = 2;
  int64 TotalBuyableFromBases = 3;
  int64 TotalSellableToBases = 4;
  optional int64 BestPriceToBuy = 5;
  optional int64 BestPriceToSell = 6;
  string Category = 7;
  bool AnyBaseSells = 8;
  bool AnyBaseBuys = 9;
  repeated PoBGoodBase Bases = 10;
}
message PoBGoodBase {
  ShopItem ShopItem = 1;
  PoBCore Base = 2;
}

message GetGraphPathsInput {
  repeated GraphPathQuery Queries = 1;
}
message GraphPathQuery {
	string From = 1;
	string To = 2;
}


message GetGraphPathsReply {
  repeated GetGraphPathsAnswer Answers = 1;
}

message GetGraphPathsAnswer {
  GraphPathQuery Route = 1;
  optional GraphPathTime Time = 2;
  optional string Error = 3;
}

message GraphPathTime {
	optional int64 Transport = 1;
	optional int64 Frigate = 2;
	optional int64 Freighter = 3;
}