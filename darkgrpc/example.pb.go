// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.4
// 	protoc        v3.12.4
// source: example.proto

package darkgrpc

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// The request message containing the user's name.
type Empty struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Empty) Reset() {
	*x = Empty{}
	mi := &file_example_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Empty) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Empty) ProtoMessage() {}

func (x *Empty) ProtoReflect() protoreflect.Message {
	mi := &file_example_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Empty.ProtoReflect.Descriptor instead.
func (*Empty) Descriptor() ([]byte, []int) {
	return file_example_proto_rawDescGZIP(), []int{0}
}

type GetMarketGoodsInput struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Nicknames     []string               `protobuf:"bytes,1,rep,name=Nicknames,proto3" json:"Nicknames,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetMarketGoodsInput) Reset() {
	*x = GetMarketGoodsInput{}
	mi := &file_example_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetMarketGoodsInput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetMarketGoodsInput) ProtoMessage() {}

func (x *GetMarketGoodsInput) ProtoReflect() protoreflect.Message {
	mi := &file_example_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetMarketGoodsInput.ProtoReflect.Descriptor instead.
func (*GetMarketGoodsInput) Descriptor() ([]byte, []int) {
	return file_example_proto_rawDescGZIP(), []int{1}
}

func (x *GetMarketGoodsInput) GetNicknames() []string {
	if x != nil {
		return x.Nicknames
	}
	return nil
}

type GetBasesReply struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Items         []*Base                `protobuf:"bytes,1,rep,name=Items,proto3" json:"Items,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetBasesReply) Reset() {
	*x = GetBasesReply{}
	mi := &file_example_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetBasesReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetBasesReply) ProtoMessage() {}

func (x *GetBasesReply) ProtoReflect() protoreflect.Message {
	mi := &file_example_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetBasesReply.ProtoReflect.Descriptor instead.
func (*GetBasesReply) Descriptor() ([]byte, []int) {
	return file_example_proto_rawDescGZIP(), []int{2}
}

func (x *GetBasesReply) GetItems() []*Base {
	if x != nil {
		return x.Items
	}
	return nil
}

type GetMarketGoodsReply struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Answers       []*MarketGoodAnswer    `protobuf:"bytes,1,rep,name=Answers,proto3" json:"Answers,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetMarketGoodsReply) Reset() {
	*x = GetMarketGoodsReply{}
	mi := &file_example_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetMarketGoodsReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetMarketGoodsReply) ProtoMessage() {}

func (x *GetMarketGoodsReply) ProtoReflect() protoreflect.Message {
	mi := &file_example_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetMarketGoodsReply.ProtoReflect.Descriptor instead.
func (*GetMarketGoodsReply) Descriptor() ([]byte, []int) {
	return file_example_proto_rawDescGZIP(), []int{3}
}

func (x *GetMarketGoodsReply) GetAnswers() []*MarketGoodAnswer {
	if x != nil {
		return x.Answers
	}
	return nil
}

type MarketGoodAnswer struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	MarketGoods   []*MarketGood          `protobuf:"bytes,1,rep,name=MarketGoods,proto3" json:"MarketGoods,omitempty"`
	Error         *string                `protobuf:"bytes,2,opt,name=Error,proto3,oneof" json:"Error,omitempty"`
	Nickname      string                 `protobuf:"bytes,3,opt,name=Nickname,proto3" json:"Nickname,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *MarketGoodAnswer) Reset() {
	*x = MarketGoodAnswer{}
	mi := &file_example_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MarketGoodAnswer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MarketGoodAnswer) ProtoMessage() {}

func (x *MarketGoodAnswer) ProtoReflect() protoreflect.Message {
	mi := &file_example_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MarketGoodAnswer.ProtoReflect.Descriptor instead.
func (*MarketGoodAnswer) Descriptor() ([]byte, []int) {
	return file_example_proto_rawDescGZIP(), []int{4}
}

func (x *MarketGoodAnswer) GetMarketGoods() []*MarketGood {
	if x != nil {
		return x.MarketGoods
	}
	return nil
}

func (x *MarketGoodAnswer) GetError() string {
	if x != nil && x.Error != nil {
		return *x.Error
	}
	return ""
}

func (x *MarketGoodAnswer) GetNickname() string {
	if x != nil {
		return x.Nickname
	}
	return ""
}

type Pos struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	X             float64                `protobuf:"fixed64,1,opt,name=X,proto3" json:"X,omitempty"`
	Y             float64                `protobuf:"fixed64,2,opt,name=Y,proto3" json:"Y,omitempty"`
	Z             float64                `protobuf:"fixed64,3,opt,name=Z,proto3" json:"Z,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Pos) Reset() {
	*x = Pos{}
	mi := &file_example_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Pos) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Pos) ProtoMessage() {}

func (x *Pos) ProtoReflect() protoreflect.Message {
	mi := &file_example_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Pos.ProtoReflect.Descriptor instead.
func (*Pos) Descriptor() ([]byte, []int) {
	return file_example_proto_rawDescGZIP(), []int{5}
}

func (x *Pos) GetX() float64 {
	if x != nil {
		return x.X
	}
	return 0
}

func (x *Pos) GetY() float64 {
	if x != nil {
		return x.Y
	}
	return 0
}

func (x *Pos) GetZ() float64 {
	if x != nil {
		return x.Z
	}
	return 0
}

// The response message containing the greetings
type Base struct {
	state                  protoimpl.MessageState `protogen:"open.v1"`
	Name                   string                 `protobuf:"bytes,1,opt,name=Name,proto3" json:"Name,omitempty"`
	Archetypes             []string               `protobuf:"bytes,2,rep,name=Archetypes,proto3" json:"Archetypes,omitempty"`
	Nickname               string                 `protobuf:"bytes,3,opt,name=Nickname,proto3" json:"Nickname,omitempty"`
	FactionName            string                 `protobuf:"bytes,5,opt,name=FactionName,proto3" json:"FactionName,omitempty"`
	System                 string                 `protobuf:"bytes,6,opt,name=System,proto3" json:"System,omitempty"`
	SystemNickname         string                 `protobuf:"bytes,7,opt,name=SystemNickname,proto3" json:"SystemNickname,omitempty"`
	Region                 string                 `protobuf:"bytes,9,opt,name=Region,proto3" json:"Region,omitempty"`
	StridName              int32                  `protobuf:"varint,10,opt,name=StridName,proto3" json:"StridName,omitempty"`
	InfocardID             int32                  `protobuf:"varint,11,opt,name=InfocardID,proto3" json:"InfocardID,omitempty"`
	File                   string                 `protobuf:"bytes,12,opt,name=File,proto3" json:"File,omitempty"`
	BGCSBaseRunBy          string                 `protobuf:"bytes,13,opt,name=BGCS_base_run_by,json=BGCSBaseRunBy,proto3" json:"BGCS_base_run_by,omitempty"`
	Pos                    *Pos                   `protobuf:"bytes,14,opt,name=Pos,proto3" json:"Pos,omitempty"`
	SectorCoord            string                 `protobuf:"bytes,15,opt,name=SectorCoord,proto3" json:"SectorCoord,omitempty"`
	IsTransportUnreachable bool                   `protobuf:"varint,16,opt,name=IsTransportUnreachable,proto3" json:"IsTransportUnreachable,omitempty"`
	Reachable              bool                   `protobuf:"varint,18,opt,name=Reachable,proto3" json:"Reachable,omitempty"`
	IsPob                  bool                   `protobuf:"varint,19,opt,name=IsPob,proto3" json:"IsPob,omitempty"`
	unknownFields          protoimpl.UnknownFields
	sizeCache              protoimpl.SizeCache
}

func (x *Base) Reset() {
	*x = Base{}
	mi := &file_example_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Base) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Base) ProtoMessage() {}

func (x *Base) ProtoReflect() protoreflect.Message {
	mi := &file_example_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Base.ProtoReflect.Descriptor instead.
func (*Base) Descriptor() ([]byte, []int) {
	return file_example_proto_rawDescGZIP(), []int{6}
}

func (x *Base) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Base) GetArchetypes() []string {
	if x != nil {
		return x.Archetypes
	}
	return nil
}

func (x *Base) GetNickname() string {
	if x != nil {
		return x.Nickname
	}
	return ""
}

func (x *Base) GetFactionName() string {
	if x != nil {
		return x.FactionName
	}
	return ""
}

func (x *Base) GetSystem() string {
	if x != nil {
		return x.System
	}
	return ""
}

func (x *Base) GetSystemNickname() string {
	if x != nil {
		return x.SystemNickname
	}
	return ""
}

func (x *Base) GetRegion() string {
	if x != nil {
		return x.Region
	}
	return ""
}

func (x *Base) GetStridName() int32 {
	if x != nil {
		return x.StridName
	}
	return 0
}

func (x *Base) GetInfocardID() int32 {
	if x != nil {
		return x.InfocardID
	}
	return 0
}

func (x *Base) GetFile() string {
	if x != nil {
		return x.File
	}
	return ""
}

func (x *Base) GetBGCSBaseRunBy() string {
	if x != nil {
		return x.BGCSBaseRunBy
	}
	return ""
}

func (x *Base) GetPos() *Pos {
	if x != nil {
		return x.Pos
	}
	return nil
}

func (x *Base) GetSectorCoord() string {
	if x != nil {
		return x.SectorCoord
	}
	return ""
}

func (x *Base) GetIsTransportUnreachable() bool {
	if x != nil {
		return x.IsTransportUnreachable
	}
	return false
}

func (x *Base) GetReachable() bool {
	if x != nil {
		return x.Reachable
	}
	return false
}

func (x *Base) GetIsPob() bool {
	if x != nil {
		return x.IsPob
	}
	return false
}

type MarketGood struct {
	state                  protoimpl.MessageState `protogen:"open.v1"`
	Nickname               string                 `protobuf:"bytes,1,opt,name=Nickname,proto3" json:"Nickname,omitempty"`
	ShipNickname           string                 `protobuf:"bytes,2,opt,name=ShipNickname,proto3" json:"ShipNickname,omitempty"`
	Name                   string                 `protobuf:"bytes,3,opt,name=Name,proto3" json:"Name,omitempty"`
	PriceBase              int32                  `protobuf:"varint,4,opt,name=PriceBase,proto3" json:"PriceBase,omitempty"`
	HpType                 string                 `protobuf:"bytes,5,opt,name=HpType,proto3" json:"HpType,omitempty"`
	Category               string                 `protobuf:"bytes,6,opt,name=Category,proto3" json:"Category,omitempty"`
	LevelRequired          int32                  `protobuf:"varint,7,opt,name=LevelRequired,proto3" json:"LevelRequired,omitempty"`
	RepRequired            float64                `protobuf:"fixed64,8,opt,name=RepRequired,proto3" json:"RepRequired,omitempty"`
	PriceBaseBuysFor       *int32                 `protobuf:"varint,9,opt,name=PriceBaseBuysFor,proto3,oneof" json:"PriceBaseBuysFor,omitempty"`
	PriceBaseSellsFor      int32                  `protobuf:"varint,10,opt,name=PriceBaseSellsFor,proto3" json:"PriceBaseSellsFor,omitempty"`
	Volume                 float64                `protobuf:"fixed64,11,opt,name=Volume,proto3" json:"Volume,omitempty"`
	ShipClass              int64                  `protobuf:"varint,12,opt,name=ShipClass,proto3" json:"ShipClass,omitempty"`
	BaseSells              bool                   `protobuf:"varint,13,opt,name=BaseSells,proto3" json:"BaseSells,omitempty"`
	IsServerSideOverride   bool                   `protobuf:"varint,14,opt,name=IsServerSideOverride,proto3" json:"IsServerSideOverride,omitempty"`
	NotBuyable             bool                   `protobuf:"varint,15,opt,name=NotBuyable,proto3" json:"NotBuyable,omitempty"`
	IsTransportUnreachable bool                   `protobuf:"varint,16,opt,name=IsTransportUnreachable,proto3" json:"IsTransportUnreachable,omitempty"`
	BaseNickname           string                 `protobuf:"bytes,17,opt,name=BaseNickname,proto3" json:"BaseNickname,omitempty"`
	BaseName               string                 `protobuf:"bytes,18,opt,name=BaseName,proto3" json:"BaseName,omitempty"`
	SystemName             string                 `protobuf:"bytes,19,opt,name=SystemName,proto3" json:"SystemName,omitempty"`
	Region                 string                 `protobuf:"bytes,20,opt,name=Region,proto3" json:"Region,omitempty"`
	FactionName            string                 `protobuf:"bytes,21,opt,name=FactionName,proto3" json:"FactionName,omitempty"`
	BasePos                *Pos                   `protobuf:"bytes,22,opt,name=BasePos,proto3" json:"BasePos,omitempty"`
	SectorCoord            string                 `protobuf:"bytes,23,opt,name=SectorCoord,proto3" json:"SectorCoord,omitempty"`
	unknownFields          protoimpl.UnknownFields
	sizeCache              protoimpl.SizeCache
}

func (x *MarketGood) Reset() {
	*x = MarketGood{}
	mi := &file_example_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MarketGood) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MarketGood) ProtoMessage() {}

func (x *MarketGood) ProtoReflect() protoreflect.Message {
	mi := &file_example_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MarketGood.ProtoReflect.Descriptor instead.
func (*MarketGood) Descriptor() ([]byte, []int) {
	return file_example_proto_rawDescGZIP(), []int{7}
}

func (x *MarketGood) GetNickname() string {
	if x != nil {
		return x.Nickname
	}
	return ""
}

func (x *MarketGood) GetShipNickname() string {
	if x != nil {
		return x.ShipNickname
	}
	return ""
}

func (x *MarketGood) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *MarketGood) GetPriceBase() int32 {
	if x != nil {
		return x.PriceBase
	}
	return 0
}

func (x *MarketGood) GetHpType() string {
	if x != nil {
		return x.HpType
	}
	return ""
}

func (x *MarketGood) GetCategory() string {
	if x != nil {
		return x.Category
	}
	return ""
}

func (x *MarketGood) GetLevelRequired() int32 {
	if x != nil {
		return x.LevelRequired
	}
	return 0
}

func (x *MarketGood) GetRepRequired() float64 {
	if x != nil {
		return x.RepRequired
	}
	return 0
}

func (x *MarketGood) GetPriceBaseBuysFor() int32 {
	if x != nil && x.PriceBaseBuysFor != nil {
		return *x.PriceBaseBuysFor
	}
	return 0
}

func (x *MarketGood) GetPriceBaseSellsFor() int32 {
	if x != nil {
		return x.PriceBaseSellsFor
	}
	return 0
}

func (x *MarketGood) GetVolume() float64 {
	if x != nil {
		return x.Volume
	}
	return 0
}

func (x *MarketGood) GetShipClass() int64 {
	if x != nil {
		return x.ShipClass
	}
	return 0
}

func (x *MarketGood) GetBaseSells() bool {
	if x != nil {
		return x.BaseSells
	}
	return false
}

func (x *MarketGood) GetIsServerSideOverride() bool {
	if x != nil {
		return x.IsServerSideOverride
	}
	return false
}

func (x *MarketGood) GetNotBuyable() bool {
	if x != nil {
		return x.NotBuyable
	}
	return false
}

func (x *MarketGood) GetIsTransportUnreachable() bool {
	if x != nil {
		return x.IsTransportUnreachable
	}
	return false
}

func (x *MarketGood) GetBaseNickname() string {
	if x != nil {
		return x.BaseNickname
	}
	return ""
}

func (x *MarketGood) GetBaseName() string {
	if x != nil {
		return x.BaseName
	}
	return ""
}

func (x *MarketGood) GetSystemName() string {
	if x != nil {
		return x.SystemName
	}
	return ""
}

func (x *MarketGood) GetRegion() string {
	if x != nil {
		return x.Region
	}
	return ""
}

func (x *MarketGood) GetFactionName() string {
	if x != nil {
		return x.FactionName
	}
	return ""
}

func (x *MarketGood) GetBasePos() *Pos {
	if x != nil {
		return x.BasePos
	}
	return nil
}

func (x *MarketGood) GetSectorCoord() string {
	if x != nil {
		return x.SectorCoord
	}
	return ""
}

type MiningInfo struct {
	state                 protoimpl.MessageState `protogen:"open.v1"`
	DynamicLootMin        int32                  `protobuf:"varint,1,opt,name=DynamicLootMin,proto3" json:"DynamicLootMin,omitempty"`
	DynamicLootMax        int32                  `protobuf:"varint,2,opt,name=DynamicLootMax,proto3" json:"DynamicLootMax,omitempty"`
	DynamicLootDifficulty int32                  `protobuf:"varint,3,opt,name=DynamicLootDifficulty,proto3" json:"DynamicLootDifficulty,omitempty"`
	MinedGood             *MarketGood            `protobuf:"bytes,4,opt,name=MinedGood,proto3,oneof" json:"MinedGood,omitempty"`
	unknownFields         protoimpl.UnknownFields
	sizeCache             protoimpl.SizeCache
}

func (x *MiningInfo) Reset() {
	*x = MiningInfo{}
	mi := &file_example_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MiningInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MiningInfo) ProtoMessage() {}

func (x *MiningInfo) ProtoReflect() protoreflect.Message {
	mi := &file_example_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MiningInfo.ProtoReflect.Descriptor instead.
func (*MiningInfo) Descriptor() ([]byte, []int) {
	return file_example_proto_rawDescGZIP(), []int{8}
}

func (x *MiningInfo) GetDynamicLootMin() int32 {
	if x != nil {
		return x.DynamicLootMin
	}
	return 0
}

func (x *MiningInfo) GetDynamicLootMax() int32 {
	if x != nil {
		return x.DynamicLootMax
	}
	return 0
}

func (x *MiningInfo) GetDynamicLootDifficulty() int32 {
	if x != nil {
		return x.DynamicLootDifficulty
	}
	return 0
}

func (x *MiningInfo) GetMinedGood() *MarketGood {
	if x != nil {
		return x.MinedGood
	}
	return nil
}

var File_example_proto protoreflect.FileDescriptor

var file_example_proto_rawDesc = string([]byte{
	0x0a, 0x0d, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x08, 0x64, 0x61, 0x72, 0x6b, 0x67, 0x72, 0x70, 0x63, 0x22, 0x07, 0x0a, 0x05, 0x45, 0x6d, 0x70,
	0x74, 0x79, 0x22, 0x33, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x47,
	0x6f, 0x6f, 0x64, 0x73, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x4e, 0x69, 0x63,
	0x6b, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x4e, 0x69,
	0x63, 0x6b, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x22, 0x35, 0x0a, 0x0d, 0x47, 0x65, 0x74, 0x42, 0x61,
	0x73, 0x65, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x24, 0x0a, 0x05, 0x49, 0x74, 0x65, 0x6d,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x64, 0x61, 0x72, 0x6b, 0x67, 0x72,
	0x70, 0x63, 0x2e, 0x42, 0x61, 0x73, 0x65, 0x52, 0x05, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x22, 0x4b,
	0x0a, 0x13, 0x47, 0x65, 0x74, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x47, 0x6f, 0x6f, 0x64, 0x73,
	0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x34, 0x0a, 0x07, 0x41, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x64, 0x61, 0x72, 0x6b, 0x67, 0x72, 0x70,
	0x63, 0x2e, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x47, 0x6f, 0x6f, 0x64, 0x41, 0x6e, 0x73, 0x77,
	0x65, 0x72, 0x52, 0x07, 0x41, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x73, 0x22, 0x8b, 0x01, 0x0a, 0x10,
	0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x47, 0x6f, 0x6f, 0x64, 0x41, 0x6e, 0x73, 0x77, 0x65, 0x72,
	0x12, 0x36, 0x0a, 0x0b, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x47, 0x6f, 0x6f, 0x64, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x64, 0x61, 0x72, 0x6b, 0x67, 0x72, 0x70, 0x63,
	0x2e, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x47, 0x6f, 0x6f, 0x64, 0x52, 0x0b, 0x4d, 0x61, 0x72,
	0x6b, 0x65, 0x74, 0x47, 0x6f, 0x6f, 0x64, 0x73, 0x12, 0x19, 0x0a, 0x05, 0x45, 0x72, 0x72, 0x6f,
	0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x05, 0x45, 0x72, 0x72, 0x6f, 0x72,
	0x88, 0x01, 0x01, 0x12, 0x1a, 0x0a, 0x08, 0x4e, 0x69, 0x63, 0x6b, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x4e, 0x69, 0x63, 0x6b, 0x6e, 0x61, 0x6d, 0x65, 0x42,
	0x08, 0x0a, 0x06, 0x5f, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x22, 0x2f, 0x0a, 0x03, 0x50, 0x6f, 0x73,
	0x12, 0x0c, 0x0a, 0x01, 0x58, 0x18, 0x01, 0x20, 0x01, 0x28, 0x01, 0x52, 0x01, 0x58, 0x12, 0x0c,
	0x0a, 0x01, 0x59, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x01, 0x59, 0x12, 0x0c, 0x0a, 0x01,
	0x5a, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x01, 0x5a, 0x22, 0xfa, 0x03, 0x0a, 0x04, 0x42,
	0x61, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x41, 0x72, 0x63, 0x68, 0x65,
	0x74, 0x79, 0x70, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x41, 0x72, 0x63,
	0x68, 0x65, 0x74, 0x79, 0x70, 0x65, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x4e, 0x69, 0x63, 0x6b, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x4e, 0x69, 0x63, 0x6b, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x46, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x61,
	0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x46, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x12, 0x26, 0x0a,
	0x0e, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x4e, 0x69, 0x63, 0x6b, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x4e, 0x69, 0x63,
	0x6b, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x12, 0x1c, 0x0a,
	0x09, 0x53, 0x74, 0x72, 0x69, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x09, 0x53, 0x74, 0x72, 0x69, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x49,
	0x6e, 0x66, 0x6f, 0x63, 0x61, 0x72, 0x64, 0x49, 0x44, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0a, 0x49, 0x6e, 0x66, 0x6f, 0x63, 0x61, 0x72, 0x64, 0x49, 0x44, 0x12, 0x12, 0x0a, 0x04, 0x46,
	0x69, 0x6c, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x46, 0x69, 0x6c, 0x65, 0x12,
	0x27, 0x0a, 0x10, 0x42, 0x47, 0x43, 0x53, 0x5f, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x72, 0x75, 0x6e,
	0x5f, 0x62, 0x79, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x42, 0x47, 0x43, 0x53, 0x42,
	0x61, 0x73, 0x65, 0x52, 0x75, 0x6e, 0x42, 0x79, 0x12, 0x1f, 0x0a, 0x03, 0x50, 0x6f, 0x73, 0x18,
	0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x64, 0x61, 0x72, 0x6b, 0x67, 0x72, 0x70, 0x63,
	0x2e, 0x50, 0x6f, 0x73, 0x52, 0x03, 0x50, 0x6f, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x53, 0x65, 0x63,
	0x74, 0x6f, 0x72, 0x43, 0x6f, 0x6f, 0x72, 0x64, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x53, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x43, 0x6f, 0x6f, 0x72, 0x64, 0x12, 0x36, 0x0a, 0x16, 0x49,
	0x73, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x55, 0x6e, 0x72, 0x65, 0x61, 0x63,
	0x68, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x08, 0x52, 0x16, 0x49, 0x73, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x55, 0x6e, 0x72, 0x65, 0x61, 0x63, 0x68, 0x61,
	0x62, 0x6c, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x52, 0x65, 0x61, 0x63, 0x68, 0x61, 0x62, 0x6c, 0x65,
	0x18, 0x12, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x52, 0x65, 0x61, 0x63, 0x68, 0x61, 0x62, 0x6c,
	0x65, 0x12, 0x14, 0x0a, 0x05, 0x49, 0x73, 0x50, 0x6f, 0x62, 0x18, 0x13, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x05, 0x49, 0x73, 0x50, 0x6f, 0x62, 0x22, 0xb3, 0x06, 0x0a, 0x0a, 0x4d, 0x61, 0x72, 0x6b,
	0x65, 0x74, 0x47, 0x6f, 0x6f, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x4e, 0x69, 0x63, 0x6b, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x4e, 0x69, 0x63, 0x6b, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x53, 0x68, 0x69, 0x70, 0x4e, 0x69, 0x63, 0x6b, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x53, 0x68, 0x69, 0x70, 0x4e, 0x69,
	0x63, 0x6b, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x50, 0x72,
	0x69, 0x63, 0x65, 0x42, 0x61, 0x73, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x50,
	0x72, 0x69, 0x63, 0x65, 0x42, 0x61, 0x73, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x48, 0x70, 0x54, 0x79,
	0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x48, 0x70, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x1a, 0x0a, 0x08, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x12, 0x24, 0x0a, 0x0d,
	0x4c, 0x65, 0x76, 0x65, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0d, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72,
	0x65, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x52, 0x65, 0x70, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65,
	0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0b, 0x52, 0x65, 0x70, 0x52, 0x65, 0x71, 0x75,
	0x69, 0x72, 0x65, 0x64, 0x12, 0x2f, 0x0a, 0x10, 0x50, 0x72, 0x69, 0x63, 0x65, 0x42, 0x61, 0x73,
	0x65, 0x42, 0x75, 0x79, 0x73, 0x46, 0x6f, 0x72, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x48, 0x00,
	0x52, 0x10, 0x50, 0x72, 0x69, 0x63, 0x65, 0x42, 0x61, 0x73, 0x65, 0x42, 0x75, 0x79, 0x73, 0x46,
	0x6f, 0x72, 0x88, 0x01, 0x01, 0x12, 0x2c, 0x0a, 0x11, 0x50, 0x72, 0x69, 0x63, 0x65, 0x42, 0x61,
	0x73, 0x65, 0x53, 0x65, 0x6c, 0x6c, 0x73, 0x46, 0x6f, 0x72, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x11, 0x50, 0x72, 0x69, 0x63, 0x65, 0x42, 0x61, 0x73, 0x65, 0x53, 0x65, 0x6c, 0x6c, 0x73,
	0x46, 0x6f, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x06, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x53,
	0x68, 0x69, 0x70, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09,
	0x53, 0x68, 0x69, 0x70, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x42, 0x61, 0x73,
	0x65, 0x53, 0x65, 0x6c, 0x6c, 0x73, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x42, 0x61,
	0x73, 0x65, 0x53, 0x65, 0x6c, 0x6c, 0x73, 0x12, 0x32, 0x0a, 0x14, 0x49, 0x73, 0x53, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x53, 0x69, 0x64, 0x65, 0x4f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x18,
	0x0e, 0x20, 0x01, 0x28, 0x08, 0x52, 0x14, 0x49, 0x73, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x53,
	0x69, 0x64, 0x65, 0x4f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x4e,
	0x6f, 0x74, 0x42, 0x75, 0x79, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x0a, 0x4e, 0x6f, 0x74, 0x42, 0x75, 0x79, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x36, 0x0a, 0x16, 0x49,
	0x73, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x55, 0x6e, 0x72, 0x65, 0x61, 0x63,
	0x68, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x08, 0x52, 0x16, 0x49, 0x73, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x55, 0x6e, 0x72, 0x65, 0x61, 0x63, 0x68, 0x61,
	0x62, 0x6c, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x42, 0x61, 0x73, 0x65, 0x4e, 0x69, 0x63, 0x6b, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x42, 0x61, 0x73, 0x65, 0x4e,
	0x69, 0x63, 0x6b, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x42, 0x61, 0x73, 0x65, 0x4e,
	0x61, 0x6d, 0x65, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x42, 0x61, 0x73, 0x65, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x4e, 0x61, 0x6d,
	0x65, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x18, 0x14, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x12, 0x20, 0x0a, 0x0b, 0x46,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x46, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x27, 0x0a,
	0x07, 0x42, 0x61, 0x73, 0x65, 0x50, 0x6f, 0x73, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d,
	0x2e, 0x64, 0x61, 0x72, 0x6b, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x50, 0x6f, 0x73, 0x52, 0x07, 0x42,
	0x61, 0x73, 0x65, 0x50, 0x6f, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x53, 0x65, 0x63, 0x74, 0x6f, 0x72,
	0x43, 0x6f, 0x6f, 0x72, 0x64, 0x18, 0x17, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x53, 0x65, 0x63,
	0x74, 0x6f, 0x72, 0x43, 0x6f, 0x6f, 0x72, 0x64, 0x42, 0x13, 0x0a, 0x11, 0x5f, 0x50, 0x72, 0x69,
	0x63, 0x65, 0x42, 0x61, 0x73, 0x65, 0x42, 0x75, 0x79, 0x73, 0x46, 0x6f, 0x72, 0x22, 0xd9, 0x01,
	0x0a, 0x0a, 0x4d, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x26, 0x0a, 0x0e,
	0x44, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x4c, 0x6f, 0x6f, 0x74, 0x4d, 0x69, 0x6e, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x44, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x4c, 0x6f, 0x6f,
	0x74, 0x4d, 0x69, 0x6e, 0x12, 0x26, 0x0a, 0x0e, 0x44, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x4c,
	0x6f, 0x6f, 0x74, 0x4d, 0x61, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x44, 0x79,
	0x6e, 0x61, 0x6d, 0x69, 0x63, 0x4c, 0x6f, 0x6f, 0x74, 0x4d, 0x61, 0x78, 0x12, 0x34, 0x0a, 0x15,
	0x44, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x4c, 0x6f, 0x6f, 0x74, 0x44, 0x69, 0x66, 0x66, 0x69,
	0x63, 0x75, 0x6c, 0x74, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x15, 0x44, 0x79, 0x6e,
	0x61, 0x6d, 0x69, 0x63, 0x4c, 0x6f, 0x6f, 0x74, 0x44, 0x69, 0x66, 0x66, 0x69, 0x63, 0x75, 0x6c,
	0x74, 0x79, 0x12, 0x37, 0x0a, 0x09, 0x4d, 0x69, 0x6e, 0x65, 0x64, 0x47, 0x6f, 0x6f, 0x64, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x64, 0x61, 0x72, 0x6b, 0x67, 0x72, 0x70, 0x63,
	0x2e, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x47, 0x6f, 0x6f, 0x64, 0x48, 0x00, 0x52, 0x09, 0x4d,
	0x69, 0x6e, 0x65, 0x64, 0x47, 0x6f, 0x6f, 0x64, 0x88, 0x01, 0x01, 0x42, 0x0c, 0x0a, 0x0a, 0x5f,
	0x4d, 0x69, 0x6e, 0x65, 0x64, 0x47, 0x6f, 0x6f, 0x64, 0x32, 0x99, 0x01, 0x0a, 0x08, 0x44, 0x61,
	0x72, 0x6b, 0x47, 0x52, 0x70, 0x63, 0x12, 0x36, 0x0a, 0x08, 0x47, 0x65, 0x74, 0x42, 0x61, 0x73,
	0x65, 0x73, 0x12, 0x0f, 0x2e, 0x64, 0x61, 0x72, 0x6b, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x45, 0x6d,
	0x70, 0x74, 0x79, 0x1a, 0x17, 0x2e, 0x64, 0x61, 0x72, 0x6b, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x47,
	0x65, 0x74, 0x42, 0x61, 0x73, 0x65, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x55,
	0x0a, 0x13, 0x47, 0x65, 0x74, 0x42, 0x61, 0x73, 0x65, 0x73, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74,
	0x47, 0x6f, 0x6f, 0x64, 0x73, 0x12, 0x1d, 0x2e, 0x64, 0x61, 0x72, 0x6b, 0x67, 0x72, 0x70, 0x63,
	0x2e, 0x47, 0x65, 0x74, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x47, 0x6f, 0x6f, 0x64, 0x73, 0x49,
	0x6e, 0x70, 0x75, 0x74, 0x1a, 0x1d, 0x2e, 0x64, 0x61, 0x72, 0x6b, 0x67, 0x72, 0x70, 0x63, 0x2e,
	0x47, 0x65, 0x74, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x47, 0x6f, 0x6f, 0x64, 0x73, 0x52, 0x65,
	0x70, 0x6c, 0x79, 0x22, 0x00, 0x42, 0x2a, 0x5a, 0x28, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e,
	0x63, 0x6f, 0x6d, 0x2f, 0x64, 0x61, 0x72, 0x6b, 0x6c, 0x61, 0x62, 0x38, 0x2f, 0x66, 0x6c, 0x2d,
	0x64, 0x61, 0x72, 0x6b, 0x73, 0x74, 0x61, 0x74, 0x2f, 0x64, 0x61, 0x72, 0x6b, 0x67, 0x72, 0x70,
	0x63, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
})

var (
	file_example_proto_rawDescOnce sync.Once
	file_example_proto_rawDescData []byte
)

func file_example_proto_rawDescGZIP() []byte {
	file_example_proto_rawDescOnce.Do(func() {
		file_example_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_example_proto_rawDesc), len(file_example_proto_rawDesc)))
	})
	return file_example_proto_rawDescData
}

var file_example_proto_msgTypes = make([]protoimpl.MessageInfo, 9)
var file_example_proto_goTypes = []any{
	(*Empty)(nil),               // 0: darkgrpc.Empty
	(*GetMarketGoodsInput)(nil), // 1: darkgrpc.GetMarketGoodsInput
	(*GetBasesReply)(nil),       // 2: darkgrpc.GetBasesReply
	(*GetMarketGoodsReply)(nil), // 3: darkgrpc.GetMarketGoodsReply
	(*MarketGoodAnswer)(nil),    // 4: darkgrpc.MarketGoodAnswer
	(*Pos)(nil),                 // 5: darkgrpc.Pos
	(*Base)(nil),                // 6: darkgrpc.Base
	(*MarketGood)(nil),          // 7: darkgrpc.MarketGood
	(*MiningInfo)(nil),          // 8: darkgrpc.MiningInfo
}
var file_example_proto_depIdxs = []int32{
	6, // 0: darkgrpc.GetBasesReply.Items:type_name -> darkgrpc.Base
	4, // 1: darkgrpc.GetMarketGoodsReply.Answers:type_name -> darkgrpc.MarketGoodAnswer
	7, // 2: darkgrpc.MarketGoodAnswer.MarketGoods:type_name -> darkgrpc.MarketGood
	5, // 3: darkgrpc.Base.Pos:type_name -> darkgrpc.Pos
	5, // 4: darkgrpc.MarketGood.BasePos:type_name -> darkgrpc.Pos
	7, // 5: darkgrpc.MiningInfo.MinedGood:type_name -> darkgrpc.MarketGood
	0, // 6: darkgrpc.DarkGRpc.GetBases:input_type -> darkgrpc.Empty
	1, // 7: darkgrpc.DarkGRpc.GetBasesMarketGoods:input_type -> darkgrpc.GetMarketGoodsInput
	2, // 8: darkgrpc.DarkGRpc.GetBases:output_type -> darkgrpc.GetBasesReply
	3, // 9: darkgrpc.DarkGRpc.GetBasesMarketGoods:output_type -> darkgrpc.GetMarketGoodsReply
	8, // [8:10] is the sub-list for method output_type
	6, // [6:8] is the sub-list for method input_type
	6, // [6:6] is the sub-list for extension type_name
	6, // [6:6] is the sub-list for extension extendee
	0, // [0:6] is the sub-list for field type_name
}

func init() { file_example_proto_init() }
func file_example_proto_init() {
	if File_example_proto != nil {
		return
	}
	file_example_proto_msgTypes[4].OneofWrappers = []any{}
	file_example_proto_msgTypes[7].OneofWrappers = []any{}
	file_example_proto_msgTypes[8].OneofWrappers = []any{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_example_proto_rawDesc), len(file_example_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   9,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_example_proto_goTypes,
		DependencyIndexes: file_example_proto_depIdxs,
		MessageInfos:      file_example_proto_msgTypes,
	}.Build()
	File_example_proto = out.File
	file_example_proto_goTypes = nil
	file_example_proto_depIdxs = nil
}
