// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.12.4
// source: example.proto

package darkgrpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	DarkGRpc_GetBases_FullMethodName            = "/darkgrpc.DarkGRpc/GetBases"
	DarkGRpc_GetBasesMarketGoods_FullMethodName = "/darkgrpc.DarkGRpc/GetBasesMarketGoods"
)

// DarkGRpcClient is the client API for DarkGRpc service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// The greeter service definition.
type DarkGRpcClient interface {
	// Sends a greeting
	GetBases(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*GetBasesReply, error)
	GetBasesMarketGoods(ctx context.Context, in *GetMarketGoodsInput, opts ...grpc.CallOption) (*GetMarketGoodsReply, error)
}

type darkGRpcClient struct {
	cc grpc.ClientConnInterface
}

func NewDarkGRpcClient(cc grpc.ClientConnInterface) DarkGRpcClient {
	return &darkGRpcClient{cc}
}

func (c *darkGRpcClient) GetBases(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*GetBasesReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetBasesReply)
	err := c.cc.Invoke(ctx, DarkGRpc_GetBases_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *darkGRpcClient) GetBasesMarketGoods(ctx context.Context, in *GetMarketGoodsInput, opts ...grpc.CallOption) (*GetMarketGoodsReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetMarketGoodsReply)
	err := c.cc.Invoke(ctx, DarkGRpc_GetBasesMarketGoods_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DarkGRpcServer is the server API for DarkGRpc service.
// All implementations must embed UnimplementedDarkGRpcServer
// for forward compatibility.
//
// The greeter service definition.
type DarkGRpcServer interface {
	// Sends a greeting
	GetBases(context.Context, *Empty) (*GetBasesReply, error)
	GetBasesMarketGoods(context.Context, *GetMarketGoodsInput) (*GetMarketGoodsReply, error)
	mustEmbedUnimplementedDarkGRpcServer()
}

// UnimplementedDarkGRpcServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedDarkGRpcServer struct{}

func (UnimplementedDarkGRpcServer) GetBases(context.Context, *Empty) (*GetBasesReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBases not implemented")
}
func (UnimplementedDarkGRpcServer) GetBasesMarketGoods(context.Context, *GetMarketGoodsInput) (*GetMarketGoodsReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBasesMarketGoods not implemented")
}
func (UnimplementedDarkGRpcServer) mustEmbedUnimplementedDarkGRpcServer() {}
func (UnimplementedDarkGRpcServer) testEmbeddedByValue()                  {}

// UnsafeDarkGRpcServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DarkGRpcServer will
// result in compilation errors.
type UnsafeDarkGRpcServer interface {
	mustEmbedUnimplementedDarkGRpcServer()
}

func RegisterDarkGRpcServer(s grpc.ServiceRegistrar, srv DarkGRpcServer) {
	// If the following call pancis, it indicates UnimplementedDarkGRpcServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&DarkGRpc_ServiceDesc, srv)
}

func _DarkGRpc_GetBases_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DarkGRpcServer).GetBases(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DarkGRpc_GetBases_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DarkGRpcServer).GetBases(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _DarkGRpc_GetBasesMarketGoods_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMarketGoodsInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DarkGRpcServer).GetBasesMarketGoods(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DarkGRpc_GetBasesMarketGoods_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DarkGRpcServer).GetBasesMarketGoods(ctx, req.(*GetMarketGoodsInput))
	}
	return interceptor(ctx, in, info, handler)
}

// DarkGRpc_ServiceDesc is the grpc.ServiceDesc for DarkGRpc service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DarkGRpc_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "darkgrpc.DarkGRpc",
	HandlerType: (*DarkGRpcServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetBases",
			Handler:    _DarkGRpc_GetBases_Handler,
		},
		{
			MethodName: "GetBasesMarketGoods",
			Handler:    _DarkGRpc_GetBasesMarketGoods_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "example.proto",
}
