// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.5
// 	protoc        v3.12.4
// source: darkstat.proto

package statproto

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// The request message containing the user's name.
type Empty struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Empty) Reset() {
	*x = Empty{}
	mi := &file_darkstat_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Empty) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Empty) ProtoMessage() {}

func (x *Empty) ProtoReflect() protoreflect.Message {
	mi := &file_darkstat_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Empty.ProtoReflect.Descriptor instead.
func (*Empty) Descriptor() ([]byte, []int) {
	return file_darkstat_proto_rawDescGZIP(), []int{0}
}

type HealthReply struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	IsHealthy     bool                   `protobuf:"varint,1,opt,name=is_healthy,json=isHealthy,proto3" json:"is_healthy,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *HealthReply) Reset() {
	*x = HealthReply{}
	mi := &file_darkstat_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *HealthReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HealthReply) ProtoMessage() {}

func (x *HealthReply) ProtoReflect() protoreflect.Message {
	mi := &file_darkstat_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HealthReply.ProtoReflect.Descriptor instead.
func (*HealthReply) Descriptor() ([]byte, []int) {
	return file_darkstat_proto_rawDescGZIP(), []int{1}
}

func (x *HealthReply) GetIsHealthy() bool {
	if x != nil {
		return x.IsHealthy
	}
	return false
}

type GetEquipmentInput struct {
	state              protoimpl.MessageState `protogen:"open.v1"`
	IncludeMarketGoods bool                   `protobuf:"varint,1,opt,name=IncludeMarketGoods,proto3" json:"IncludeMarketGoods,omitempty"`
	IncludeTechCompat  bool                   `protobuf:"varint,2,opt,name=IncludeTechCompat,proto3" json:"IncludeTechCompat,omitempty"`
	FilterToUseful     bool                   `protobuf:"varint,3,opt,name=FilterToUseful,proto3" json:"FilterToUseful,omitempty"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *GetEquipmentInput) Reset() {
	*x = GetEquipmentInput{}
	mi := &file_darkstat_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetEquipmentInput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetEquipmentInput) ProtoMessage() {}

func (x *GetEquipmentInput) ProtoReflect() protoreflect.Message {
	mi := &file_darkstat_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetEquipmentInput.ProtoReflect.Descriptor instead.
func (*GetEquipmentInput) Descriptor() ([]byte, []int) {
	return file_darkstat_proto_rawDescGZIP(), []int{2}
}

func (x *GetEquipmentInput) GetIncludeMarketGoods() bool {
	if x != nil {
		return x.IncludeMarketGoods
	}
	return false
}

func (x *GetEquipmentInput) GetIncludeTechCompat() bool {
	if x != nil {
		return x.IncludeTechCompat
	}
	return false
}

func (x *GetEquipmentInput) GetFilterToUseful() bool {
	if x != nil {
		return x.FilterToUseful
	}
	return false
}

type GetBasesInput struct {
	state              protoimpl.MessageState `protogen:"open.v1"`
	IncludeMarketGoods bool                   `protobuf:"varint,1,opt,name=IncludeMarketGoods,proto3" json:"IncludeMarketGoods,omitempty"`
	FilterToUseful     bool                   `protobuf:"varint,2,opt,name=FilterToUseful,proto3" json:"FilterToUseful,omitempty"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *GetBasesInput) Reset() {
	*x = GetBasesInput{}
	mi := &file_darkstat_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetBasesInput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetBasesInput) ProtoMessage() {}

func (x *GetBasesInput) ProtoReflect() protoreflect.Message {
	mi := &file_darkstat_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetBasesInput.ProtoReflect.Descriptor instead.
func (*GetBasesInput) Descriptor() ([]byte, []int) {
	return file_darkstat_proto_rawDescGZIP(), []int{3}
}

func (x *GetBasesInput) GetIncludeMarketGoods() bool {
	if x != nil {
		return x.IncludeMarketGoods
	}
	return false
}

func (x *GetBasesInput) GetFilterToUseful() bool {
	if x != nil {
		return x.FilterToUseful
	}
	return false
}

type GetTractorsInput struct {
	state              protoimpl.MessageState `protogen:"open.v1"`
	IncludeMarketGoods bool                   `protobuf:"varint,1,opt,name=IncludeMarketGoods,proto3" json:"IncludeMarketGoods,omitempty"`
	FilterToUseful     bool                   `protobuf:"varint,2,opt,name=FilterToUseful,proto3" json:"FilterToUseful,omitempty"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *GetTractorsInput) Reset() {
	*x = GetTractorsInput{}
	mi := &file_darkstat_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetTractorsInput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTractorsInput) ProtoMessage() {}

func (x *GetTractorsInput) ProtoReflect() protoreflect.Message {
	mi := &file_darkstat_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTractorsInput.ProtoReflect.Descriptor instead.
func (*GetTractorsInput) Descriptor() ([]byte, []int) {
	return file_darkstat_proto_rawDescGZIP(), []int{4}
}

func (x *GetTractorsInput) GetIncludeMarketGoods() bool {
	if x != nil {
		return x.IncludeMarketGoods
	}
	return false
}

func (x *GetTractorsInput) GetFilterToUseful() bool {
	if x != nil {
		return x.FilterToUseful
	}
	return false
}

type GetBasesReply struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Items         []*Base                `protobuf:"bytes,1,rep,name=Items,proto3" json:"Items,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetBasesReply) Reset() {
	*x = GetBasesReply{}
	mi := &file_darkstat_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetBasesReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetBasesReply) ProtoMessage() {}

func (x *GetBasesReply) ProtoReflect() protoreflect.Message {
	mi := &file_darkstat_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetBasesReply.ProtoReflect.Descriptor instead.
func (*GetBasesReply) Descriptor() ([]byte, []int) {
	return file_darkstat_proto_rawDescGZIP(), []int{5}
}

func (x *GetBasesReply) GetItems() []*Base {
	if x != nil {
		return x.Items
	}
	return nil
}

// The response message containing the greetings
type Base struct {
	state                  protoimpl.MessageState `protogen:"open.v1"`
	Name                   string                 `protobuf:"bytes,1,opt,name=Name,proto3" json:"Name,omitempty"`
	Archetypes             []string               `protobuf:"bytes,2,rep,name=Archetypes,proto3" json:"Archetypes,omitempty"`
	Nickname               string                 `protobuf:"bytes,3,opt,name=Nickname,proto3" json:"Nickname,omitempty"`
	FactionName            string                 `protobuf:"bytes,5,opt,name=FactionName,proto3" json:"FactionName,omitempty"`
	System                 string                 `protobuf:"bytes,6,opt,name=System,proto3" json:"System,omitempty"`
	SystemNickname         string                 `protobuf:"bytes,7,opt,name=SystemNickname,proto3" json:"SystemNickname,omitempty"`
	Region                 string                 `protobuf:"bytes,9,opt,name=Region,proto3" json:"Region,omitempty"`
	StridName              int64                  `protobuf:"varint,10,opt,name=StridName,proto3" json:"StridName,omitempty"`
	InfocardID             int64                  `protobuf:"varint,11,opt,name=InfocardID,proto3" json:"InfocardID,omitempty"`
	File                   string                 `protobuf:"bytes,12,opt,name=File,proto3" json:"File,omitempty"`
	BGCSBaseRunBy          string                 `protobuf:"bytes,13,opt,name=BGCS_base_run_by,json=BGCSBaseRunBy,proto3" json:"BGCS_base_run_by,omitempty"`
	Pos                    *Pos                   `protobuf:"bytes,14,opt,name=Pos,proto3" json:"Pos,omitempty"`
	SectorCoord            string                 `protobuf:"bytes,15,opt,name=SectorCoord,proto3" json:"SectorCoord,omitempty"`
	IsTransportUnreachable bool                   `protobuf:"varint,16,opt,name=IsTransportUnreachable,proto3" json:"IsTransportUnreachable,omitempty"`
	Reachable              bool                   `protobuf:"varint,18,opt,name=Reachable,proto3" json:"Reachable,omitempty"`
	IsPob                  bool                   `protobuf:"varint,19,opt,name=IsPob,proto3" json:"IsPob,omitempty"`
	MarketGoodsPerNick     map[string]*MarketGood `protobuf:"bytes,20,rep,name=MarketGoodsPerNick,proto3" json:"MarketGoodsPerNick,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	unknownFields          protoimpl.UnknownFields
	sizeCache              protoimpl.SizeCache
}

func (x *Base) Reset() {
	*x = Base{}
	mi := &file_darkstat_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Base) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Base) ProtoMessage() {}

func (x *Base) ProtoReflect() protoreflect.Message {
	mi := &file_darkstat_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Base.ProtoReflect.Descriptor instead.
func (*Base) Descriptor() ([]byte, []int) {
	return file_darkstat_proto_rawDescGZIP(), []int{6}
}

func (x *Base) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Base) GetArchetypes() []string {
	if x != nil {
		return x.Archetypes
	}
	return nil
}

func (x *Base) GetNickname() string {
	if x != nil {
		return x.Nickname
	}
	return ""
}

func (x *Base) GetFactionName() string {
	if x != nil {
		return x.FactionName
	}
	return ""
}

func (x *Base) GetSystem() string {
	if x != nil {
		return x.System
	}
	return ""
}

func (x *Base) GetSystemNickname() string {
	if x != nil {
		return x.SystemNickname
	}
	return ""
}

func (x *Base) GetRegion() string {
	if x != nil {
		return x.Region
	}
	return ""
}

func (x *Base) GetStridName() int64 {
	if x != nil {
		return x.StridName
	}
	return 0
}

func (x *Base) GetInfocardID() int64 {
	if x != nil {
		return x.InfocardID
	}
	return 0
}

func (x *Base) GetFile() string {
	if x != nil {
		return x.File
	}
	return ""
}

func (x *Base) GetBGCSBaseRunBy() string {
	if x != nil {
		return x.BGCSBaseRunBy
	}
	return ""
}

func (x *Base) GetPos() *Pos {
	if x != nil {
		return x.Pos
	}
	return nil
}

func (x *Base) GetSectorCoord() string {
	if x != nil {
		return x.SectorCoord
	}
	return ""
}

func (x *Base) GetIsTransportUnreachable() bool {
	if x != nil {
		return x.IsTransportUnreachable
	}
	return false
}

func (x *Base) GetReachable() bool {
	if x != nil {
		return x.Reachable
	}
	return false
}

func (x *Base) GetIsPob() bool {
	if x != nil {
		return x.IsPob
	}
	return false
}

func (x *Base) GetMarketGoodsPerNick() map[string]*MarketGood {
	if x != nil {
		return x.MarketGoodsPerNick
	}
	return nil
}

type MiningInfo struct {
	state                 protoimpl.MessageState `protogen:"open.v1"`
	DynamicLootMin        int64                  `protobuf:"varint,1,opt,name=DynamicLootMin,proto3" json:"DynamicLootMin,omitempty"`
	DynamicLootMax        int64                  `protobuf:"varint,2,opt,name=DynamicLootMax,proto3" json:"DynamicLootMax,omitempty"`
	DynamicLootDifficulty int64                  `protobuf:"varint,3,opt,name=DynamicLootDifficulty,proto3" json:"DynamicLootDifficulty,omitempty"`
	MinedGood             *MarketGood            `protobuf:"bytes,4,opt,name=MinedGood,proto3,oneof" json:"MinedGood,omitempty"`
	unknownFields         protoimpl.UnknownFields
	sizeCache             protoimpl.SizeCache
}

func (x *MiningInfo) Reset() {
	*x = MiningInfo{}
	mi := &file_darkstat_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MiningInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MiningInfo) ProtoMessage() {}

func (x *MiningInfo) ProtoReflect() protoreflect.Message {
	mi := &file_darkstat_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MiningInfo.ProtoReflect.Descriptor instead.
func (*MiningInfo) Descriptor() ([]byte, []int) {
	return file_darkstat_proto_rawDescGZIP(), []int{7}
}

func (x *MiningInfo) GetDynamicLootMin() int64 {
	if x != nil {
		return x.DynamicLootMin
	}
	return 0
}

func (x *MiningInfo) GetDynamicLootMax() int64 {
	if x != nil {
		return x.DynamicLootMax
	}
	return 0
}

func (x *MiningInfo) GetDynamicLootDifficulty() int64 {
	if x != nil {
		return x.DynamicLootDifficulty
	}
	return 0
}

func (x *MiningInfo) GetMinedGood() *MarketGood {
	if x != nil {
		return x.MinedGood
	}
	return nil
}

type MarketGood struct {
	state                  protoimpl.MessageState `protogen:"open.v1"`
	Nickname               string                 `protobuf:"bytes,1,opt,name=Nickname,proto3" json:"Nickname,omitempty"`
	ShipNickname           string                 `protobuf:"bytes,2,opt,name=ShipNickname,proto3" json:"ShipNickname,omitempty"`
	Name                   string                 `protobuf:"bytes,3,opt,name=Name,proto3" json:"Name,omitempty"`
	PriceBase              int64                  `protobuf:"varint,4,opt,name=PriceBase,proto3" json:"PriceBase,omitempty"`
	HpType                 string                 `protobuf:"bytes,5,opt,name=HpType,proto3" json:"HpType,omitempty"`
	Category               string                 `protobuf:"bytes,6,opt,name=Category,proto3" json:"Category,omitempty"`
	LevelRequired          int64                  `protobuf:"varint,7,opt,name=LevelRequired,proto3" json:"LevelRequired,omitempty"`
	RepRequired            float64                `protobuf:"fixed64,8,opt,name=RepRequired,proto3" json:"RepRequired,omitempty"`
	PriceBaseBuysFor       *int64                 `protobuf:"varint,9,opt,name=PriceBaseBuysFor,proto3,oneof" json:"PriceBaseBuysFor,omitempty"`
	PriceBaseSellsFor      int64                  `protobuf:"varint,10,opt,name=PriceBaseSellsFor,proto3" json:"PriceBaseSellsFor,omitempty"`
	Volume                 float64                `protobuf:"fixed64,11,opt,name=Volume,proto3" json:"Volume,omitempty"`
	ShipClass              int64                  `protobuf:"varint,12,opt,name=ShipClass,proto3" json:"ShipClass,omitempty"`
	BaseSells              bool                   `protobuf:"varint,13,opt,name=BaseSells,proto3" json:"BaseSells,omitempty"`
	IsServerSideOverride   bool                   `protobuf:"varint,14,opt,name=IsServerSideOverride,proto3" json:"IsServerSideOverride,omitempty"`
	NotBuyable             bool                   `protobuf:"varint,15,opt,name=NotBuyable,proto3" json:"NotBuyable,omitempty"`
	IsTransportUnreachable bool                   `protobuf:"varint,16,opt,name=IsTransportUnreachable,proto3" json:"IsTransportUnreachable,omitempty"`
	BaseInfo               *BaseInfo              `protobuf:"bytes,17,opt,name=base_info,json=baseInfo,proto3" json:"base_info,omitempty"`
	unknownFields          protoimpl.UnknownFields
	sizeCache              protoimpl.SizeCache
}

func (x *MarketGood) Reset() {
	*x = MarketGood{}
	mi := &file_darkstat_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MarketGood) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MarketGood) ProtoMessage() {}

func (x *MarketGood) ProtoReflect() protoreflect.Message {
	mi := &file_darkstat_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MarketGood.ProtoReflect.Descriptor instead.
func (*MarketGood) Descriptor() ([]byte, []int) {
	return file_darkstat_proto_rawDescGZIP(), []int{8}
}

func (x *MarketGood) GetNickname() string {
	if x != nil {
		return x.Nickname
	}
	return ""
}

func (x *MarketGood) GetShipNickname() string {
	if x != nil {
		return x.ShipNickname
	}
	return ""
}

func (x *MarketGood) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *MarketGood) GetPriceBase() int64 {
	if x != nil {
		return x.PriceBase
	}
	return 0
}

func (x *MarketGood) GetHpType() string {
	if x != nil {
		return x.HpType
	}
	return ""
}

func (x *MarketGood) GetCategory() string {
	if x != nil {
		return x.Category
	}
	return ""
}

func (x *MarketGood) GetLevelRequired() int64 {
	if x != nil {
		return x.LevelRequired
	}
	return 0
}

func (x *MarketGood) GetRepRequired() float64 {
	if x != nil {
		return x.RepRequired
	}
	return 0
}

func (x *MarketGood) GetPriceBaseBuysFor() int64 {
	if x != nil && x.PriceBaseBuysFor != nil {
		return *x.PriceBaseBuysFor
	}
	return 0
}

func (x *MarketGood) GetPriceBaseSellsFor() int64 {
	if x != nil {
		return x.PriceBaseSellsFor
	}
	return 0
}

func (x *MarketGood) GetVolume() float64 {
	if x != nil {
		return x.Volume
	}
	return 0
}

func (x *MarketGood) GetShipClass() int64 {
	if x != nil {
		return x.ShipClass
	}
	return 0
}

func (x *MarketGood) GetBaseSells() bool {
	if x != nil {
		return x.BaseSells
	}
	return false
}

func (x *MarketGood) GetIsServerSideOverride() bool {
	if x != nil {
		return x.IsServerSideOverride
	}
	return false
}

func (x *MarketGood) GetNotBuyable() bool {
	if x != nil {
		return x.NotBuyable
	}
	return false
}

func (x *MarketGood) GetIsTransportUnreachable() bool {
	if x != nil {
		return x.IsTransportUnreachable
	}
	return false
}

func (x *MarketGood) GetBaseInfo() *BaseInfo {
	if x != nil {
		return x.BaseInfo
	}
	return nil
}

type BaseInfo struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	BaseNickname  string                 `protobuf:"bytes,1,opt,name=BaseNickname,proto3" json:"BaseNickname,omitempty"`
	BaseName      string                 `protobuf:"bytes,2,opt,name=BaseName,proto3" json:"BaseName,omitempty"`
	SystemName    string                 `protobuf:"bytes,3,opt,name=SystemName,proto3" json:"SystemName,omitempty"`
	Region        string                 `protobuf:"bytes,4,opt,name=Region,proto3" json:"Region,omitempty"`
	FactionName   string                 `protobuf:"bytes,5,opt,name=FactionName,proto3" json:"FactionName,omitempty"`
	BasePos       *Pos                   `protobuf:"bytes,6,opt,name=BasePos,proto3" json:"BasePos,omitempty"`
	SectorCoord   string                 `protobuf:"bytes,7,opt,name=SectorCoord,proto3" json:"SectorCoord,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *BaseInfo) Reset() {
	*x = BaseInfo{}
	mi := &file_darkstat_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BaseInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BaseInfo) ProtoMessage() {}

func (x *BaseInfo) ProtoReflect() protoreflect.Message {
	mi := &file_darkstat_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BaseInfo.ProtoReflect.Descriptor instead.
func (*BaseInfo) Descriptor() ([]byte, []int) {
	return file_darkstat_proto_rawDescGZIP(), []int{9}
}

func (x *BaseInfo) GetBaseNickname() string {
	if x != nil {
		return x.BaseNickname
	}
	return ""
}

func (x *BaseInfo) GetBaseName() string {
	if x != nil {
		return x.BaseName
	}
	return ""
}

func (x *BaseInfo) GetSystemName() string {
	if x != nil {
		return x.SystemName
	}
	return ""
}

func (x *BaseInfo) GetRegion() string {
	if x != nil {
		return x.Region
	}
	return ""
}

func (x *BaseInfo) GetFactionName() string {
	if x != nil {
		return x.FactionName
	}
	return ""
}

func (x *BaseInfo) GetBasePos() *Pos {
	if x != nil {
		return x.BasePos
	}
	return nil
}

func (x *BaseInfo) GetSectorCoord() string {
	if x != nil {
		return x.SectorCoord
	}
	return ""
}

type Pos struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	X             float64                `protobuf:"fixed64,1,opt,name=X,proto3" json:"X,omitempty"`
	Y             float64                `protobuf:"fixed64,2,opt,name=Y,proto3" json:"Y,omitempty"`
	Z             float64                `protobuf:"fixed64,3,opt,name=Z,proto3" json:"Z,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Pos) Reset() {
	*x = Pos{}
	mi := &file_darkstat_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Pos) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Pos) ProtoMessage() {}

func (x *Pos) ProtoReflect() protoreflect.Message {
	mi := &file_darkstat_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Pos.ProtoReflect.Descriptor instead.
func (*Pos) Descriptor() ([]byte, []int) {
	return file_darkstat_proto_rawDescGZIP(), []int{10}
}

func (x *Pos) GetX() float64 {
	if x != nil {
		return x.X
	}
	return 0
}

func (x *Pos) GetY() float64 {
	if x != nil {
		return x.Y
	}
	return 0
}

func (x *Pos) GetZ() float64 {
	if x != nil {
		return x.Z
	}
	return 0
}

type GetCommoditiesInput struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// To Include market goods, where the item is sold and bought or not. Adds a lot of extra weight to data
	//
	// Example: `false`
	IncludeMarketGoods bool `protobuf:"varint,1,opt,name=IncludeMarketGoods,proto3" json:"IncludeMarketGoods,omitempty"`
	FilterToUseful     bool `protobuf:"varint,2,opt,name=FilterToUseful,proto3" json:"FilterToUseful,omitempty"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *GetCommoditiesInput) Reset() {
	*x = GetCommoditiesInput{}
	mi := &file_darkstat_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetCommoditiesInput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCommoditiesInput) ProtoMessage() {}

func (x *GetCommoditiesInput) ProtoReflect() protoreflect.Message {
	mi := &file_darkstat_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCommoditiesInput.ProtoReflect.Descriptor instead.
func (*GetCommoditiesInput) Descriptor() ([]byte, []int) {
	return file_darkstat_proto_rawDescGZIP(), []int{11}
}

func (x *GetCommoditiesInput) GetIncludeMarketGoods() bool {
	if x != nil {
		return x.IncludeMarketGoods
	}
	return false
}

func (x *GetCommoditiesInput) GetFilterToUseful() bool {
	if x != nil {
		return x.FilterToUseful
	}
	return false
}

type GetCommoditiesReply struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Items         []*Commodity           `protobuf:"bytes,1,rep,name=Items,proto3" json:"Items,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetCommoditiesReply) Reset() {
	*x = GetCommoditiesReply{}
	mi := &file_darkstat_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetCommoditiesReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCommoditiesReply) ProtoMessage() {}

func (x *GetCommoditiesReply) ProtoReflect() protoreflect.Message {
	mi := &file_darkstat_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCommoditiesReply.ProtoReflect.Descriptor instead.
func (*GetCommoditiesReply) Descriptor() ([]byte, []int) {
	return file_darkstat_proto_rawDescGZIP(), []int{12}
}

func (x *GetCommoditiesReply) GetItems() []*Commodity {
	if x != nil {
		return x.Items
	}
	return nil
}

type Commodity struct {
	state                 protoimpl.MessageState `protogen:"open.v1"`
	Nickname              string                 `protobuf:"bytes,1,opt,name=Nickname,proto3" json:"Nickname,omitempty"`
	PriceBase             int64                  `protobuf:"varint,2,opt,name=PriceBase,proto3" json:"PriceBase,omitempty"`
	Name                  string                 `protobuf:"bytes,3,opt,name=Name,proto3" json:"Name,omitempty"`
	Combinable            bool                   `protobuf:"varint,4,opt,name=Combinable,proto3" json:"Combinable,omitempty"`
	Volume                float64                `protobuf:"fixed64,5,opt,name=Volume,proto3" json:"Volume,omitempty"`
	ShipClass             int64                  `protobuf:"varint,6,opt,name=ShipClass,proto3" json:"ShipClass,omitempty"`
	NameID                int64                  `protobuf:"varint,7,opt,name=NameID,proto3" json:"NameID,omitempty"`
	InfocardID            int64                  `protobuf:"varint,8,opt,name=InfocardID,proto3" json:"InfocardID,omitempty"`
	Bases                 map[string]*MarketGood `protobuf:"bytes,9,rep,name=Bases,proto3" json:"Bases,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	PriceBestBaseBuysFor  int64                  `protobuf:"varint,10,opt,name=PriceBestBaseBuysFor,proto3" json:"PriceBestBaseBuysFor,omitempty"`
	PriceBestBaseSellsFor int64                  `protobuf:"varint,11,opt,name=PriceBestBaseSellsFor,proto3" json:"PriceBestBaseSellsFor,omitempty"`
	ProffitMargin         int64                  `protobuf:"varint,12,opt,name=ProffitMargin,proto3" json:"ProffitMargin,omitempty"`
	Mass                  float64                `protobuf:"fixed64,13,opt,name=Mass,proto3" json:"Mass,omitempty"`
	unknownFields         protoimpl.UnknownFields
	sizeCache             protoimpl.SizeCache
}

func (x *Commodity) Reset() {
	*x = Commodity{}
	mi := &file_darkstat_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Commodity) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Commodity) ProtoMessage() {}

func (x *Commodity) ProtoReflect() protoreflect.Message {
	mi := &file_darkstat_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Commodity.ProtoReflect.Descriptor instead.
func (*Commodity) Descriptor() ([]byte, []int) {
	return file_darkstat_proto_rawDescGZIP(), []int{13}
}

func (x *Commodity) GetNickname() string {
	if x != nil {
		return x.Nickname
	}
	return ""
}

func (x *Commodity) GetPriceBase() int64 {
	if x != nil {
		return x.PriceBase
	}
	return 0
}

func (x *Commodity) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Commodity) GetCombinable() bool {
	if x != nil {
		return x.Combinable
	}
	return false
}

func (x *Commodity) GetVolume() float64 {
	if x != nil {
		return x.Volume
	}
	return 0
}

func (x *Commodity) GetShipClass() int64 {
	if x != nil {
		return x.ShipClass
	}
	return 0
}

func (x *Commodity) GetNameID() int64 {
	if x != nil {
		return x.NameID
	}
	return 0
}

func (x *Commodity) GetInfocardID() int64 {
	if x != nil {
		return x.InfocardID
	}
	return 0
}

func (x *Commodity) GetBases() map[string]*MarketGood {
	if x != nil {
		return x.Bases
	}
	return nil
}

func (x *Commodity) GetPriceBestBaseBuysFor() int64 {
	if x != nil {
		return x.PriceBestBaseBuysFor
	}
	return 0
}

func (x *Commodity) GetPriceBestBaseSellsFor() int64 {
	if x != nil {
		return x.PriceBestBaseSellsFor
	}
	return 0
}

func (x *Commodity) GetProffitMargin() int64 {
	if x != nil {
		return x.ProffitMargin
	}
	return 0
}

func (x *Commodity) GetMass() float64 {
	if x != nil {
		return x.Mass
	}
	return 0
}

type GetAmmoReply struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Items         []*Ammo                `protobuf:"bytes,1,rep,name=Items,proto3" json:"Items,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetAmmoReply) Reset() {
	*x = GetAmmoReply{}
	mi := &file_darkstat_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetAmmoReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAmmoReply) ProtoMessage() {}

func (x *GetAmmoReply) ProtoReflect() protoreflect.Message {
	mi := &file_darkstat_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAmmoReply.ProtoReflect.Descriptor instead.
func (*GetAmmoReply) Descriptor() ([]byte, []int) {
	return file_darkstat_proto_rawDescGZIP(), []int{14}
}

func (x *GetAmmoReply) GetItems() []*Ammo {
	if x != nil {
		return x.Items
	}
	return nil
}

type Ammo struct {
	state               protoimpl.MessageState `protogen:"open.v1"`
	Name                string                 `protobuf:"bytes,1,opt,name=Name,proto3" json:"Name,omitempty"`
	Price               int64                  `protobuf:"varint,2,opt,name=Price,proto3" json:"Price,omitempty"`
	HitPts              int64                  `protobuf:"varint,3,opt,name=HitPts,proto3" json:"HitPts,omitempty"`
	Volume              float64                `protobuf:"fixed64,4,opt,name=Volume,proto3" json:"Volume,omitempty"`
	MunitionLifetime    float64                `protobuf:"fixed64,5,opt,name=MunitionLifetime,proto3" json:"MunitionLifetime,omitempty"`
	Nickname            string                 `protobuf:"bytes,6,opt,name=Nickname,proto3" json:"Nickname,omitempty"`
	NameID              int64                  `protobuf:"varint,7,opt,name=NameID,proto3" json:"NameID,omitempty"`
	InfoID              int64                  `protobuf:"varint,8,opt,name=InfoID,proto3" json:"InfoID,omitempty"`
	SeekerType          string                 `protobuf:"bytes,9,opt,name=SeekerType,proto3" json:"SeekerType,omitempty"`
	SeekerRange         int64                  `protobuf:"varint,10,opt,name=SeekerRange,proto3" json:"SeekerRange,omitempty"`
	SeekerFovDeg        int64                  `protobuf:"varint,11,opt,name=SeekerFovDeg,proto3" json:"SeekerFovDeg,omitempty"`
	Bases               map[string]*MarketGood `protobuf:"bytes,12,rep,name=Bases,proto3" json:"Bases,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	DiscoveryTechCompat *DiscoveryTechCompat   `protobuf:"bytes,13,opt,name=DiscoveryTechCompat,proto3,oneof" json:"DiscoveryTechCompat,omitempty"`
	AmountInCatridge    *int64                 `protobuf:"varint,14,opt,name=AmountInCatridge,proto3,oneof" json:"AmountInCatridge,omitempty"`
	MaxCatridges        *int64                 `protobuf:"varint,15,opt,name=MaxCatridges,proto3,oneof" json:"MaxCatridges,omitempty"`
	Mass                float64                `protobuf:"fixed64,16,opt,name=Mass,proto3" json:"Mass,omitempty"`
	unknownFields       protoimpl.UnknownFields
	sizeCache           protoimpl.SizeCache
}

func (x *Ammo) Reset() {
	*x = Ammo{}
	mi := &file_darkstat_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Ammo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ammo) ProtoMessage() {}

func (x *Ammo) ProtoReflect() protoreflect.Message {
	mi := &file_darkstat_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ammo.ProtoReflect.Descriptor instead.
func (*Ammo) Descriptor() ([]byte, []int) {
	return file_darkstat_proto_rawDescGZIP(), []int{15}
}

func (x *Ammo) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Ammo) GetPrice() int64 {
	if x != nil {
		return x.Price
	}
	return 0
}

func (x *Ammo) GetHitPts() int64 {
	if x != nil {
		return x.HitPts
	}
	return 0
}

func (x *Ammo) GetVolume() float64 {
	if x != nil {
		return x.Volume
	}
	return 0
}

func (x *Ammo) GetMunitionLifetime() float64 {
	if x != nil {
		return x.MunitionLifetime
	}
	return 0
}

func (x *Ammo) GetNickname() string {
	if x != nil {
		return x.Nickname
	}
	return ""
}

func (x *Ammo) GetNameID() int64 {
	if x != nil {
		return x.NameID
	}
	return 0
}

func (x *Ammo) GetInfoID() int64 {
	if x != nil {
		return x.InfoID
	}
	return 0
}

func (x *Ammo) GetSeekerType() string {
	if x != nil {
		return x.SeekerType
	}
	return ""
}

func (x *Ammo) GetSeekerRange() int64 {
	if x != nil {
		return x.SeekerRange
	}
	return 0
}

func (x *Ammo) GetSeekerFovDeg() int64 {
	if x != nil {
		return x.SeekerFovDeg
	}
	return 0
}

func (x *Ammo) GetBases() map[string]*MarketGood {
	if x != nil {
		return x.Bases
	}
	return nil
}

func (x *Ammo) GetDiscoveryTechCompat() *DiscoveryTechCompat {
	if x != nil {
		return x.DiscoveryTechCompat
	}
	return nil
}

func (x *Ammo) GetAmountInCatridge() int64 {
	if x != nil && x.AmountInCatridge != nil {
		return *x.AmountInCatridge
	}
	return 0
}

func (x *Ammo) GetMaxCatridges() int64 {
	if x != nil && x.MaxCatridges != nil {
		return *x.MaxCatridges
	}
	return 0
}

func (x *Ammo) GetMass() float64 {
	if x != nil {
		return x.Mass
	}
	return 0
}

type DiscoveryTechCompat struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	TechcompatByID map[string]float64     `protobuf:"bytes,1,rep,name=TechcompatByID,proto3" json:"TechcompatByID,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"fixed64,2,opt,name=value"`
	TechCell       string                 `protobuf:"bytes,2,opt,name=TechCell,proto3" json:"TechCell,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *DiscoveryTechCompat) Reset() {
	*x = DiscoveryTechCompat{}
	mi := &file_darkstat_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DiscoveryTechCompat) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DiscoveryTechCompat) ProtoMessage() {}

func (x *DiscoveryTechCompat) ProtoReflect() protoreflect.Message {
	mi := &file_darkstat_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DiscoveryTechCompat.ProtoReflect.Descriptor instead.
func (*DiscoveryTechCompat) Descriptor() ([]byte, []int) {
	return file_darkstat_proto_rawDescGZIP(), []int{16}
}

func (x *DiscoveryTechCompat) GetTechcompatByID() map[string]float64 {
	if x != nil {
		return x.TechcompatByID
	}
	return nil
}

func (x *DiscoveryTechCompat) GetTechCell() string {
	if x != nil {
		return x.TechCell
	}
	return ""
}

type TechCompatAnswer struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	TechCompat    *DiscoveryTechCompat   `protobuf:"bytes,1,opt,name=TechCompat,proto3,oneof" json:"TechCompat,omitempty"`
	Error         *string                `protobuf:"bytes,2,opt,name=Error,proto3,oneof" json:"Error,omitempty"`
	Nickname      string                 `protobuf:"bytes,3,opt,name=Nickname,proto3" json:"Nickname,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TechCompatAnswer) Reset() {
	*x = TechCompatAnswer{}
	mi := &file_darkstat_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TechCompatAnswer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TechCompatAnswer) ProtoMessage() {}

func (x *TechCompatAnswer) ProtoReflect() protoreflect.Message {
	mi := &file_darkstat_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TechCompatAnswer.ProtoReflect.Descriptor instead.
func (*TechCompatAnswer) Descriptor() ([]byte, []int) {
	return file_darkstat_proto_rawDescGZIP(), []int{17}
}

func (x *TechCompatAnswer) GetTechCompat() *DiscoveryTechCompat {
	if x != nil {
		return x.TechCompat
	}
	return nil
}

func (x *TechCompatAnswer) GetError() string {
	if x != nil && x.Error != nil {
		return *x.Error
	}
	return ""
}

func (x *TechCompatAnswer) GetNickname() string {
	if x != nil {
		return x.Nickname
	}
	return ""
}

type GetTechCompatInput struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Nicknames     []string               `protobuf:"bytes,1,rep,name=Nicknames,proto3" json:"Nicknames,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetTechCompatInput) Reset() {
	*x = GetTechCompatInput{}
	mi := &file_darkstat_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetTechCompatInput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTechCompatInput) ProtoMessage() {}

func (x *GetTechCompatInput) ProtoReflect() protoreflect.Message {
	mi := &file_darkstat_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTechCompatInput.ProtoReflect.Descriptor instead.
func (*GetTechCompatInput) Descriptor() ([]byte, []int) {
	return file_darkstat_proto_rawDescGZIP(), []int{18}
}

func (x *GetTechCompatInput) GetNicknames() []string {
	if x != nil {
		return x.Nicknames
	}
	return nil
}

type GetTechCompatReply struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Answers       []*TechCompatAnswer    `protobuf:"bytes,1,rep,name=Answers,proto3" json:"Answers,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetTechCompatReply) Reset() {
	*x = GetTechCompatReply{}
	mi := &file_darkstat_proto_msgTypes[19]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetTechCompatReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTechCompatReply) ProtoMessage() {}

func (x *GetTechCompatReply) ProtoReflect() protoreflect.Message {
	mi := &file_darkstat_proto_msgTypes[19]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTechCompatReply.ProtoReflect.Descriptor instead.
func (*GetTechCompatReply) Descriptor() ([]byte, []int) {
	return file_darkstat_proto_rawDescGZIP(), []int{19}
}

func (x *GetTechCompatReply) GetAnswers() []*TechCompatAnswer {
	if x != nil {
		return x.Answers
	}
	return nil
}

type GetCounterMeasuresReply struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Items         []*CounterMeasure      `protobuf:"bytes,1,rep,name=Items,proto3" json:"Items,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetCounterMeasuresReply) Reset() {
	*x = GetCounterMeasuresReply{}
	mi := &file_darkstat_proto_msgTypes[20]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetCounterMeasuresReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCounterMeasuresReply) ProtoMessage() {}

func (x *GetCounterMeasuresReply) ProtoReflect() protoreflect.Message {
	mi := &file_darkstat_proto_msgTypes[20]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCounterMeasuresReply.ProtoReflect.Descriptor instead.
func (*GetCounterMeasuresReply) Descriptor() ([]byte, []int) {
	return file_darkstat_proto_rawDescGZIP(), []int{20}
}

func (x *GetCounterMeasuresReply) GetItems() []*CounterMeasure {
	if x != nil {
		return x.Items
	}
	return nil
}

type CounterMeasure struct {
	state               protoimpl.MessageState `protogen:"open.v1"`
	Name                string                 `protobuf:"bytes,1,opt,name=Name,proto3" json:"Name,omitempty"`
	Price               int64                  `protobuf:"varint,2,opt,name=Price,proto3" json:"Price,omitempty"`
	HitPts              int64                  `protobuf:"varint,3,opt,name=HitPts,proto3" json:"HitPts,omitempty"`
	AIRange             int64                  `protobuf:"varint,4,opt,name=AIRange,proto3" json:"AIRange,omitempty"`
	Lifetime            int64                  `protobuf:"varint,5,opt,name=Lifetime,proto3" json:"Lifetime,omitempty"`
	Range               int64                  `protobuf:"varint,6,opt,name=Range,proto3" json:"Range,omitempty"`
	DiversionPctg       int64                  `protobuf:"varint,7,opt,name=DiversionPctg,proto3" json:"DiversionPctg,omitempty"`
	Lootable            bool                   `protobuf:"varint,8,opt,name=Lootable,proto3" json:"Lootable,omitempty"`
	Nickname            string                 `protobuf:"bytes,9,opt,name=Nickname,proto3" json:"Nickname,omitempty"`
	NameID              int64                  `protobuf:"varint,10,opt,name=NameID,proto3" json:"NameID,omitempty"`
	InfoID              int64                  `protobuf:"varint,11,opt,name=InfoID,proto3" json:"InfoID,omitempty"`
	Bases               map[string]*MarketGood `protobuf:"bytes,12,rep,name=Bases,proto3" json:"Bases,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	DiscoveryTechCompat *DiscoveryTechCompat   `protobuf:"bytes,13,opt,name=DiscoveryTechCompat,proto3,oneof" json:"DiscoveryTechCompat,omitempty"`
	AmountInCatridge    *int64                 `protobuf:"varint,14,opt,name=AmountInCatridge,proto3,oneof" json:"AmountInCatridge,omitempty"`
	MaxCatridges        *int64                 `protobuf:"varint,15,opt,name=MaxCatridges,proto3,oneof" json:"MaxCatridges,omitempty"`
	Mass                float64                `protobuf:"fixed64,16,opt,name=Mass,proto3" json:"Mass,omitempty"`
	unknownFields       protoimpl.UnknownFields
	sizeCache           protoimpl.SizeCache
}

func (x *CounterMeasure) Reset() {
	*x = CounterMeasure{}
	mi := &file_darkstat_proto_msgTypes[21]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CounterMeasure) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CounterMeasure) ProtoMessage() {}

func (x *CounterMeasure) ProtoReflect() protoreflect.Message {
	mi := &file_darkstat_proto_msgTypes[21]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CounterMeasure.ProtoReflect.Descriptor instead.
func (*CounterMeasure) Descriptor() ([]byte, []int) {
	return file_darkstat_proto_rawDescGZIP(), []int{21}
}

func (x *CounterMeasure) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CounterMeasure) GetPrice() int64 {
	if x != nil {
		return x.Price
	}
	return 0
}

func (x *CounterMeasure) GetHitPts() int64 {
	if x != nil {
		return x.HitPts
	}
	return 0
}

func (x *CounterMeasure) GetAIRange() int64 {
	if x != nil {
		return x.AIRange
	}
	return 0
}

func (x *CounterMeasure) GetLifetime() int64 {
	if x != nil {
		return x.Lifetime
	}
	return 0
}

func (x *CounterMeasure) GetRange() int64 {
	if x != nil {
		return x.Range
	}
	return 0
}

func (x *CounterMeasure) GetDiversionPctg() int64 {
	if x != nil {
		return x.DiversionPctg
	}
	return 0
}

func (x *CounterMeasure) GetLootable() bool {
	if x != nil {
		return x.Lootable
	}
	return false
}

func (x *CounterMeasure) GetNickname() string {
	if x != nil {
		return x.Nickname
	}
	return ""
}

func (x *CounterMeasure) GetNameID() int64 {
	if x != nil {
		return x.NameID
	}
	return 0
}

func (x *CounterMeasure) GetInfoID() int64 {
	if x != nil {
		return x.InfoID
	}
	return 0
}

func (x *CounterMeasure) GetBases() map[string]*MarketGood {
	if x != nil {
		return x.Bases
	}
	return nil
}

func (x *CounterMeasure) GetDiscoveryTechCompat() *DiscoveryTechCompat {
	if x != nil {
		return x.DiscoveryTechCompat
	}
	return nil
}

func (x *CounterMeasure) GetAmountInCatridge() int64 {
	if x != nil && x.AmountInCatridge != nil {
		return *x.AmountInCatridge
	}
	return 0
}

func (x *CounterMeasure) GetMaxCatridges() int64 {
	if x != nil && x.MaxCatridges != nil {
		return *x.MaxCatridges
	}
	return 0
}

func (x *CounterMeasure) GetMass() float64 {
	if x != nil {
		return x.Mass
	}
	return 0
}

type GetEnginesReply struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Items         []*Engine              `protobuf:"bytes,1,rep,name=Items,proto3" json:"Items,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetEnginesReply) Reset() {
	*x = GetEnginesReply{}
	mi := &file_darkstat_proto_msgTypes[22]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetEnginesReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetEnginesReply) ProtoMessage() {}

func (x *GetEnginesReply) ProtoReflect() protoreflect.Message {
	mi := &file_darkstat_proto_msgTypes[22]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetEnginesReply.ProtoReflect.Descriptor instead.
func (*GetEnginesReply) Descriptor() ([]byte, []int) {
	return file_darkstat_proto_rawDescGZIP(), []int{22}
}

func (x *GetEnginesReply) GetItems() []*Engine {
	if x != nil {
		return x.Items
	}
	return nil
}

type Engine struct {
	state               protoimpl.MessageState `protogen:"open.v1"`
	Name                string                 `protobuf:"bytes,1,opt,name=Name,proto3" json:"Name,omitempty"`
	Price               int64                  `protobuf:"varint,2,opt,name=Price,proto3" json:"Price,omitempty"`
	CruiseSpeed         int64                  `protobuf:"varint,3,opt,name=CruiseSpeed,proto3" json:"CruiseSpeed,omitempty"`
	CruiseChargeTime    int64                  `protobuf:"varint,4,opt,name=CruiseChargeTime,proto3" json:"CruiseChargeTime,omitempty"`
	LinearDrag          int64                  `protobuf:"varint,5,opt,name=LinearDrag,proto3" json:"LinearDrag,omitempty"`
	MaxForce            int64                  `protobuf:"varint,6,opt,name=MaxForce,proto3" json:"MaxForce,omitempty"`
	ReverseFraction     float64                `protobuf:"fixed64,7,opt,name=ReverseFraction,proto3" json:"ReverseFraction,omitempty"`
	ImpulseSpeed        float64                `protobuf:"fixed64,8,opt,name=ImpulseSpeed,proto3" json:"ImpulseSpeed,omitempty"`
	HpType              string                 `protobuf:"bytes,9,opt,name=HpType,proto3" json:"HpType,omitempty"`
	FlameEffect         string                 `protobuf:"bytes,10,opt,name=FlameEffect,proto3" json:"FlameEffect,omitempty"`
	TrailEffect         string                 `protobuf:"bytes,11,opt,name=TrailEffect,proto3" json:"TrailEffect,omitempty"`
	Nickname            string                 `protobuf:"bytes,12,opt,name=Nickname,proto3" json:"Nickname,omitempty"`
	NameID              int64                  `protobuf:"varint,13,opt,name=NameID,proto3" json:"NameID,omitempty"`
	InfoID              int64                  `protobuf:"varint,14,opt,name=InfoID,proto3" json:"InfoID,omitempty"`
	Bases               map[string]*MarketGood `protobuf:"bytes,15,rep,name=Bases,proto3" json:"Bases,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	DiscoveryTechCompat *DiscoveryTechCompat   `protobuf:"bytes,16,opt,name=DiscoveryTechCompat,proto3,oneof" json:"DiscoveryTechCompat,omitempty"`
	Mass                float64                `protobuf:"fixed64,17,opt,name=Mass,proto3" json:"Mass,omitempty"`
	unknownFields       protoimpl.UnknownFields
	sizeCache           protoimpl.SizeCache
}

func (x *Engine) Reset() {
	*x = Engine{}
	mi := &file_darkstat_proto_msgTypes[23]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Engine) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Engine) ProtoMessage() {}

func (x *Engine) ProtoReflect() protoreflect.Message {
	mi := &file_darkstat_proto_msgTypes[23]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Engine.ProtoReflect.Descriptor instead.
func (*Engine) Descriptor() ([]byte, []int) {
	return file_darkstat_proto_rawDescGZIP(), []int{23}
}

func (x *Engine) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Engine) GetPrice() int64 {
	if x != nil {
		return x.Price
	}
	return 0
}

func (x *Engine) GetCruiseSpeed() int64 {
	if x != nil {
		return x.CruiseSpeed
	}
	return 0
}

func (x *Engine) GetCruiseChargeTime() int64 {
	if x != nil {
		return x.CruiseChargeTime
	}
	return 0
}

func (x *Engine) GetLinearDrag() int64 {
	if x != nil {
		return x.LinearDrag
	}
	return 0
}

func (x *Engine) GetMaxForce() int64 {
	if x != nil {
		return x.MaxForce
	}
	return 0
}

func (x *Engine) GetReverseFraction() float64 {
	if x != nil {
		return x.ReverseFraction
	}
	return 0
}

func (x *Engine) GetImpulseSpeed() float64 {
	if x != nil {
		return x.ImpulseSpeed
	}
	return 0
}

func (x *Engine) GetHpType() string {
	if x != nil {
		return x.HpType
	}
	return ""
}

func (x *Engine) GetFlameEffect() string {
	if x != nil {
		return x.FlameEffect
	}
	return ""
}

func (x *Engine) GetTrailEffect() string {
	if x != nil {
		return x.TrailEffect
	}
	return ""
}

func (x *Engine) GetNickname() string {
	if x != nil {
		return x.Nickname
	}
	return ""
}

func (x *Engine) GetNameID() int64 {
	if x != nil {
		return x.NameID
	}
	return 0
}

func (x *Engine) GetInfoID() int64 {
	if x != nil {
		return x.InfoID
	}
	return 0
}

func (x *Engine) GetBases() map[string]*MarketGood {
	if x != nil {
		return x.Bases
	}
	return nil
}

func (x *Engine) GetDiscoveryTechCompat() *DiscoveryTechCompat {
	if x != nil {
		return x.DiscoveryTechCompat
	}
	return nil
}

func (x *Engine) GetMass() float64 {
	if x != nil {
		return x.Mass
	}
	return 0
}

type GetFactionsInput struct {
	state              protoimpl.MessageState `protogen:"open.v1"`
	IncludeReputations bool                   `protobuf:"varint,1,opt,name=IncludeReputations,proto3" json:"IncludeReputations,omitempty"`
	IncludeBribes      bool                   `protobuf:"varint,2,opt,name=IncludeBribes,proto3" json:"IncludeBribes,omitempty"`
	FilterToUseful     bool                   `protobuf:"varint,3,opt,name=FilterToUseful,proto3" json:"FilterToUseful,omitempty"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *GetFactionsInput) Reset() {
	*x = GetFactionsInput{}
	mi := &file_darkstat_proto_msgTypes[24]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetFactionsInput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetFactionsInput) ProtoMessage() {}

func (x *GetFactionsInput) ProtoReflect() protoreflect.Message {
	mi := &file_darkstat_proto_msgTypes[24]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetFactionsInput.ProtoReflect.Descriptor instead.
func (*GetFactionsInput) Descriptor() ([]byte, []int) {
	return file_darkstat_proto_rawDescGZIP(), []int{24}
}

func (x *GetFactionsInput) GetIncludeReputations() bool {
	if x != nil {
		return x.IncludeReputations
	}
	return false
}

func (x *GetFactionsInput) GetIncludeBribes() bool {
	if x != nil {
		return x.IncludeBribes
	}
	return false
}

func (x *GetFactionsInput) GetFilterToUseful() bool {
	if x != nil {
		return x.FilterToUseful
	}
	return false
}

type GetFactionsReply struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Items         []*Faction             `protobuf:"bytes,1,rep,name=Items,proto3" json:"Items,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetFactionsReply) Reset() {
	*x = GetFactionsReply{}
	mi := &file_darkstat_proto_msgTypes[25]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetFactionsReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetFactionsReply) ProtoMessage() {}

func (x *GetFactionsReply) ProtoReflect() protoreflect.Message {
	mi := &file_darkstat_proto_msgTypes[25]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetFactionsReply.ProtoReflect.Descriptor instead.
func (*GetFactionsReply) Descriptor() ([]byte, []int) {
	return file_darkstat_proto_rawDescGZIP(), []int{25}
}

func (x *GetFactionsReply) GetItems() []*Faction {
	if x != nil {
		return x.Items
	}
	return nil
}

type Faction struct {
	state             protoimpl.MessageState `protogen:"open.v1"`
	Name              string                 `protobuf:"bytes,1,opt,name=Name,proto3" json:"Name,omitempty"`
	ShortName         string                 `protobuf:"bytes,2,opt,name=ShortName,proto3" json:"ShortName,omitempty"`
	Nickname          string                 `protobuf:"bytes,3,opt,name=Nickname,proto3" json:"Nickname,omitempty"`
	ObjectDestruction float64                `protobuf:"fixed64,4,opt,name=ObjectDestruction,proto3" json:"ObjectDestruction,omitempty"`
	MissionSuccess    float64                `protobuf:"fixed64,5,opt,name=MissionSuccess,proto3" json:"MissionSuccess,omitempty"`
	MissionFailure    float64                `protobuf:"fixed64,6,opt,name=MissionFailure,proto3" json:"MissionFailure,omitempty"`
	MissionAbort      float64                `protobuf:"fixed64,7,opt,name=MissionAbort,proto3" json:"MissionAbort,omitempty"`
	InfonameID        int64                  `protobuf:"varint,8,opt,name=InfonameID,proto3" json:"InfonameID,omitempty"`
	InfocardID        int64                  `protobuf:"varint,9,opt,name=InfocardID,proto3" json:"InfocardID,omitempty"`
	Reputations       []*Reputation          `protobuf:"bytes,10,rep,name=Reputations,proto3" json:"Reputations,omitempty"`
	Bribes            []*Bribe               `protobuf:"bytes,11,rep,name=Bribes,proto3" json:"Bribes,omitempty"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *Faction) Reset() {
	*x = Faction{}
	mi := &file_darkstat_proto_msgTypes[26]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Faction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Faction) ProtoMessage() {}

func (x *Faction) ProtoReflect() protoreflect.Message {
	mi := &file_darkstat_proto_msgTypes[26]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Faction.ProtoReflect.Descriptor instead.
func (*Faction) Descriptor() ([]byte, []int) {
	return file_darkstat_proto_rawDescGZIP(), []int{26}
}

func (x *Faction) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Faction) GetShortName() string {
	if x != nil {
		return x.ShortName
	}
	return ""
}

func (x *Faction) GetNickname() string {
	if x != nil {
		return x.Nickname
	}
	return ""
}

func (x *Faction) GetObjectDestruction() float64 {
	if x != nil {
		return x.ObjectDestruction
	}
	return 0
}

func (x *Faction) GetMissionSuccess() float64 {
	if x != nil {
		return x.MissionSuccess
	}
	return 0
}

func (x *Faction) GetMissionFailure() float64 {
	if x != nil {
		return x.MissionFailure
	}
	return 0
}

func (x *Faction) GetMissionAbort() float64 {
	if x != nil {
		return x.MissionAbort
	}
	return 0
}

func (x *Faction) GetInfonameID() int64 {
	if x != nil {
		return x.InfonameID
	}
	return 0
}

func (x *Faction) GetInfocardID() int64 {
	if x != nil {
		return x.InfocardID
	}
	return 0
}

func (x *Faction) GetReputations() []*Reputation {
	if x != nil {
		return x.Reputations
	}
	return nil
}

func (x *Faction) GetBribes() []*Bribe {
	if x != nil {
		return x.Bribes
	}
	return nil
}

type Reputation struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Name          string                 `protobuf:"bytes,1,opt,name=Name,proto3" json:"Name,omitempty"`
	Rep           float64                `protobuf:"fixed64,2,opt,name=Rep,proto3" json:"Rep,omitempty"`
	Empathy       float64                `protobuf:"fixed64,3,opt,name=Empathy,proto3" json:"Empathy,omitempty"`
	Nickname      string                 `protobuf:"bytes,4,opt,name=Nickname,proto3" json:"Nickname,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Reputation) Reset() {
	*x = Reputation{}
	mi := &file_darkstat_proto_msgTypes[27]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Reputation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Reputation) ProtoMessage() {}

func (x *Reputation) ProtoReflect() protoreflect.Message {
	mi := &file_darkstat_proto_msgTypes[27]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Reputation.ProtoReflect.Descriptor instead.
func (*Reputation) Descriptor() ([]byte, []int) {
	return file_darkstat_proto_rawDescGZIP(), []int{27}
}

func (x *Reputation) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Reputation) GetRep() float64 {
	if x != nil {
		return x.Rep
	}
	return 0
}

func (x *Reputation) GetEmpathy() float64 {
	if x != nil {
		return x.Empathy
	}
	return 0
}

func (x *Reputation) GetNickname() string {
	if x != nil {
		return x.Nickname
	}
	return ""
}

type Bribe struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	BaseNickname  string                 `protobuf:"bytes,1,opt,name=BaseNickname,proto3" json:"BaseNickname,omitempty"`
	Chance        float64                `protobuf:"fixed64,2,opt,name=Chance,proto3" json:"Chance,omitempty"`
	BaseInfo      *BaseInfo              `protobuf:"bytes,3,opt,name=BaseInfo,proto3" json:"BaseInfo,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Bribe) Reset() {
	*x = Bribe{}
	mi := &file_darkstat_proto_msgTypes[28]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Bribe) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bribe) ProtoMessage() {}

func (x *Bribe) ProtoReflect() protoreflect.Message {
	mi := &file_darkstat_proto_msgTypes[28]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bribe.ProtoReflect.Descriptor instead.
func (*Bribe) Descriptor() ([]byte, []int) {
	return file_darkstat_proto_rawDescGZIP(), []int{28}
}

func (x *Bribe) GetBaseNickname() string {
	if x != nil {
		return x.BaseNickname
	}
	return ""
}

func (x *Bribe) GetChance() float64 {
	if x != nil {
		return x.Chance
	}
	return 0
}

func (x *Bribe) GetBaseInfo() *BaseInfo {
	if x != nil {
		return x.BaseInfo
	}
	return nil
}

type GetGunsReply struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Items         []*Gun                 `protobuf:"bytes,1,rep,name=Items,proto3" json:"Items,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetGunsReply) Reset() {
	*x = GetGunsReply{}
	mi := &file_darkstat_proto_msgTypes[29]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetGunsReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetGunsReply) ProtoMessage() {}

func (x *GetGunsReply) ProtoReflect() protoreflect.Message {
	mi := &file_darkstat_proto_msgTypes[29]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetGunsReply.ProtoReflect.Descriptor instead.
func (*GetGunsReply) Descriptor() ([]byte, []int) {
	return file_darkstat_proto_rawDescGZIP(), []int{29}
}

func (x *GetGunsReply) GetItems() []*Gun {
	if x != nil {
		return x.Items
	}
	return nil
}

type Gun struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Gun) Reset() {
	*x = Gun{}
	mi := &file_darkstat_proto_msgTypes[30]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Gun) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Gun) ProtoMessage() {}

func (x *Gun) ProtoReflect() protoreflect.Message {
	mi := &file_darkstat_proto_msgTypes[30]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Gun.ProtoReflect.Descriptor instead.
func (*Gun) Descriptor() ([]byte, []int) {
	return file_darkstat_proto_rawDescGZIP(), []int{30}
}

type GetMinesReply struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Items         []*Mine                `protobuf:"bytes,1,rep,name=Items,proto3" json:"Items,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetMinesReply) Reset() {
	*x = GetMinesReply{}
	mi := &file_darkstat_proto_msgTypes[31]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetMinesReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetMinesReply) ProtoMessage() {}

func (x *GetMinesReply) ProtoReflect() protoreflect.Message {
	mi := &file_darkstat_proto_msgTypes[31]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetMinesReply.ProtoReflect.Descriptor instead.
func (*GetMinesReply) Descriptor() ([]byte, []int) {
	return file_darkstat_proto_rawDescGZIP(), []int{31}
}

func (x *GetMinesReply) GetItems() []*Mine {
	if x != nil {
		return x.Items
	}
	return nil
}

type Mine struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Mine) Reset() {
	*x = Mine{}
	mi := &file_darkstat_proto_msgTypes[32]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Mine) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Mine) ProtoMessage() {}

func (x *Mine) ProtoReflect() protoreflect.Message {
	mi := &file_darkstat_proto_msgTypes[32]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Mine.ProtoReflect.Descriptor instead.
func (*Mine) Descriptor() ([]byte, []int) {
	return file_darkstat_proto_rawDescGZIP(), []int{32}
}

type GetScannersReply struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Items         []*Scanner             `protobuf:"bytes,1,rep,name=Items,proto3" json:"Items,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetScannersReply) Reset() {
	*x = GetScannersReply{}
	mi := &file_darkstat_proto_msgTypes[33]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetScannersReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetScannersReply) ProtoMessage() {}

func (x *GetScannersReply) ProtoReflect() protoreflect.Message {
	mi := &file_darkstat_proto_msgTypes[33]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetScannersReply.ProtoReflect.Descriptor instead.
func (*GetScannersReply) Descriptor() ([]byte, []int) {
	return file_darkstat_proto_rawDescGZIP(), []int{33}
}

func (x *GetScannersReply) GetItems() []*Scanner {
	if x != nil {
		return x.Items
	}
	return nil
}

type Scanner struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Scanner) Reset() {
	*x = Scanner{}
	mi := &file_darkstat_proto_msgTypes[34]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Scanner) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Scanner) ProtoMessage() {}

func (x *Scanner) ProtoReflect() protoreflect.Message {
	mi := &file_darkstat_proto_msgTypes[34]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Scanner.ProtoReflect.Descriptor instead.
func (*Scanner) Descriptor() ([]byte, []int) {
	return file_darkstat_proto_rawDescGZIP(), []int{34}
}

type GetShieldsReply struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Items         []*Shield              `protobuf:"bytes,1,rep,name=Items,proto3" json:"Items,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetShieldsReply) Reset() {
	*x = GetShieldsReply{}
	mi := &file_darkstat_proto_msgTypes[35]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetShieldsReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetShieldsReply) ProtoMessage() {}

func (x *GetShieldsReply) ProtoReflect() protoreflect.Message {
	mi := &file_darkstat_proto_msgTypes[35]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetShieldsReply.ProtoReflect.Descriptor instead.
func (*GetShieldsReply) Descriptor() ([]byte, []int) {
	return file_darkstat_proto_rawDescGZIP(), []int{35}
}

func (x *GetShieldsReply) GetItems() []*Shield {
	if x != nil {
		return x.Items
	}
	return nil
}

type Shield struct {
	state               protoimpl.MessageState `protogen:"open.v1"`
	Name                string                 `protobuf:"bytes,1,opt,name=Name,proto3" json:"Name,omitempty"`
	Class               string                 `protobuf:"bytes,2,opt,name=Class,proto3" json:"Class,omitempty"`
	Type                string                 `protobuf:"bytes,3,opt,name=Type,proto3" json:"Type,omitempty"`
	Technology          string                 `protobuf:"bytes,4,opt,name=Technology,proto3" json:"Technology,omitempty"`
	Price               int64                  `protobuf:"varint,5,opt,name=Price,proto3" json:"Price,omitempty"`
	Capacity            int64                  `protobuf:"varint,6,opt,name=Capacity,proto3" json:"Capacity,omitempty"`
	RegenerationRate    int64                  `protobuf:"varint,7,opt,name=RegenerationRate,proto3" json:"RegenerationRate,omitempty"`
	ConstantPowerDraw   int64                  `protobuf:"varint,8,opt,name=ConstantPowerDraw,proto3" json:"ConstantPowerDraw,omitempty"`
	Value               float64                `protobuf:"fixed64,9,opt,name=Value,proto3" json:"Value,omitempty"`
	RebuildPowerDraw    int64                  `protobuf:"varint,10,opt,name=RebuildPowerDraw,proto3" json:"RebuildPowerDraw,omitempty"`
	OffRebuildTime      int64                  `protobuf:"varint,11,opt,name=OffRebuildTime,proto3" json:"OffRebuildTime,omitempty"`
	Toughness           float64                `protobuf:"fixed64,12,opt,name=Toughness,proto3" json:"Toughness,omitempty"`
	HitPts              int64                  `protobuf:"varint,13,opt,name=HitPts,proto3" json:"HitPts,omitempty"`
	Lootable            bool                   `protobuf:"varint,14,opt,name=Lootable,proto3" json:"Lootable,omitempty"`
	Nickname            string                 `protobuf:"bytes,15,opt,name=Nickname,proto3" json:"Nickname,omitempty"`
	HpType              string                 `protobuf:"bytes,16,opt,name=HpType,proto3" json:"HpType,omitempty"`
	IdsName             int64                  `protobuf:"varint,17,opt,name=IdsName,proto3" json:"IdsName,omitempty"`
	IdsInfo             int64                  `protobuf:"varint,18,opt,name=IdsInfo,proto3" json:"IdsInfo,omitempty"`
	Mass                float64                `protobuf:"fixed64,19,opt,name=Mass,proto3" json:"Mass,omitempty"`
	Bases               map[string]*MarketGood `protobuf:"bytes,20,rep,name=Bases,proto3" json:"Bases,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	DiscoveryTechCompat *DiscoveryTechCompat   `protobuf:"bytes,21,opt,name=DiscoveryTechCompat,proto3,oneof" json:"DiscoveryTechCompat,omitempty"`
	unknownFields       protoimpl.UnknownFields
	sizeCache           protoimpl.SizeCache
}

func (x *Shield) Reset() {
	*x = Shield{}
	mi := &file_darkstat_proto_msgTypes[36]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Shield) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Shield) ProtoMessage() {}

func (x *Shield) ProtoReflect() protoreflect.Message {
	mi := &file_darkstat_proto_msgTypes[36]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Shield.ProtoReflect.Descriptor instead.
func (*Shield) Descriptor() ([]byte, []int) {
	return file_darkstat_proto_rawDescGZIP(), []int{36}
}

func (x *Shield) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Shield) GetClass() string {
	if x != nil {
		return x.Class
	}
	return ""
}

func (x *Shield) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *Shield) GetTechnology() string {
	if x != nil {
		return x.Technology
	}
	return ""
}

func (x *Shield) GetPrice() int64 {
	if x != nil {
		return x.Price
	}
	return 0
}

func (x *Shield) GetCapacity() int64 {
	if x != nil {
		return x.Capacity
	}
	return 0
}

func (x *Shield) GetRegenerationRate() int64 {
	if x != nil {
		return x.RegenerationRate
	}
	return 0
}

func (x *Shield) GetConstantPowerDraw() int64 {
	if x != nil {
		return x.ConstantPowerDraw
	}
	return 0
}

func (x *Shield) GetValue() float64 {
	if x != nil {
		return x.Value
	}
	return 0
}

func (x *Shield) GetRebuildPowerDraw() int64 {
	if x != nil {
		return x.RebuildPowerDraw
	}
	return 0
}

func (x *Shield) GetOffRebuildTime() int64 {
	if x != nil {
		return x.OffRebuildTime
	}
	return 0
}

func (x *Shield) GetToughness() float64 {
	if x != nil {
		return x.Toughness
	}
	return 0
}

func (x *Shield) GetHitPts() int64 {
	if x != nil {
		return x.HitPts
	}
	return 0
}

func (x *Shield) GetLootable() bool {
	if x != nil {
		return x.Lootable
	}
	return false
}

func (x *Shield) GetNickname() string {
	if x != nil {
		return x.Nickname
	}
	return ""
}

func (x *Shield) GetHpType() string {
	if x != nil {
		return x.HpType
	}
	return ""
}

func (x *Shield) GetIdsName() int64 {
	if x != nil {
		return x.IdsName
	}
	return 0
}

func (x *Shield) GetIdsInfo() int64 {
	if x != nil {
		return x.IdsInfo
	}
	return 0
}

func (x *Shield) GetMass() float64 {
	if x != nil {
		return x.Mass
	}
	return 0
}

func (x *Shield) GetBases() map[string]*MarketGood {
	if x != nil {
		return x.Bases
	}
	return nil
}

func (x *Shield) GetDiscoveryTechCompat() *DiscoveryTechCompat {
	if x != nil {
		return x.DiscoveryTechCompat
	}
	return nil
}

type GetShipsReply struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Items         []*Ship                `protobuf:"bytes,1,rep,name=Items,proto3" json:"Items,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetShipsReply) Reset() {
	*x = GetShipsReply{}
	mi := &file_darkstat_proto_msgTypes[37]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetShipsReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetShipsReply) ProtoMessage() {}

func (x *GetShipsReply) ProtoReflect() protoreflect.Message {
	mi := &file_darkstat_proto_msgTypes[37]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetShipsReply.ProtoReflect.Descriptor instead.
func (*GetShipsReply) Descriptor() ([]byte, []int) {
	return file_darkstat_proto_rawDescGZIP(), []int{37}
}

func (x *GetShipsReply) GetItems() []*Ship {
	if x != nil {
		return x.Items
	}
	return nil
}

type Ship struct {
	state                         protoimpl.MessageState `protogen:"open.v1"`
	Nickname                      string                 `protobuf:"bytes,1,opt,name=Nickname,proto3" json:"Nickname,omitempty"`
	Name                          string                 `protobuf:"bytes,2,opt,name=Name,proto3" json:"Name,omitempty"`
	Class                         int64                  `protobuf:"varint,3,opt,name=Class,proto3" json:"Class,omitempty"`
	Type                          string                 `protobuf:"bytes,4,opt,name=Type,proto3" json:"Type,omitempty"`
	Price                         int64                  `protobuf:"varint,5,opt,name=Price,proto3" json:"Price,omitempty"`
	Armor                         int64                  `protobuf:"varint,6,opt,name=Armor,proto3" json:"Armor,omitempty"`
	HoldSize                      int64                  `protobuf:"varint,7,opt,name=HoldSize,proto3" json:"HoldSize,omitempty"`
	Nanobots                      int64                  `protobuf:"varint,8,opt,name=Nanobots,proto3" json:"Nanobots,omitempty"`
	Batteries                     int64                  `protobuf:"varint,9,opt,name=Batteries,proto3" json:"Batteries,omitempty"`
	Mass                          float64                `protobuf:"fixed64,10,opt,name=Mass,proto3" json:"Mass,omitempty"`
	PowerCapacity                 int64                  `protobuf:"varint,11,opt,name=PowerCapacity,proto3" json:"PowerCapacity,omitempty"`
	PowerRechargeRate             int64                  `protobuf:"varint,12,opt,name=PowerRechargeRate,proto3" json:"PowerRechargeRate,omitempty"`
	CruiseSpeed                   int64                  `protobuf:"varint,13,opt,name=CruiseSpeed,proto3" json:"CruiseSpeed,omitempty"`
	LinearDrag                    float64                `protobuf:"fixed64,14,opt,name=LinearDrag,proto3" json:"LinearDrag,omitempty"`
	EngineMaxForce                int64                  `protobuf:"varint,15,opt,name=EngineMaxForce,proto3" json:"EngineMaxForce,omitempty"`
	ImpulseSpeed                  float64                `protobuf:"fixed64,16,opt,name=ImpulseSpeed,proto3" json:"ImpulseSpeed,omitempty"`
	ThrusterSpeed                 []int64                `protobuf:"varint,17,rep,packed,name=ThrusterSpeed,proto3" json:"ThrusterSpeed,omitempty"`
	ReverseFraction               float64                `protobuf:"fixed64,18,opt,name=ReverseFraction,proto3" json:"ReverseFraction,omitempty"`
	ThrustCapacity                int64                  `protobuf:"varint,19,opt,name=ThrustCapacity,proto3" json:"ThrustCapacity,omitempty"`
	ThrustRecharge                int64                  `protobuf:"varint,20,opt,name=ThrustRecharge,proto3" json:"ThrustRecharge,omitempty"`
	MaxAngularSpeedDegS           float64                `protobuf:"fixed64,21,opt,name=MaxAngularSpeedDegS,proto3" json:"MaxAngularSpeedDegS,omitempty"`
	AngularDistanceFrom0ToHalfSec float64                `protobuf:"fixed64,22,opt,name=AngularDistanceFrom0ToHalfSec,proto3" json:"AngularDistanceFrom0ToHalfSec,omitempty"`
	TimeTo90MaxAngularSpeed       float64                `protobuf:"fixed64,23,opt,name=TimeTo90MaxAngularSpeed,proto3" json:"TimeTo90MaxAngularSpeed,omitempty"`
	NudgeForce                    float64                `protobuf:"fixed64,24,opt,name=NudgeForce,proto3" json:"NudgeForce,omitempty"`
	StrafeForce                   float64                `protobuf:"fixed64,25,opt,name=StrafeForce,proto3" json:"StrafeForce,omitempty"`
	NameID                        int64                  `protobuf:"varint,26,opt,name=NameID,proto3" json:"NameID,omitempty"`
	InfoID                        int64                  `protobuf:"varint,27,opt,name=InfoID,proto3" json:"InfoID,omitempty"`
	Slots                         []*EquipmentSlot       `protobuf:"bytes,28,rep,name=Slots,proto3" json:"Slots,omitempty"`
	BiggestHardpoint              []string               `protobuf:"bytes,29,rep,name=BiggestHardpoint,proto3" json:"BiggestHardpoint,omitempty"`
	ShipPackages                  []*ShipPackage         `protobuf:"bytes,30,rep,name=ShipPackages,proto3" json:"ShipPackages,omitempty"`
	Bases                         map[string]*MarketGood `protobuf:"bytes,31,rep,name=Bases,proto3" json:"Bases,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	DiscoveryTechCompat           *DiscoveryTechCompat   `protobuf:"bytes,32,opt,name=DiscoveryTechCompat,proto3,oneof" json:"DiscoveryTechCompat,omitempty"`
	DiscoShip                     *DiscoShip             `protobuf:"bytes,33,opt,name=DiscoShip,proto3,oneof" json:"DiscoShip,omitempty"`
	unknownFields                 protoimpl.UnknownFields
	sizeCache                     protoimpl.SizeCache
}

func (x *Ship) Reset() {
	*x = Ship{}
	mi := &file_darkstat_proto_msgTypes[38]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Ship) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ship) ProtoMessage() {}

func (x *Ship) ProtoReflect() protoreflect.Message {
	mi := &file_darkstat_proto_msgTypes[38]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ship.ProtoReflect.Descriptor instead.
func (*Ship) Descriptor() ([]byte, []int) {
	return file_darkstat_proto_rawDescGZIP(), []int{38}
}

func (x *Ship) GetNickname() string {
	if x != nil {
		return x.Nickname
	}
	return ""
}

func (x *Ship) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Ship) GetClass() int64 {
	if x != nil {
		return x.Class
	}
	return 0
}

func (x *Ship) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *Ship) GetPrice() int64 {
	if x != nil {
		return x.Price
	}
	return 0
}

func (x *Ship) GetArmor() int64 {
	if x != nil {
		return x.Armor
	}
	return 0
}

func (x *Ship) GetHoldSize() int64 {
	if x != nil {
		return x.HoldSize
	}
	return 0
}

func (x *Ship) GetNanobots() int64 {
	if x != nil {
		return x.Nanobots
	}
	return 0
}

func (x *Ship) GetBatteries() int64 {
	if x != nil {
		return x.Batteries
	}
	return 0
}

func (x *Ship) GetMass() float64 {
	if x != nil {
		return x.Mass
	}
	return 0
}

func (x *Ship) GetPowerCapacity() int64 {
	if x != nil {
		return x.PowerCapacity
	}
	return 0
}

func (x *Ship) GetPowerRechargeRate() int64 {
	if x != nil {
		return x.PowerRechargeRate
	}
	return 0
}

func (x *Ship) GetCruiseSpeed() int64 {
	if x != nil {
		return x.CruiseSpeed
	}
	return 0
}

func (x *Ship) GetLinearDrag() float64 {
	if x != nil {
		return x.LinearDrag
	}
	return 0
}

func (x *Ship) GetEngineMaxForce() int64 {
	if x != nil {
		return x.EngineMaxForce
	}
	return 0
}

func (x *Ship) GetImpulseSpeed() float64 {
	if x != nil {
		return x.ImpulseSpeed
	}
	return 0
}

func (x *Ship) GetThrusterSpeed() []int64 {
	if x != nil {
		return x.ThrusterSpeed
	}
	return nil
}

func (x *Ship) GetReverseFraction() float64 {
	if x != nil {
		return x.ReverseFraction
	}
	return 0
}

func (x *Ship) GetThrustCapacity() int64 {
	if x != nil {
		return x.ThrustCapacity
	}
	return 0
}

func (x *Ship) GetThrustRecharge() int64 {
	if x != nil {
		return x.ThrustRecharge
	}
	return 0
}

func (x *Ship) GetMaxAngularSpeedDegS() float64 {
	if x != nil {
		return x.MaxAngularSpeedDegS
	}
	return 0
}

func (x *Ship) GetAngularDistanceFrom0ToHalfSec() float64 {
	if x != nil {
		return x.AngularDistanceFrom0ToHalfSec
	}
	return 0
}

func (x *Ship) GetTimeTo90MaxAngularSpeed() float64 {
	if x != nil {
		return x.TimeTo90MaxAngularSpeed
	}
	return 0
}

func (x *Ship) GetNudgeForce() float64 {
	if x != nil {
		return x.NudgeForce
	}
	return 0
}

func (x *Ship) GetStrafeForce() float64 {
	if x != nil {
		return x.StrafeForce
	}
	return 0
}

func (x *Ship) GetNameID() int64 {
	if x != nil {
		return x.NameID
	}
	return 0
}

func (x *Ship) GetInfoID() int64 {
	if x != nil {
		return x.InfoID
	}
	return 0
}

func (x *Ship) GetSlots() []*EquipmentSlot {
	if x != nil {
		return x.Slots
	}
	return nil
}

func (x *Ship) GetBiggestHardpoint() []string {
	if x != nil {
		return x.BiggestHardpoint
	}
	return nil
}

func (x *Ship) GetShipPackages() []*ShipPackage {
	if x != nil {
		return x.ShipPackages
	}
	return nil
}

func (x *Ship) GetBases() map[string]*MarketGood {
	if x != nil {
		return x.Bases
	}
	return nil
}

func (x *Ship) GetDiscoveryTechCompat() *DiscoveryTechCompat {
	if x != nil {
		return x.DiscoveryTechCompat
	}
	return nil
}

func (x *Ship) GetDiscoShip() *DiscoShip {
	if x != nil {
		return x.DiscoShip
	}
	return nil
}

type EquipmentSlot struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	SlotName      string                 `protobuf:"bytes,1,opt,name=SlotName,proto3" json:"SlotName,omitempty"`
	AllowedEquip  []string               `protobuf:"bytes,2,rep,name=AllowedEquip,proto3" json:"AllowedEquip,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *EquipmentSlot) Reset() {
	*x = EquipmentSlot{}
	mi := &file_darkstat_proto_msgTypes[39]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EquipmentSlot) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EquipmentSlot) ProtoMessage() {}

func (x *EquipmentSlot) ProtoReflect() protoreflect.Message {
	mi := &file_darkstat_proto_msgTypes[39]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EquipmentSlot.ProtoReflect.Descriptor instead.
func (*EquipmentSlot) Descriptor() ([]byte, []int) {
	return file_darkstat_proto_rawDescGZIP(), []int{39}
}

func (x *EquipmentSlot) GetSlotName() string {
	if x != nil {
		return x.SlotName
	}
	return ""
}

func (x *EquipmentSlot) GetAllowedEquip() []string {
	if x != nil {
		return x.AllowedEquip
	}
	return nil
}

type ShipPackage struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Nickname      string                 `protobuf:"bytes,1,opt,name=Nickname,proto3" json:"Nickname,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ShipPackage) Reset() {
	*x = ShipPackage{}
	mi := &file_darkstat_proto_msgTypes[40]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ShipPackage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ShipPackage) ProtoMessage() {}

func (x *ShipPackage) ProtoReflect() protoreflect.Message {
	mi := &file_darkstat_proto_msgTypes[40]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ShipPackage.ProtoReflect.Descriptor instead.
func (*ShipPackage) Descriptor() ([]byte, []int) {
	return file_darkstat_proto_rawDescGZIP(), []int{40}
}

func (x *ShipPackage) GetNickname() string {
	if x != nil {
		return x.Nickname
	}
	return ""
}

type DiscoShip struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ArmorMult     float64                `protobuf:"fixed64,1,opt,name=ArmorMult,proto3" json:"ArmorMult,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DiscoShip) Reset() {
	*x = DiscoShip{}
	mi := &file_darkstat_proto_msgTypes[41]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DiscoShip) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DiscoShip) ProtoMessage() {}

func (x *DiscoShip) ProtoReflect() protoreflect.Message {
	mi := &file_darkstat_proto_msgTypes[41]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DiscoShip.ProtoReflect.Descriptor instead.
func (*DiscoShip) Descriptor() ([]byte, []int) {
	return file_darkstat_proto_rawDescGZIP(), []int{41}
}

func (x *DiscoShip) GetArmorMult() float64 {
	if x != nil {
		return x.ArmorMult
	}
	return 0
}

type GetThrustersReply struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Items         []*Thruster            `protobuf:"bytes,1,rep,name=Items,proto3" json:"Items,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetThrustersReply) Reset() {
	*x = GetThrustersReply{}
	mi := &file_darkstat_proto_msgTypes[42]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetThrustersReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetThrustersReply) ProtoMessage() {}

func (x *GetThrustersReply) ProtoReflect() protoreflect.Message {
	mi := &file_darkstat_proto_msgTypes[42]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetThrustersReply.ProtoReflect.Descriptor instead.
func (*GetThrustersReply) Descriptor() ([]byte, []int) {
	return file_darkstat_proto_rawDescGZIP(), []int{42}
}

func (x *GetThrustersReply) GetItems() []*Thruster {
	if x != nil {
		return x.Items
	}
	return nil
}

type Thruster struct {
	state               protoimpl.MessageState `protogen:"open.v1"`
	Name                string                 `protobuf:"bytes,1,opt,name=Name,proto3" json:"Name,omitempty"`
	Price               int64                  `protobuf:"varint,2,opt,name=Price,proto3" json:"Price,omitempty"`
	MaxForce            int64                  `protobuf:"varint,3,opt,name=MaxForce,proto3" json:"MaxForce,omitempty"`
	PowerUsage          int64                  `protobuf:"varint,4,opt,name=PowerUsage,proto3" json:"PowerUsage,omitempty"`
	Efficiency          float64                `protobuf:"fixed64,5,opt,name=Efficiency,proto3" json:"Efficiency,omitempty"`
	Value               float64                `protobuf:"fixed64,6,opt,name=Value,proto3" json:"Value,omitempty"`
	HitPts              int64                  `protobuf:"varint,7,opt,name=HitPts,proto3" json:"HitPts,omitempty"`
	Lootable            bool                   `protobuf:"varint,8,opt,name=Lootable,proto3" json:"Lootable,omitempty"`
	Nickname            string                 `protobuf:"bytes,9,opt,name=Nickname,proto3" json:"Nickname,omitempty"`
	NameID              int64                  `protobuf:"varint,10,opt,name=NameID,proto3" json:"NameID,omitempty"`
	InfoID              int64                  `protobuf:"varint,11,opt,name=InfoID,proto3" json:"InfoID,omitempty"`
	Mass                float64                `protobuf:"fixed64,12,opt,name=Mass,proto3" json:"Mass,omitempty"`
	Bases               map[string]*MarketGood `protobuf:"bytes,13,rep,name=Bases,proto3" json:"Bases,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	DiscoveryTechCompat *DiscoveryTechCompat   `protobuf:"bytes,14,opt,name=DiscoveryTechCompat,proto3,oneof" json:"DiscoveryTechCompat,omitempty"`
	unknownFields       protoimpl.UnknownFields
	sizeCache           protoimpl.SizeCache
}

func (x *Thruster) Reset() {
	*x = Thruster{}
	mi := &file_darkstat_proto_msgTypes[43]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Thruster) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Thruster) ProtoMessage() {}

func (x *Thruster) ProtoReflect() protoreflect.Message {
	mi := &file_darkstat_proto_msgTypes[43]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Thruster.ProtoReflect.Descriptor instead.
func (*Thruster) Descriptor() ([]byte, []int) {
	return file_darkstat_proto_rawDescGZIP(), []int{43}
}

func (x *Thruster) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Thruster) GetPrice() int64 {
	if x != nil {
		return x.Price
	}
	return 0
}

func (x *Thruster) GetMaxForce() int64 {
	if x != nil {
		return x.MaxForce
	}
	return 0
}

func (x *Thruster) GetPowerUsage() int64 {
	if x != nil {
		return x.PowerUsage
	}
	return 0
}

func (x *Thruster) GetEfficiency() float64 {
	if x != nil {
		return x.Efficiency
	}
	return 0
}

func (x *Thruster) GetValue() float64 {
	if x != nil {
		return x.Value
	}
	return 0
}

func (x *Thruster) GetHitPts() int64 {
	if x != nil {
		return x.HitPts
	}
	return 0
}

func (x *Thruster) GetLootable() bool {
	if x != nil {
		return x.Lootable
	}
	return false
}

func (x *Thruster) GetNickname() string {
	if x != nil {
		return x.Nickname
	}
	return ""
}

func (x *Thruster) GetNameID() int64 {
	if x != nil {
		return x.NameID
	}
	return 0
}

func (x *Thruster) GetInfoID() int64 {
	if x != nil {
		return x.InfoID
	}
	return 0
}

func (x *Thruster) GetMass() float64 {
	if x != nil {
		return x.Mass
	}
	return 0
}

func (x *Thruster) GetBases() map[string]*MarketGood {
	if x != nil {
		return x.Bases
	}
	return nil
}

func (x *Thruster) GetDiscoveryTechCompat() *DiscoveryTechCompat {
	if x != nil {
		return x.DiscoveryTechCompat
	}
	return nil
}

type GetTractorsReply struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Items         []*Tractor             `protobuf:"bytes,1,rep,name=Items,proto3" json:"Items,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetTractorsReply) Reset() {
	*x = GetTractorsReply{}
	mi := &file_darkstat_proto_msgTypes[44]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetTractorsReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTractorsReply) ProtoMessage() {}

func (x *GetTractorsReply) ProtoReflect() protoreflect.Message {
	mi := &file_darkstat_proto_msgTypes[44]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTractorsReply.ProtoReflect.Descriptor instead.
func (*GetTractorsReply) Descriptor() ([]byte, []int) {
	return file_darkstat_proto_rawDescGZIP(), []int{44}
}

func (x *GetTractorsReply) GetItems() []*Tractor {
	if x != nil {
		return x.Items
	}
	return nil
}

type Tractor struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Name          string                 `protobuf:"bytes,1,opt,name=Name,proto3" json:"Name,omitempty"`
	Price         int64                  `protobuf:"varint,2,opt,name=Price,proto3" json:"Price,omitempty"`
	MaxLength     int64                  `protobuf:"varint,3,opt,name=MaxLength,proto3" json:"MaxLength,omitempty"`
	ReachSpeed    int64                  `protobuf:"varint,4,opt,name=ReachSpeed,proto3" json:"ReachSpeed,omitempty"`
	Lootable      bool                   `protobuf:"varint,5,opt,name=Lootable,proto3" json:"Lootable,omitempty"`
	Nickname      string                 `protobuf:"bytes,6,opt,name=Nickname,proto3" json:"Nickname,omitempty"`
	ShortNickname string                 `protobuf:"bytes,7,opt,name=ShortNickname,proto3" json:"ShortNickname,omitempty"`
	NameID        int64                  `protobuf:"varint,8,opt,name=NameID,proto3" json:"NameID,omitempty"`
	InfoID        int64                  `protobuf:"varint,9,opt,name=InfoID,proto3" json:"InfoID,omitempty"`
	Bases         map[string]*MarketGood `protobuf:"bytes,10,rep,name=Bases,proto3" json:"Bases,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	Mass          float64                `protobuf:"fixed64,11,opt,name=Mass,proto3" json:"Mass,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Tractor) Reset() {
	*x = Tractor{}
	mi := &file_darkstat_proto_msgTypes[45]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Tractor) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Tractor) ProtoMessage() {}

func (x *Tractor) ProtoReflect() protoreflect.Message {
	mi := &file_darkstat_proto_msgTypes[45]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Tractor.ProtoReflect.Descriptor instead.
func (*Tractor) Descriptor() ([]byte, []int) {
	return file_darkstat_proto_rawDescGZIP(), []int{45}
}

func (x *Tractor) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Tractor) GetPrice() int64 {
	if x != nil {
		return x.Price
	}
	return 0
}

func (x *Tractor) GetMaxLength() int64 {
	if x != nil {
		return x.MaxLength
	}
	return 0
}

func (x *Tractor) GetReachSpeed() int64 {
	if x != nil {
		return x.ReachSpeed
	}
	return 0
}

func (x *Tractor) GetLootable() bool {
	if x != nil {
		return x.Lootable
	}
	return false
}

func (x *Tractor) GetNickname() string {
	if x != nil {
		return x.Nickname
	}
	return ""
}

func (x *Tractor) GetShortNickname() string {
	if x != nil {
		return x.ShortNickname
	}
	return ""
}

func (x *Tractor) GetNameID() int64 {
	if x != nil {
		return x.NameID
	}
	return 0
}

func (x *Tractor) GetInfoID() int64 {
	if x != nil {
		return x.InfoID
	}
	return 0
}

func (x *Tractor) GetBases() map[string]*MarketGood {
	if x != nil {
		return x.Bases
	}
	return nil
}

func (x *Tractor) GetMass() float64 {
	if x != nil {
		return x.Mass
	}
	return 0
}

type GetHashesReply struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	HashesByNick  map[string]*Hash       `protobuf:"bytes,1,rep,name=HashesByNick,proto3" json:"HashesByNick,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetHashesReply) Reset() {
	*x = GetHashesReply{}
	mi := &file_darkstat_proto_msgTypes[46]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetHashesReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetHashesReply) ProtoMessage() {}

func (x *GetHashesReply) ProtoReflect() protoreflect.Message {
	mi := &file_darkstat_proto_msgTypes[46]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetHashesReply.ProtoReflect.Descriptor instead.
func (*GetHashesReply) Descriptor() ([]byte, []int) {
	return file_darkstat_proto_rawDescGZIP(), []int{46}
}

func (x *GetHashesReply) GetHashesByNick() map[string]*Hash {
	if x != nil {
		return x.HashesByNick
	}
	return nil
}

type Hash struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Int32         int32                  `protobuf:"varint,1,opt,name=Int32,proto3" json:"Int32,omitempty"`
	Uint32        uint32                 `protobuf:"varint,2,opt,name=Uint32,proto3" json:"Uint32,omitempty"`
	Hex           string                 `protobuf:"bytes,3,opt,name=Hex,proto3" json:"Hex,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Hash) Reset() {
	*x = Hash{}
	mi := &file_darkstat_proto_msgTypes[47]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Hash) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Hash) ProtoMessage() {}

func (x *Hash) ProtoReflect() protoreflect.Message {
	mi := &file_darkstat_proto_msgTypes[47]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Hash.ProtoReflect.Descriptor instead.
func (*Hash) Descriptor() ([]byte, []int) {
	return file_darkstat_proto_rawDescGZIP(), []int{47}
}

func (x *Hash) GetInt32() int32 {
	if x != nil {
		return x.Int32
	}
	return 0
}

func (x *Hash) GetUint32() uint32 {
	if x != nil {
		return x.Uint32
	}
	return 0
}

func (x *Hash) GetHex() string {
	if x != nil {
		return x.Hex
	}
	return ""
}

type GetPoBsReply struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Items         []*PoB                 `protobuf:"bytes,1,rep,name=Items,proto3" json:"Items,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetPoBsReply) Reset() {
	*x = GetPoBsReply{}
	mi := &file_darkstat_proto_msgTypes[48]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetPoBsReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPoBsReply) ProtoMessage() {}

func (x *GetPoBsReply) ProtoReflect() protoreflect.Message {
	mi := &file_darkstat_proto_msgTypes[48]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPoBsReply.ProtoReflect.Descriptor instead.
func (*GetPoBsReply) Descriptor() ([]byte, []int) {
	return file_darkstat_proto_rawDescGZIP(), []int{48}
}

func (x *GetPoBsReply) GetItems() []*PoB {
	if x != nil {
		return x.Items
	}
	return nil
}

type PoBCore struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	Nickname       string                 `protobuf:"bytes,1,opt,name=Nickname,proto3" json:"Nickname,omitempty"`
	Name           string                 `protobuf:"bytes,2,opt,name=Name,proto3" json:"Name,omitempty"`
	Pos            *string                `protobuf:"bytes,3,opt,name=Pos,proto3,oneof" json:"Pos,omitempty"`
	Level          *int64                 `protobuf:"varint,4,opt,name=Level,proto3,oneof" json:"Level,omitempty"`
	Money          *int64                 `protobuf:"varint,5,opt,name=Money,proto3,oneof" json:"Money,omitempty"`
	Health         *float64               `protobuf:"fixed64,6,opt,name=Health,proto3,oneof" json:"Health,omitempty"`
	DefenseMode    *int64                 `protobuf:"varint,7,opt,name=DefenseMode,proto3,oneof" json:"DefenseMode,omitempty"`
	SystemNick     *string                `protobuf:"bytes,8,opt,name=SystemNick,proto3,oneof" json:"SystemNick,omitempty"`
	SystemName     *string                `protobuf:"bytes,9,opt,name=SystemName,proto3,oneof" json:"SystemName,omitempty"`
	FactionNick    *string                `protobuf:"bytes,10,opt,name=FactionNick,proto3,oneof" json:"FactionNick,omitempty"`
	FactionName    *string                `protobuf:"bytes,11,opt,name=FactionName,proto3,oneof" json:"FactionName,omitempty"`
	ForumThreadUrl *string                `protobuf:"bytes,12,opt,name=ForumThreadUrl,proto3,oneof" json:"ForumThreadUrl,omitempty"`
	CargoSpaceLeft *int64                 `protobuf:"varint,13,opt,name=CargoSpaceLeft,proto3,oneof" json:"CargoSpaceLeft,omitempty"`
	BasePos        *Pos                   `protobuf:"bytes,14,opt,name=BasePos,proto3,oneof" json:"BasePos,omitempty"`
	SectorCoord    *string                `protobuf:"bytes,15,opt,name=SectorCoord,proto3,oneof" json:"SectorCoord,omitempty"`
	Region         *string                `protobuf:"bytes,16,opt,name=Region,proto3,oneof" json:"Region,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *PoBCore) Reset() {
	*x = PoBCore{}
	mi := &file_darkstat_proto_msgTypes[49]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PoBCore) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PoBCore) ProtoMessage() {}

func (x *PoBCore) ProtoReflect() protoreflect.Message {
	mi := &file_darkstat_proto_msgTypes[49]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PoBCore.ProtoReflect.Descriptor instead.
func (*PoBCore) Descriptor() ([]byte, []int) {
	return file_darkstat_proto_rawDescGZIP(), []int{49}
}

func (x *PoBCore) GetNickname() string {
	if x != nil {
		return x.Nickname
	}
	return ""
}

func (x *PoBCore) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *PoBCore) GetPos() string {
	if x != nil && x.Pos != nil {
		return *x.Pos
	}
	return ""
}

func (x *PoBCore) GetLevel() int64 {
	if x != nil && x.Level != nil {
		return *x.Level
	}
	return 0
}

func (x *PoBCore) GetMoney() int64 {
	if x != nil && x.Money != nil {
		return *x.Money
	}
	return 0
}

func (x *PoBCore) GetHealth() float64 {
	if x != nil && x.Health != nil {
		return *x.Health
	}
	return 0
}

func (x *PoBCore) GetDefenseMode() int64 {
	if x != nil && x.DefenseMode != nil {
		return *x.DefenseMode
	}
	return 0
}

func (x *PoBCore) GetSystemNick() string {
	if x != nil && x.SystemNick != nil {
		return *x.SystemNick
	}
	return ""
}

func (x *PoBCore) GetSystemName() string {
	if x != nil && x.SystemName != nil {
		return *x.SystemName
	}
	return ""
}

func (x *PoBCore) GetFactionNick() string {
	if x != nil && x.FactionNick != nil {
		return *x.FactionNick
	}
	return ""
}

func (x *PoBCore) GetFactionName() string {
	if x != nil && x.FactionName != nil {
		return *x.FactionName
	}
	return ""
}

func (x *PoBCore) GetForumThreadUrl() string {
	if x != nil && x.ForumThreadUrl != nil {
		return *x.ForumThreadUrl
	}
	return ""
}

func (x *PoBCore) GetCargoSpaceLeft() int64 {
	if x != nil && x.CargoSpaceLeft != nil {
		return *x.CargoSpaceLeft
	}
	return 0
}

func (x *PoBCore) GetBasePos() *Pos {
	if x != nil {
		return x.BasePos
	}
	return nil
}

func (x *PoBCore) GetSectorCoord() string {
	if x != nil && x.SectorCoord != nil {
		return *x.SectorCoord
	}
	return ""
}

func (x *PoBCore) GetRegion() string {
	if x != nil && x.Region != nil {
		return *x.Region
	}
	return ""
}

type PoB struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Core          *PoBCore               `protobuf:"bytes,1,opt,name=Core,proto3" json:"Core,omitempty"`
	ShopItems     []*ShopItem            `protobuf:"bytes,2,rep,name=ShopItems,proto3" json:"ShopItems,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PoB) Reset() {
	*x = PoB{}
	mi := &file_darkstat_proto_msgTypes[50]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PoB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PoB) ProtoMessage() {}

func (x *PoB) ProtoReflect() protoreflect.Message {
	mi := &file_darkstat_proto_msgTypes[50]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PoB.ProtoReflect.Descriptor instead.
func (*PoB) Descriptor() ([]byte, []int) {
	return file_darkstat_proto_rawDescGZIP(), []int{50}
}

func (x *PoB) GetCore() *PoBCore {
	if x != nil {
		return x.Core
	}
	return nil
}

func (x *PoB) GetShopItems() []*ShopItem {
	if x != nil {
		return x.ShopItems
	}
	return nil
}

type ShopItem struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Nickname      string                 `protobuf:"bytes,1,opt,name=Nickname,proto3" json:"Nickname,omitempty"`
	Name          string                 `protobuf:"bytes,2,opt,name=Name,proto3" json:"Name,omitempty"`
	Category      string                 `protobuf:"bytes,3,opt,name=Category,proto3" json:"Category,omitempty"`
	Id            int64                  `protobuf:"varint,4,opt,name=Id,proto3" json:"Id,omitempty"`
	Quantity      int64                  `protobuf:"varint,5,opt,name=Quantity,proto3" json:"Quantity,omitempty"`
	Price         int64                  `protobuf:"varint,6,opt,name=Price,proto3" json:"Price,omitempty"`
	SellPrice     int64                  `protobuf:"varint,7,opt,name=SellPrice,proto3" json:"SellPrice,omitempty"`
	MinStock      int64                  `protobuf:"varint,8,opt,name=MinStock,proto3" json:"MinStock,omitempty"`
	MaxStock      int64                  `protobuf:"varint,9,opt,name=MaxStock,proto3" json:"MaxStock,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ShopItem) Reset() {
	*x = ShopItem{}
	mi := &file_darkstat_proto_msgTypes[51]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ShopItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ShopItem) ProtoMessage() {}

func (x *ShopItem) ProtoReflect() protoreflect.Message {
	mi := &file_darkstat_proto_msgTypes[51]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ShopItem.ProtoReflect.Descriptor instead.
func (*ShopItem) Descriptor() ([]byte, []int) {
	return file_darkstat_proto_rawDescGZIP(), []int{51}
}

func (x *ShopItem) GetNickname() string {
	if x != nil {
		return x.Nickname
	}
	return ""
}

func (x *ShopItem) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ShopItem) GetCategory() string {
	if x != nil {
		return x.Category
	}
	return ""
}

func (x *ShopItem) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *ShopItem) GetQuantity() int64 {
	if x != nil {
		return x.Quantity
	}
	return 0
}

func (x *ShopItem) GetPrice() int64 {
	if x != nil {
		return x.Price
	}
	return 0
}

func (x *ShopItem) GetSellPrice() int64 {
	if x != nil {
		return x.SellPrice
	}
	return 0
}

func (x *ShopItem) GetMinStock() int64 {
	if x != nil {
		return x.MinStock
	}
	return 0
}

func (x *ShopItem) GetMaxStock() int64 {
	if x != nil {
		return x.MaxStock
	}
	return 0
}

type GetPoBGoodsReply struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Items         []*PoBGood             `protobuf:"bytes,1,rep,name=Items,proto3" json:"Items,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetPoBGoodsReply) Reset() {
	*x = GetPoBGoodsReply{}
	mi := &file_darkstat_proto_msgTypes[52]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetPoBGoodsReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPoBGoodsReply) ProtoMessage() {}

func (x *GetPoBGoodsReply) ProtoReflect() protoreflect.Message {
	mi := &file_darkstat_proto_msgTypes[52]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPoBGoodsReply.ProtoReflect.Descriptor instead.
func (*GetPoBGoodsReply) Descriptor() ([]byte, []int) {
	return file_darkstat_proto_rawDescGZIP(), []int{52}
}

func (x *GetPoBGoodsReply) GetItems() []*PoBGood {
	if x != nil {
		return x.Items
	}
	return nil
}

type PoBGood struct {
	state                 protoimpl.MessageState `protogen:"open.v1"`
	Nickname              string                 `protobuf:"bytes,1,opt,name=Nickname,proto3" json:"Nickname,omitempty"`
	Name                  string                 `protobuf:"bytes,2,opt,name=Name,proto3" json:"Name,omitempty"`
	TotalBuyableFromBases int64                  `protobuf:"varint,3,opt,name=TotalBuyableFromBases,proto3" json:"TotalBuyableFromBases,omitempty"`
	TotalSellableToBases  int64                  `protobuf:"varint,4,opt,name=TotalSellableToBases,proto3" json:"TotalSellableToBases,omitempty"`
	BestPriceToBuy        *int64                 `protobuf:"varint,5,opt,name=BestPriceToBuy,proto3,oneof" json:"BestPriceToBuy,omitempty"`
	BestPriceToSell       *int64                 `protobuf:"varint,6,opt,name=BestPriceToSell,proto3,oneof" json:"BestPriceToSell,omitempty"`
	Category              string                 `protobuf:"bytes,7,opt,name=Category,proto3" json:"Category,omitempty"`
	AnyBaseSells          bool                   `protobuf:"varint,8,opt,name=AnyBaseSells,proto3" json:"AnyBaseSells,omitempty"`
	AnyBaseBuys           bool                   `protobuf:"varint,9,opt,name=AnyBaseBuys,proto3" json:"AnyBaseBuys,omitempty"`
	Bases                 []*PoBGoodBase         `protobuf:"bytes,10,rep,name=Bases,proto3" json:"Bases,omitempty"`
	unknownFields         protoimpl.UnknownFields
	sizeCache             protoimpl.SizeCache
}

func (x *PoBGood) Reset() {
	*x = PoBGood{}
	mi := &file_darkstat_proto_msgTypes[53]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PoBGood) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PoBGood) ProtoMessage() {}

func (x *PoBGood) ProtoReflect() protoreflect.Message {
	mi := &file_darkstat_proto_msgTypes[53]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PoBGood.ProtoReflect.Descriptor instead.
func (*PoBGood) Descriptor() ([]byte, []int) {
	return file_darkstat_proto_rawDescGZIP(), []int{53}
}

func (x *PoBGood) GetNickname() string {
	if x != nil {
		return x.Nickname
	}
	return ""
}

func (x *PoBGood) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *PoBGood) GetTotalBuyableFromBases() int64 {
	if x != nil {
		return x.TotalBuyableFromBases
	}
	return 0
}

func (x *PoBGood) GetTotalSellableToBases() int64 {
	if x != nil {
		return x.TotalSellableToBases
	}
	return 0
}

func (x *PoBGood) GetBestPriceToBuy() int64 {
	if x != nil && x.BestPriceToBuy != nil {
		return *x.BestPriceToBuy
	}
	return 0
}

func (x *PoBGood) GetBestPriceToSell() int64 {
	if x != nil && x.BestPriceToSell != nil {
		return *x.BestPriceToSell
	}
	return 0
}

func (x *PoBGood) GetCategory() string {
	if x != nil {
		return x.Category
	}
	return ""
}

func (x *PoBGood) GetAnyBaseSells() bool {
	if x != nil {
		return x.AnyBaseSells
	}
	return false
}

func (x *PoBGood) GetAnyBaseBuys() bool {
	if x != nil {
		return x.AnyBaseBuys
	}
	return false
}

func (x *PoBGood) GetBases() []*PoBGoodBase {
	if x != nil {
		return x.Bases
	}
	return nil
}

type PoBGoodBase struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ShopItem      *ShopItem              `protobuf:"bytes,1,opt,name=ShopItem,proto3" json:"ShopItem,omitempty"`
	Base          *PoBCore               `protobuf:"bytes,2,opt,name=Base,proto3" json:"Base,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PoBGoodBase) Reset() {
	*x = PoBGoodBase{}
	mi := &file_darkstat_proto_msgTypes[54]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PoBGoodBase) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PoBGoodBase) ProtoMessage() {}

func (x *PoBGoodBase) ProtoReflect() protoreflect.Message {
	mi := &file_darkstat_proto_msgTypes[54]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PoBGoodBase.ProtoReflect.Descriptor instead.
func (*PoBGoodBase) Descriptor() ([]byte, []int) {
	return file_darkstat_proto_rawDescGZIP(), []int{54}
}

func (x *PoBGoodBase) GetShopItem() *ShopItem {
	if x != nil {
		return x.ShopItem
	}
	return nil
}

func (x *PoBGoodBase) GetBase() *PoBCore {
	if x != nil {
		return x.Base
	}
	return nil
}

type GetGraphPathsInput struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Queries       []*GraphPathQuery      `protobuf:"bytes,1,rep,name=Queries,proto3" json:"Queries,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetGraphPathsInput) Reset() {
	*x = GetGraphPathsInput{}
	mi := &file_darkstat_proto_msgTypes[55]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetGraphPathsInput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetGraphPathsInput) ProtoMessage() {}

func (x *GetGraphPathsInput) ProtoReflect() protoreflect.Message {
	mi := &file_darkstat_proto_msgTypes[55]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetGraphPathsInput.ProtoReflect.Descriptor instead.
func (*GetGraphPathsInput) Descriptor() ([]byte, []int) {
	return file_darkstat_proto_rawDescGZIP(), []int{55}
}

func (x *GetGraphPathsInput) GetQueries() []*GraphPathQuery {
	if x != nil {
		return x.Queries
	}
	return nil
}

type GraphPathQuery struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	From          string                 `protobuf:"bytes,1,opt,name=From,proto3" json:"From,omitempty"`
	To            string                 `protobuf:"bytes,2,opt,name=To,proto3" json:"To,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GraphPathQuery) Reset() {
	*x = GraphPathQuery{}
	mi := &file_darkstat_proto_msgTypes[56]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GraphPathQuery) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GraphPathQuery) ProtoMessage() {}

func (x *GraphPathQuery) ProtoReflect() protoreflect.Message {
	mi := &file_darkstat_proto_msgTypes[56]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GraphPathQuery.ProtoReflect.Descriptor instead.
func (*GraphPathQuery) Descriptor() ([]byte, []int) {
	return file_darkstat_proto_rawDescGZIP(), []int{56}
}

func (x *GraphPathQuery) GetFrom() string {
	if x != nil {
		return x.From
	}
	return ""
}

func (x *GraphPathQuery) GetTo() string {
	if x != nil {
		return x.To
	}
	return ""
}

type GetGraphPathsReply struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Answers       []*GetGraphPathsAnswer `protobuf:"bytes,1,rep,name=Answers,proto3" json:"Answers,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetGraphPathsReply) Reset() {
	*x = GetGraphPathsReply{}
	mi := &file_darkstat_proto_msgTypes[57]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetGraphPathsReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetGraphPathsReply) ProtoMessage() {}

func (x *GetGraphPathsReply) ProtoReflect() protoreflect.Message {
	mi := &file_darkstat_proto_msgTypes[57]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetGraphPathsReply.ProtoReflect.Descriptor instead.
func (*GetGraphPathsReply) Descriptor() ([]byte, []int) {
	return file_darkstat_proto_rawDescGZIP(), []int{57}
}

func (x *GetGraphPathsReply) GetAnswers() []*GetGraphPathsAnswer {
	if x != nil {
		return x.Answers
	}
	return nil
}

type GetGraphPathsAnswer struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Route         *GraphPathQuery        `protobuf:"bytes,1,opt,name=Route,proto3" json:"Route,omitempty"`
	Time          *GraphPathTime         `protobuf:"bytes,2,opt,name=Time,proto3,oneof" json:"Time,omitempty"`
	Error         *string                `protobuf:"bytes,3,opt,name=Error,proto3,oneof" json:"Error,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetGraphPathsAnswer) Reset() {
	*x = GetGraphPathsAnswer{}
	mi := &file_darkstat_proto_msgTypes[58]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetGraphPathsAnswer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetGraphPathsAnswer) ProtoMessage() {}

func (x *GetGraphPathsAnswer) ProtoReflect() protoreflect.Message {
	mi := &file_darkstat_proto_msgTypes[58]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetGraphPathsAnswer.ProtoReflect.Descriptor instead.
func (*GetGraphPathsAnswer) Descriptor() ([]byte, []int) {
	return file_darkstat_proto_rawDescGZIP(), []int{58}
}

func (x *GetGraphPathsAnswer) GetRoute() *GraphPathQuery {
	if x != nil {
		return x.Route
	}
	return nil
}

func (x *GetGraphPathsAnswer) GetTime() *GraphPathTime {
	if x != nil {
		return x.Time
	}
	return nil
}

func (x *GetGraphPathsAnswer) GetError() string {
	if x != nil && x.Error != nil {
		return *x.Error
	}
	return ""
}

type GraphPathTime struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Transport     *int64                 `protobuf:"varint,1,opt,name=Transport,proto3,oneof" json:"Transport,omitempty"`
	Frigate       *int64                 `protobuf:"varint,2,opt,name=Frigate,proto3,oneof" json:"Frigate,omitempty"`
	Freighter     *int64                 `protobuf:"varint,3,opt,name=Freighter,proto3,oneof" json:"Freighter,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GraphPathTime) Reset() {
	*x = GraphPathTime{}
	mi := &file_darkstat_proto_msgTypes[59]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GraphPathTime) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GraphPathTime) ProtoMessage() {}

func (x *GraphPathTime) ProtoReflect() protoreflect.Message {
	mi := &file_darkstat_proto_msgTypes[59]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GraphPathTime.ProtoReflect.Descriptor instead.
func (*GraphPathTime) Descriptor() ([]byte, []int) {
	return file_darkstat_proto_rawDescGZIP(), []int{59}
}

func (x *GraphPathTime) GetTransport() int64 {
	if x != nil && x.Transport != nil {
		return *x.Transport
	}
	return 0
}

func (x *GraphPathTime) GetFrigate() int64 {
	if x != nil && x.Frigate != nil {
		return *x.Frigate
	}
	return 0
}

func (x *GraphPathTime) GetFreighter() int64 {
	if x != nil && x.Freighter != nil {
		return *x.Freighter
	}
	return 0
}

var File_darkstat_proto protoreflect.FileDescriptor

var file_darkstat_proto_rawDesc = string([]byte{
	0x0a, 0x0e, 0x64, 0x61, 0x72, 0x6b, 0x73, 0x74, 0x61, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x12, 0x09, 0x73, 0x74, 0x61, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x07, 0x0a, 0x05, 0x45,
	0x6d, 0x70, 0x74, 0x79, 0x22, 0x2c, 0x0a, 0x0b, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x52, 0x65,
	0x70, 0x6c, 0x79, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x73, 0x5f, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x69, 0x73, 0x48, 0x65, 0x61, 0x6c, 0x74,
	0x68, 0x79, 0x22, 0x99, 0x01, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x45, 0x71, 0x75, 0x69, 0x70, 0x6d,
	0x65, 0x6e, 0x74, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x12, 0x2e, 0x0a, 0x12, 0x49, 0x6e, 0x63, 0x6c,
	0x75, 0x64, 0x65, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x47, 0x6f, 0x6f, 0x64, 0x73, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x12, 0x49, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x4d, 0x61, 0x72,
	0x6b, 0x65, 0x74, 0x47, 0x6f, 0x6f, 0x64, 0x73, 0x12, 0x2c, 0x0a, 0x11, 0x49, 0x6e, 0x63, 0x6c,
	0x75, 0x64, 0x65, 0x54, 0x65, 0x63, 0x68, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x74, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x11, 0x49, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x54, 0x65, 0x63, 0x68,
	0x43, 0x6f, 0x6d, 0x70, 0x61, 0x74, 0x12, 0x26, 0x0a, 0x0e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x54, 0x6f, 0x55, 0x73, 0x65, 0x66, 0x75, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e,
	0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x54, 0x6f, 0x55, 0x73, 0x65, 0x66, 0x75, 0x6c, 0x22, 0x67,
	0x0a, 0x0d, 0x47, 0x65, 0x74, 0x42, 0x61, 0x73, 0x65, 0x73, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x12,
	0x2e, 0x0a, 0x12, 0x49, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74,
	0x47, 0x6f, 0x6f, 0x64, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x12, 0x49, 0x6e, 0x63,
	0x6c, 0x75, 0x64, 0x65, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x47, 0x6f, 0x6f, 0x64, 0x73, 0x12,
	0x26, 0x0a, 0x0e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x54, 0x6f, 0x55, 0x73, 0x65, 0x66, 0x75,
	0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x54,
	0x6f, 0x55, 0x73, 0x65, 0x66, 0x75, 0x6c, 0x22, 0x6a, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x54, 0x72,
	0x61, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x12, 0x2e, 0x0a, 0x12, 0x49,
	0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x47, 0x6f, 0x6f, 0x64,
	0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x12, 0x49, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65,
	0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x47, 0x6f, 0x6f, 0x64, 0x73, 0x12, 0x26, 0x0a, 0x0e, 0x46,
	0x69, 0x6c, 0x74, 0x65, 0x72, 0x54, 0x6f, 0x55, 0x73, 0x65, 0x66, 0x75, 0x6c, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x54, 0x6f, 0x55, 0x73, 0x65,
	0x66, 0x75, 0x6c, 0x22, 0x36, 0x0a, 0x0d, 0x47, 0x65, 0x74, 0x42, 0x61, 0x73, 0x65, 0x73, 0x52,
	0x65, 0x70, 0x6c, 0x79, 0x12, 0x25, 0x0a, 0x05, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x42, 0x61, 0x73, 0x65, 0x52, 0x05, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x22, 0xb2, 0x05, 0x0a, 0x04,
	0x42, 0x61, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x41, 0x72, 0x63, 0x68,
	0x65, 0x74, 0x79, 0x70, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x41, 0x72,
	0x63, 0x68, 0x65, 0x74, 0x79, 0x70, 0x65, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x4e, 0x69, 0x63, 0x6b,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x4e, 0x69, 0x63, 0x6b,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x46, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4e,
	0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x46, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x12, 0x26,
	0x0a, 0x0e, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x4e, 0x69, 0x63, 0x6b, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x4e, 0x69,
	0x63, 0x6b, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x12, 0x1c,
	0x0a, 0x09, 0x53, 0x74, 0x72, 0x69, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x09, 0x53, 0x74, 0x72, 0x69, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a,
	0x49, 0x6e, 0x66, 0x6f, 0x63, 0x61, 0x72, 0x64, 0x49, 0x44, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0a, 0x49, 0x6e, 0x66, 0x6f, 0x63, 0x61, 0x72, 0x64, 0x49, 0x44, 0x12, 0x12, 0x0a, 0x04,
	0x46, 0x69, 0x6c, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x46, 0x69, 0x6c, 0x65,
	0x12, 0x27, 0x0a, 0x10, 0x42, 0x47, 0x43, 0x53, 0x5f, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x72, 0x75,
	0x6e, 0x5f, 0x62, 0x79, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x42, 0x47, 0x43, 0x53,
	0x42, 0x61, 0x73, 0x65, 0x52, 0x75, 0x6e, 0x42, 0x79, 0x12, 0x20, 0x0a, 0x03, 0x50, 0x6f, 0x73,
	0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x50, 0x6f, 0x73, 0x52, 0x03, 0x50, 0x6f, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x53,
	0x65, 0x63, 0x74, 0x6f, 0x72, 0x43, 0x6f, 0x6f, 0x72, 0x64, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x53, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x43, 0x6f, 0x6f, 0x72, 0x64, 0x12, 0x36, 0x0a,
	0x16, 0x49, 0x73, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x55, 0x6e, 0x72, 0x65,
	0x61, 0x63, 0x68, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x08, 0x52, 0x16, 0x49,
	0x73, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x55, 0x6e, 0x72, 0x65, 0x61, 0x63,
	0x68, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x52, 0x65, 0x61, 0x63, 0x68, 0x61, 0x62,
	0x6c, 0x65, 0x18, 0x12, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x52, 0x65, 0x61, 0x63, 0x68, 0x61,
	0x62, 0x6c, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x49, 0x73, 0x50, 0x6f, 0x62, 0x18, 0x13, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x05, 0x49, 0x73, 0x50, 0x6f, 0x62, 0x12, 0x57, 0x0a, 0x12, 0x4d, 0x61, 0x72,
	0x6b, 0x65, 0x74, 0x47, 0x6f, 0x6f, 0x64, 0x73, 0x50, 0x65, 0x72, 0x4e, 0x69, 0x63, 0x6b, 0x18,
	0x14, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x42, 0x61, 0x73, 0x65, 0x2e, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x47, 0x6f, 0x6f,
	0x64, 0x73, 0x50, 0x65, 0x72, 0x4e, 0x69, 0x63, 0x6b, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x12,
	0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x47, 0x6f, 0x6f, 0x64, 0x73, 0x50, 0x65, 0x72, 0x4e, 0x69,
	0x63, 0x6b, 0x1a, 0x5c, 0x0a, 0x17, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x47, 0x6f, 0x6f, 0x64,
	0x73, 0x50, 0x65, 0x72, 0x4e, 0x69, 0x63, 0x6b, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,
	0x2b, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15,
	0x2e, 0x73, 0x74, 0x61, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x61, 0x72, 0x6b, 0x65,
	0x74, 0x47, 0x6f, 0x6f, 0x64, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01,
	0x22, 0xda, 0x01, 0x0a, 0x0a, 0x4d, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x12,
	0x26, 0x0a, 0x0e, 0x44, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x4c, 0x6f, 0x6f, 0x74, 0x4d, 0x69,
	0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x44, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63,
	0x4c, 0x6f, 0x6f, 0x74, 0x4d, 0x69, 0x6e, 0x12, 0x26, 0x0a, 0x0e, 0x44, 0x79, 0x6e, 0x61, 0x6d,
	0x69, 0x63, 0x4c, 0x6f, 0x6f, 0x74, 0x4d, 0x61, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0e, 0x44, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x4c, 0x6f, 0x6f, 0x74, 0x4d, 0x61, 0x78, 0x12,
	0x34, 0x0a, 0x15, 0x44, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x4c, 0x6f, 0x6f, 0x74, 0x44, 0x69,
	0x66, 0x66, 0x69, 0x63, 0x75, 0x6c, 0x74, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x15,
	0x44, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x4c, 0x6f, 0x6f, 0x74, 0x44, 0x69, 0x66, 0x66, 0x69,
	0x63, 0x75, 0x6c, 0x74, 0x79, 0x12, 0x38, 0x0a, 0x09, 0x4d, 0x69, 0x6e, 0x65, 0x64, 0x47, 0x6f,
	0x6f, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x47, 0x6f, 0x6f, 0x64, 0x48,
	0x00, 0x52, 0x09, 0x4d, 0x69, 0x6e, 0x65, 0x64, 0x47, 0x6f, 0x6f, 0x64, 0x88, 0x01, 0x01, 0x42,
	0x0c, 0x0a, 0x0a, 0x5f, 0x4d, 0x69, 0x6e, 0x65, 0x64, 0x47, 0x6f, 0x6f, 0x64, 0x22, 0x80, 0x05,
	0x0a, 0x0a, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x47, 0x6f, 0x6f, 0x64, 0x12, 0x1a, 0x0a, 0x08,
	0x4e, 0x69, 0x63, 0x6b, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x4e, 0x69, 0x63, 0x6b, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x53, 0x68, 0x69, 0x70,
	0x4e, 0x69, 0x63, 0x6b, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c,
	0x53, 0x68, 0x69, 0x70, 0x4e, 0x69, 0x63, 0x6b, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04,
	0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x1c, 0x0a, 0x09, 0x50, 0x72, 0x69, 0x63, 0x65, 0x42, 0x61, 0x73, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x09, 0x50, 0x72, 0x69, 0x63, 0x65, 0x42, 0x61, 0x73, 0x65, 0x12, 0x16,
	0x0a, 0x06, 0x48, 0x70, 0x54, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x48, 0x70, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f,
	0x72, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f,
	0x72, 0x79, 0x12, 0x24, 0x0a, 0x0d, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x69,
	0x72, 0x65, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x4c, 0x65, 0x76, 0x65, 0x6c,
	0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x52, 0x65, 0x70, 0x52,
	0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0b, 0x52,
	0x65, 0x70, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x12, 0x2f, 0x0a, 0x10, 0x50, 0x72,
	0x69, 0x63, 0x65, 0x42, 0x61, 0x73, 0x65, 0x42, 0x75, 0x79, 0x73, 0x46, 0x6f, 0x72, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x03, 0x48, 0x00, 0x52, 0x10, 0x50, 0x72, 0x69, 0x63, 0x65, 0x42, 0x61, 0x73,
	0x65, 0x42, 0x75, 0x79, 0x73, 0x46, 0x6f, 0x72, 0x88, 0x01, 0x01, 0x12, 0x2c, 0x0a, 0x11, 0x50,
	0x72, 0x69, 0x63, 0x65, 0x42, 0x61, 0x73, 0x65, 0x53, 0x65, 0x6c, 0x6c, 0x73, 0x46, 0x6f, 0x72,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x11, 0x50, 0x72, 0x69, 0x63, 0x65, 0x42, 0x61, 0x73,
	0x65, 0x53, 0x65, 0x6c, 0x6c, 0x73, 0x46, 0x6f, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x56, 0x6f, 0x6c,
	0x75, 0x6d, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x01, 0x52, 0x06, 0x56, 0x6f, 0x6c, 0x75, 0x6d,
	0x65, 0x12, 0x1c, 0x0a, 0x09, 0x53, 0x68, 0x69, 0x70, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x18, 0x0c,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x53, 0x68, 0x69, 0x70, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x12,
	0x1c, 0x0a, 0x09, 0x42, 0x61, 0x73, 0x65, 0x53, 0x65, 0x6c, 0x6c, 0x73, 0x18, 0x0d, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x09, 0x42, 0x61, 0x73, 0x65, 0x53, 0x65, 0x6c, 0x6c, 0x73, 0x12, 0x32, 0x0a,
	0x14, 0x49, 0x73, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x53, 0x69, 0x64, 0x65, 0x4f, 0x76, 0x65,
	0x72, 0x72, 0x69, 0x64, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x08, 0x52, 0x14, 0x49, 0x73, 0x53,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x53, 0x69, 0x64, 0x65, 0x4f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64,
	0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x4e, 0x6f, 0x74, 0x42, 0x75, 0x79, 0x61, 0x62, 0x6c, 0x65, 0x18,
	0x0f, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x4e, 0x6f, 0x74, 0x42, 0x75, 0x79, 0x61, 0x62, 0x6c,
	0x65, 0x12, 0x36, 0x0a, 0x16, 0x49, 0x73, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74,
	0x55, 0x6e, 0x72, 0x65, 0x61, 0x63, 0x68, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x16, 0x49, 0x73, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x55, 0x6e,
	0x72, 0x65, 0x61, 0x63, 0x68, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x30, 0x0a, 0x09, 0x62, 0x61, 0x73,
	0x65, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x73,
	0x74, 0x61, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x61, 0x73, 0x65, 0x49, 0x6e, 0x66,
	0x6f, 0x52, 0x08, 0x62, 0x61, 0x73, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x42, 0x13, 0x0a, 0x11, 0x5f,
	0x50, 0x72, 0x69, 0x63, 0x65, 0x42, 0x61, 0x73, 0x65, 0x42, 0x75, 0x79, 0x73, 0x46, 0x6f, 0x72,
	0x22, 0xf0, 0x01, 0x0a, 0x08, 0x42, 0x61, 0x73, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x22, 0x0a,
	0x0c, 0x42, 0x61, 0x73, 0x65, 0x4e, 0x69, 0x63, 0x6b, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0c, 0x42, 0x61, 0x73, 0x65, 0x4e, 0x69, 0x63, 0x6b, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x1a, 0x0a, 0x08, 0x42, 0x61, 0x73, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x42, 0x61, 0x73, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1e, 0x0a,
	0x0a, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a,
	0x06, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x52,
	0x65, 0x67, 0x69, 0x6f, 0x6e, 0x12, 0x20, 0x0a, 0x0b, 0x46, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x4e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x46, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x28, 0x0a, 0x07, 0x42, 0x61, 0x73, 0x65, 0x50,
	0x6f, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x6f, 0x73, 0x52, 0x07, 0x42, 0x61, 0x73, 0x65, 0x50, 0x6f,
	0x73, 0x12, 0x20, 0x0a, 0x0b, 0x53, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x43, 0x6f, 0x6f, 0x72, 0x64,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x53, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x43, 0x6f,
	0x6f, 0x72, 0x64, 0x22, 0x2f, 0x0a, 0x03, 0x50, 0x6f, 0x73, 0x12, 0x0c, 0x0a, 0x01, 0x58, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x01, 0x52, 0x01, 0x58, 0x12, 0x0c, 0x0a, 0x01, 0x59, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x01, 0x59, 0x12, 0x0c, 0x0a, 0x01, 0x5a, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x01, 0x5a, 0x22, 0x6d, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x6f,
	0x64, 0x69, 0x74, 0x69, 0x65, 0x73, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x12, 0x2e, 0x0a, 0x12, 0x49,
	0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x47, 0x6f, 0x6f, 0x64,
	0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x12, 0x49, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65,
	0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x47, 0x6f, 0x6f, 0x64, 0x73, 0x12, 0x26, 0x0a, 0x0e, 0x46,
	0x69, 0x6c, 0x74, 0x65, 0x72, 0x54, 0x6f, 0x55, 0x73, 0x65, 0x66, 0x75, 0x6c, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x54, 0x6f, 0x55, 0x73, 0x65,
	0x66, 0x75, 0x6c, 0x22, 0x41, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x64,
	0x69, 0x74, 0x69, 0x65, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x2a, 0x0a, 0x05, 0x49, 0x74,
	0x65, 0x6d, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x73, 0x74, 0x61, 0x74,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x64, 0x69, 0x74, 0x79, 0x52,
	0x05, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x22, 0x93, 0x04, 0x0a, 0x09, 0x43, 0x6f, 0x6d, 0x6d, 0x6f,
	0x64, 0x69, 0x74, 0x79, 0x12, 0x1a, 0x0a, 0x08, 0x4e, 0x69, 0x63, 0x6b, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x4e, 0x69, 0x63, 0x6b, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x1c, 0x0a, 0x09, 0x50, 0x72, 0x69, 0x63, 0x65, 0x42, 0x61, 0x73, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x09, 0x50, 0x72, 0x69, 0x63, 0x65, 0x42, 0x61, 0x73, 0x65, 0x12, 0x12,
	0x0a, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x43, 0x6f, 0x6d, 0x62, 0x69, 0x6e, 0x61, 0x62, 0x6c, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x43, 0x6f, 0x6d, 0x62, 0x69, 0x6e, 0x61, 0x62,
	0x6c, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x06, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x53, 0x68,
	0x69, 0x70, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x53,
	0x68, 0x69, 0x70, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x4e, 0x61, 0x6d, 0x65,
	0x49, 0x44, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x4e, 0x61, 0x6d, 0x65, 0x49, 0x44,
	0x12, 0x1e, 0x0a, 0x0a, 0x49, 0x6e, 0x66, 0x6f, 0x63, 0x61, 0x72, 0x64, 0x49, 0x44, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x49, 0x6e, 0x66, 0x6f, 0x63, 0x61, 0x72, 0x64, 0x49, 0x44,
	0x12, 0x35, 0x0a, 0x05, 0x42, 0x61, 0x73, 0x65, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1f, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x6d, 0x6d,
	0x6f, 0x64, 0x69, 0x74, 0x79, 0x2e, 0x42, 0x61, 0x73, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x52, 0x05, 0x42, 0x61, 0x73, 0x65, 0x73, 0x12, 0x32, 0x0a, 0x14, 0x50, 0x72, 0x69, 0x63, 0x65,
	0x42, 0x65, 0x73, 0x74, 0x42, 0x61, 0x73, 0x65, 0x42, 0x75, 0x79, 0x73, 0x46, 0x6f, 0x72, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x14, 0x50, 0x72, 0x69, 0x63, 0x65, 0x42, 0x65, 0x73, 0x74,
	0x42, 0x61, 0x73, 0x65, 0x42, 0x75, 0x79, 0x73, 0x46, 0x6f, 0x72, 0x12, 0x34, 0x0a, 0x15, 0x50,
	0x72, 0x69, 0x63, 0x65, 0x42, 0x65, 0x73, 0x74, 0x42, 0x61, 0x73, 0x65, 0x53, 0x65, 0x6c, 0x6c,
	0x73, 0x46, 0x6f, 0x72, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x03, 0x52, 0x15, 0x50, 0x72, 0x69, 0x63,
	0x65, 0x42, 0x65, 0x73, 0x74, 0x42, 0x61, 0x73, 0x65, 0x53, 0x65, 0x6c, 0x6c, 0x73, 0x46, 0x6f,
	0x72, 0x12, 0x24, 0x0a, 0x0d, 0x50, 0x72, 0x6f, 0x66, 0x66, 0x69, 0x74, 0x4d, 0x61, 0x72, 0x67,
	0x69, 0x6e, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x50, 0x72, 0x6f, 0x66, 0x66, 0x69,
	0x74, 0x4d, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x4d, 0x61, 0x73, 0x73, 0x18,
	0x0d, 0x20, 0x01, 0x28, 0x01, 0x52, 0x04, 0x4d, 0x61, 0x73, 0x73, 0x1a, 0x4f, 0x0a, 0x0a, 0x42,
	0x61, 0x73, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2b, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x73, 0x74, 0x61,
	0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x47, 0x6f, 0x6f,
	0x64, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x35, 0x0a, 0x0c,
	0x47, 0x65, 0x74, 0x41, 0x6d, 0x6d, 0x6f, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x25, 0x0a, 0x05,
	0x49, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x73, 0x74,
	0x61, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x6d, 0x6d, 0x6f, 0x52, 0x05, 0x49, 0x74,
	0x65, 0x6d, 0x73, 0x22, 0xc4, 0x05, 0x0a, 0x04, 0x41, 0x6d, 0x6d, 0x6f, 0x12, 0x12, 0x0a, 0x04,
	0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x14, 0x0a, 0x05, 0x50, 0x72, 0x69, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x05, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x48, 0x69, 0x74, 0x50, 0x74, 0x73,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x48, 0x69, 0x74, 0x50, 0x74, 0x73, 0x12, 0x16,
	0x0a, 0x06, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x06,
	0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x12, 0x2a, 0x0a, 0x10, 0x4d, 0x75, 0x6e, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x4c, 0x69, 0x66, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x10, 0x4d, 0x75, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x66, 0x65, 0x74, 0x69,
	0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x4e, 0x69, 0x63, 0x6b, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x4e, 0x69, 0x63, 0x6b, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x16,
	0x0a, 0x06, 0x4e, 0x61, 0x6d, 0x65, 0x49, 0x44, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06,
	0x4e, 0x61, 0x6d, 0x65, 0x49, 0x44, 0x12, 0x16, 0x0a, 0x06, 0x49, 0x6e, 0x66, 0x6f, 0x49, 0x44,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x49, 0x6e, 0x66, 0x6f, 0x49, 0x44, 0x12, 0x1e,
	0x0a, 0x0a, 0x53, 0x65, 0x65, 0x6b, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x53, 0x65, 0x65, 0x6b, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x20,
	0x0a, 0x0b, 0x53, 0x65, 0x65, 0x6b, 0x65, 0x72, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0b, 0x53, 0x65, 0x65, 0x6b, 0x65, 0x72, 0x52, 0x61, 0x6e, 0x67, 0x65,
	0x12, 0x22, 0x0a, 0x0c, 0x53, 0x65, 0x65, 0x6b, 0x65, 0x72, 0x46, 0x6f, 0x76, 0x44, 0x65, 0x67,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x53, 0x65, 0x65, 0x6b, 0x65, 0x72, 0x46, 0x6f,
	0x76, 0x44, 0x65, 0x67, 0x12, 0x30, 0x0a, 0x05, 0x42, 0x61, 0x73, 0x65, 0x73, 0x18, 0x0c, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x41, 0x6d, 0x6d, 0x6f, 0x2e, 0x42, 0x61, 0x73, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52,
	0x05, 0x42, 0x61, 0x73, 0x65, 0x73, 0x12, 0x55, 0x0a, 0x13, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x76,
	0x65, 0x72, 0x79, 0x54, 0x65, 0x63, 0x68, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x74, 0x18, 0x0d, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x44, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x54, 0x65, 0x63, 0x68, 0x43, 0x6f, 0x6d,
	0x70, 0x61, 0x74, 0x48, 0x00, 0x52, 0x13, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79,
	0x54, 0x65, 0x63, 0x68, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x74, 0x88, 0x01, 0x01, 0x12, 0x2f, 0x0a,
	0x10, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x6e, 0x43, 0x61, 0x74, 0x72, 0x69, 0x64, 0x67,
	0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x03, 0x48, 0x01, 0x52, 0x10, 0x41, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x49, 0x6e, 0x43, 0x61, 0x74, 0x72, 0x69, 0x64, 0x67, 0x65, 0x88, 0x01, 0x01, 0x12, 0x27,
	0x0a, 0x0c, 0x4d, 0x61, 0x78, 0x43, 0x61, 0x74, 0x72, 0x69, 0x64, 0x67, 0x65, 0x73, 0x18, 0x0f,
	0x20, 0x01, 0x28, 0x03, 0x48, 0x02, 0x52, 0x0c, 0x4d, 0x61, 0x78, 0x43, 0x61, 0x74, 0x72, 0x69,
	0x64, 0x67, 0x65, 0x73, 0x88, 0x01, 0x01, 0x12, 0x12, 0x0a, 0x04, 0x4d, 0x61, 0x73, 0x73, 0x18,
	0x10, 0x20, 0x01, 0x28, 0x01, 0x52, 0x04, 0x4d, 0x61, 0x73, 0x73, 0x1a, 0x4f, 0x0a, 0x0a, 0x42,
	0x61, 0x73, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2b, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x73, 0x74, 0x61,
	0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x47, 0x6f, 0x6f,
	0x64, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x42, 0x16, 0x0a, 0x14,
	0x5f, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x54, 0x65, 0x63, 0x68, 0x43, 0x6f,
	0x6d, 0x70, 0x61, 0x74, 0x42, 0x13, 0x0a, 0x11, 0x5f, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x49,
	0x6e, 0x43, 0x61, 0x74, 0x72, 0x69, 0x64, 0x67, 0x65, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x4d, 0x61,
	0x78, 0x43, 0x61, 0x74, 0x72, 0x69, 0x64, 0x67, 0x65, 0x73, 0x22, 0xd0, 0x01, 0x0a, 0x13, 0x44,
	0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x54, 0x65, 0x63, 0x68, 0x43, 0x6f, 0x6d, 0x70,
	0x61, 0x74, 0x12, 0x5a, 0x0a, 0x0e, 0x54, 0x65, 0x63, 0x68, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x74,
	0x42, 0x79, 0x49, 0x44, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x73, 0x74, 0x61,
	0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79,
	0x54, 0x65, 0x63, 0x68, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x74, 0x2e, 0x54, 0x65, 0x63, 0x68, 0x63,
	0x6f, 0x6d, 0x70, 0x61, 0x74, 0x42, 0x79, 0x49, 0x44, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0e,
	0x54, 0x65, 0x63, 0x68, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x74, 0x42, 0x79, 0x49, 0x44, 0x12, 0x1a,
	0x0a, 0x08, 0x54, 0x65, 0x63, 0x68, 0x43, 0x65, 0x6c, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x54, 0x65, 0x63, 0x68, 0x43, 0x65, 0x6c, 0x6c, 0x1a, 0x41, 0x0a, 0x13, 0x54, 0x65,
	0x63, 0x68, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x74, 0x42, 0x79, 0x49, 0x44, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xa7, 0x01,
	0x0a, 0x10, 0x54, 0x65, 0x63, 0x68, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x74, 0x41, 0x6e, 0x73, 0x77,
	0x65, 0x72, 0x12, 0x43, 0x0a, 0x0a, 0x54, 0x65, 0x63, 0x68, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x74,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x54, 0x65, 0x63, 0x68,
	0x43, 0x6f, 0x6d, 0x70, 0x61, 0x74, 0x48, 0x00, 0x52, 0x0a, 0x54, 0x65, 0x63, 0x68, 0x43, 0x6f,
	0x6d, 0x70, 0x61, 0x74, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x05, 0x45, 0x72, 0x72, 0x6f, 0x72,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x05, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x88,
	0x01, 0x01, 0x12, 0x1a, 0x0a, 0x08, 0x4e, 0x69, 0x63, 0x6b, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x4e, 0x69, 0x63, 0x6b, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x0d,
	0x0a, 0x0b, 0x5f, 0x54, 0x65, 0x63, 0x68, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x74, 0x42, 0x08, 0x0a,
	0x06, 0x5f, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x22, 0x32, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x54, 0x65,
	0x63, 0x68, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x74, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x12, 0x1c, 0x0a,
	0x09, 0x4e, 0x69, 0x63, 0x6b, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x09, 0x4e, 0x69, 0x63, 0x6b, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x22, 0x4b, 0x0a, 0x12, 0x47,
	0x65, 0x74, 0x54, 0x65, 0x63, 0x68, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x74, 0x52, 0x65, 0x70, 0x6c,
	0x79, 0x12, 0x35, 0x0a, 0x07, 0x41, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54,
	0x65, 0x63, 0x68, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x74, 0x41, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x52,
	0x07, 0x41, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x73, 0x22, 0x4a, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x4d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x73, 0x52, 0x65,
	0x70, 0x6c, 0x79, 0x12, 0x2f, 0x0a, 0x05, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x19, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x4d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x52, 0x05, 0x49,
	0x74, 0x65, 0x6d, 0x73, 0x22, 0xbc, 0x05, 0x0a, 0x0e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72,
	0x4d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x50,
	0x72, 0x69, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x50, 0x72, 0x69, 0x63,
	0x65, 0x12, 0x16, 0x0a, 0x06, 0x48, 0x69, 0x74, 0x50, 0x74, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x06, 0x48, 0x69, 0x74, 0x50, 0x74, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x41, 0x49, 0x52,
	0x61, 0x6e, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x41, 0x49, 0x52, 0x61,
	0x6e, 0x67, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x4c, 0x69, 0x66, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x4c, 0x69, 0x66, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x12,
	0x14, 0x0a, 0x05, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05,
	0x52, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x44, 0x69, 0x76, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x50, 0x63, 0x74, 0x67, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x44, 0x69,
	0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x50, 0x63, 0x74, 0x67, 0x12, 0x1a, 0x0a, 0x08, 0x4c,
	0x6f, 0x6f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x4c,
	0x6f, 0x6f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x4e, 0x69, 0x63, 0x6b, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x4e, 0x69, 0x63, 0x6b, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x4e, 0x61, 0x6d, 0x65, 0x49, 0x44, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x06, 0x4e, 0x61, 0x6d, 0x65, 0x49, 0x44, 0x12, 0x16, 0x0a, 0x06, 0x49,
	0x6e, 0x66, 0x6f, 0x49, 0x44, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x49, 0x6e, 0x66,
	0x6f, 0x49, 0x44, 0x12, 0x3a, 0x0a, 0x05, 0x42, 0x61, 0x73, 0x65, 0x73, 0x18, 0x0c, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x24, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x4d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x2e, 0x42, 0x61,
	0x73, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x05, 0x42, 0x61, 0x73, 0x65, 0x73, 0x12,
	0x55, 0x0a, 0x13, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x54, 0x65, 0x63, 0x68,
	0x43, 0x6f, 0x6d, 0x70, 0x61, 0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x73,
	0x74, 0x61, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65,
	0x72, 0x79, 0x54, 0x65, 0x63, 0x68, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x74, 0x48, 0x00, 0x52, 0x13,
	0x44, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x54, 0x65, 0x63, 0x68, 0x43, 0x6f, 0x6d,
	0x70, 0x61, 0x74, 0x88, 0x01, 0x01, 0x12, 0x2f, 0x0a, 0x10, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x49, 0x6e, 0x43, 0x61, 0x74, 0x72, 0x69, 0x64, 0x67, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x03,
	0x48, 0x01, 0x52, 0x10, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x6e, 0x43, 0x61, 0x74, 0x72,
	0x69, 0x64, 0x67, 0x65, 0x88, 0x01, 0x01, 0x12, 0x27, 0x0a, 0x0c, 0x4d, 0x61, 0x78, 0x43, 0x61,
	0x74, 0x72, 0x69, 0x64, 0x67, 0x65, 0x73, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x03, 0x48, 0x02, 0x52,
	0x0c, 0x4d, 0x61, 0x78, 0x43, 0x61, 0x74, 0x72, 0x69, 0x64, 0x67, 0x65, 0x73, 0x88, 0x01, 0x01,
	0x12, 0x12, 0x0a, 0x04, 0x4d, 0x61, 0x73, 0x73, 0x18, 0x10, 0x20, 0x01, 0x28, 0x01, 0x52, 0x04,
	0x4d, 0x61, 0x73, 0x73, 0x1a, 0x4f, 0x0a, 0x0a, 0x42, 0x61, 0x73, 0x65, 0x73, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x2b, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x47, 0x6f, 0x6f, 0x64, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x3a, 0x02, 0x38, 0x01, 0x42, 0x16, 0x0a, 0x14, 0x5f, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x76,
	0x65, 0x72, 0x79, 0x54, 0x65, 0x63, 0x68, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x74, 0x42, 0x13, 0x0a,
	0x11, 0x5f, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x6e, 0x43, 0x61, 0x74, 0x72, 0x69, 0x64,
	0x67, 0x65, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x4d, 0x61, 0x78, 0x43, 0x61, 0x74, 0x72, 0x69, 0x64,
	0x67, 0x65, 0x73, 0x22, 0x3a, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x45, 0x6e, 0x67, 0x69, 0x6e, 0x65,
	0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x27, 0x0a, 0x05, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x45, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x52, 0x05, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x22,
	0xba, 0x05, 0x0a, 0x06, 0x45, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x4e, 0x61,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x14,
	0x0a, 0x05, 0x50, 0x72, 0x69, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x50,
	0x72, 0x69, 0x63, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x43, 0x72, 0x75, 0x69, 0x73, 0x65, 0x53, 0x70,
	0x65, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x43, 0x72, 0x75, 0x69, 0x73,
	0x65, 0x53, 0x70, 0x65, 0x65, 0x64, 0x12, 0x2a, 0x0a, 0x10, 0x43, 0x72, 0x75, 0x69, 0x73, 0x65,
	0x43, 0x68, 0x61, 0x72, 0x67, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x10, 0x43, 0x72, 0x75, 0x69, 0x73, 0x65, 0x43, 0x68, 0x61, 0x72, 0x67, 0x65, 0x54, 0x69,
	0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x4c, 0x69, 0x6e, 0x65, 0x61, 0x72, 0x44, 0x72, 0x61, 0x67,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x4c, 0x69, 0x6e, 0x65, 0x61, 0x72, 0x44, 0x72,
	0x61, 0x67, 0x12, 0x1a, 0x0a, 0x08, 0x4d, 0x61, 0x78, 0x46, 0x6f, 0x72, 0x63, 0x65, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x4d, 0x61, 0x78, 0x46, 0x6f, 0x72, 0x63, 0x65, 0x12, 0x28,
	0x0a, 0x0f, 0x52, 0x65, 0x76, 0x65, 0x72, 0x73, 0x65, 0x46, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0f, 0x52, 0x65, 0x76, 0x65, 0x72, 0x73, 0x65,
	0x46, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x22, 0x0a, 0x0c, 0x49, 0x6d, 0x70, 0x75,
	0x6c, 0x73, 0x65, 0x53, 0x70, 0x65, 0x65, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0c,
	0x49, 0x6d, 0x70, 0x75, 0x6c, 0x73, 0x65, 0x53, 0x70, 0x65, 0x65, 0x64, 0x12, 0x16, 0x0a, 0x06,
	0x48, 0x70, 0x54, 0x79, 0x70, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x48, 0x70,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x46, 0x6c, 0x61, 0x6d, 0x65, 0x45, 0x66, 0x66,
	0x65, 0x63, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x46, 0x6c, 0x61, 0x6d, 0x65,
	0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x54, 0x72, 0x61, 0x69, 0x6c, 0x45,
	0x66, 0x66, 0x65, 0x63, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x54, 0x72, 0x61,
	0x69, 0x6c, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x4e, 0x69, 0x63, 0x6b,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x4e, 0x69, 0x63, 0x6b,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x4e, 0x61, 0x6d, 0x65, 0x49, 0x44, 0x18, 0x0d,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x4e, 0x61, 0x6d, 0x65, 0x49, 0x44, 0x12, 0x16, 0x0a, 0x06,
	0x49, 0x6e, 0x66, 0x6f, 0x49, 0x44, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x49, 0x6e,
	0x66, 0x6f, 0x49, 0x44, 0x12, 0x32, 0x0a, 0x05, 0x42, 0x61, 0x73, 0x65, 0x73, 0x18, 0x0f, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x45, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e, 0x42, 0x61, 0x73, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x52, 0x05, 0x42, 0x61, 0x73, 0x65, 0x73, 0x12, 0x55, 0x0a, 0x13, 0x44, 0x69, 0x73, 0x63,
	0x6f, 0x76, 0x65, 0x72, 0x79, 0x54, 0x65, 0x63, 0x68, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x74, 0x18,
	0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x54, 0x65, 0x63, 0x68, 0x43,
	0x6f, 0x6d, 0x70, 0x61, 0x74, 0x48, 0x00, 0x52, 0x13, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65,
	0x72, 0x79, 0x54, 0x65, 0x63, 0x68, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x74, 0x88, 0x01, 0x01, 0x12,
	0x12, 0x0a, 0x04, 0x4d, 0x61, 0x73, 0x73, 0x18, 0x11, 0x20, 0x01, 0x28, 0x01, 0x52, 0x04, 0x4d,
	0x61, 0x73, 0x73, 0x1a, 0x4f, 0x0a, 0x0a, 0x42, 0x61, 0x73, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x2b, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x15, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d,
	0x61, 0x72, 0x6b, 0x65, 0x74, 0x47, 0x6f, 0x6f, 0x64, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x3a, 0x02, 0x38, 0x01, 0x42, 0x16, 0x0a, 0x14, 0x5f, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65,
	0x72, 0x79, 0x54, 0x65, 0x63, 0x68, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x74, 0x22, 0x90, 0x01, 0x0a,
	0x10, 0x47, 0x65, 0x74, 0x46, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x49, 0x6e, 0x70, 0x75,
	0x74, 0x12, 0x2e, 0x0a, 0x12, 0x49, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x52, 0x65, 0x70, 0x75,
	0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x12, 0x49,
	0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x52, 0x65, 0x70, 0x75, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x12, 0x24, 0x0a, 0x0d, 0x49, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x42, 0x72, 0x69, 0x62,
	0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x49, 0x6e, 0x63, 0x6c, 0x75, 0x64,
	0x65, 0x42, 0x72, 0x69, 0x62, 0x65, 0x73, 0x12, 0x26, 0x0a, 0x0e, 0x46, 0x69, 0x6c, 0x74, 0x65,
	0x72, 0x54, 0x6f, 0x55, 0x73, 0x65, 0x66, 0x75, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x0e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x54, 0x6f, 0x55, 0x73, 0x65, 0x66, 0x75, 0x6c, 0x22,
	0x3c, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x46, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65,
	0x70, 0x6c, 0x79, 0x12, 0x28, 0x0a, 0x05, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x12, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x46,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x05, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x22, 0x9c, 0x03,
	0x0a, 0x07, 0x46, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x4e, 0x61, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1c, 0x0a,
	0x09, 0x53, 0x68, 0x6f, 0x72, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x53, 0x68, 0x6f, 0x72, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x4e,
	0x69, 0x63, 0x6b, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x4e,
	0x69, 0x63, 0x6b, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x2c, 0x0a, 0x11, 0x4f, 0x62, 0x6a, 0x65, 0x63,
	0x74, 0x44, 0x65, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x11, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x44, 0x65, 0x73, 0x74, 0x72, 0x75,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x26, 0x0a, 0x0e, 0x4d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0e, 0x4d,
	0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x26, 0x0a,
	0x0e, 0x4d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x46, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0e, 0x4d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x46, 0x61,
	0x69, 0x6c, 0x75, 0x72, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x4d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x41, 0x62, 0x6f, 0x72, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0c, 0x4d, 0x69, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x41, 0x62, 0x6f, 0x72, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x49, 0x6e, 0x66,
	0x6f, 0x6e, 0x61, 0x6d, 0x65, 0x49, 0x44, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x49,
	0x6e, 0x66, 0x6f, 0x6e, 0x61, 0x6d, 0x65, 0x49, 0x44, 0x12, 0x1e, 0x0a, 0x0a, 0x49, 0x6e, 0x66,
	0x6f, 0x63, 0x61, 0x72, 0x64, 0x49, 0x44, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x49,
	0x6e, 0x66, 0x6f, 0x63, 0x61, 0x72, 0x64, 0x49, 0x44, 0x12, 0x37, 0x0a, 0x0b, 0x52, 0x65, 0x70,
	0x75, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15,
	0x2e, 0x73, 0x74, 0x61, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x70, 0x75, 0x74,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0b, 0x52, 0x65, 0x70, 0x75, 0x74, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x12, 0x28, 0x0a, 0x06, 0x42, 0x72, 0x69, 0x62, 0x65, 0x73, 0x18, 0x0b, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x10, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42,
	0x72, 0x69, 0x62, 0x65, 0x52, 0x06, 0x42, 0x72, 0x69, 0x62, 0x65, 0x73, 0x22, 0x68, 0x0a, 0x0a,
	0x52, 0x65, 0x70, 0x75, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x4e, 0x61,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x10,
	0x0a, 0x03, 0x52, 0x65, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x03, 0x52, 0x65, 0x70,
	0x12, 0x18, 0x0a, 0x07, 0x45, 0x6d, 0x70, 0x61, 0x74, 0x68, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x07, 0x45, 0x6d, 0x70, 0x61, 0x74, 0x68, 0x79, 0x12, 0x1a, 0x0a, 0x08, 0x4e, 0x69,
	0x63, 0x6b, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x4e, 0x69,
	0x63, 0x6b, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x74, 0x0a, 0x05, 0x42, 0x72, 0x69, 0x62, 0x65, 0x12,
	0x22, 0x0a, 0x0c, 0x42, 0x61, 0x73, 0x65, 0x4e, 0x69, 0x63, 0x6b, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x42, 0x61, 0x73, 0x65, 0x4e, 0x69, 0x63, 0x6b, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x43, 0x68, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x06, 0x43, 0x68, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x2f, 0x0a, 0x08, 0x42,
	0x61, 0x73, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e,
	0x73, 0x74, 0x61, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x61, 0x73, 0x65, 0x49, 0x6e,
	0x66, 0x6f, 0x52, 0x08, 0x42, 0x61, 0x73, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x34, 0x0a, 0x0c,
	0x47, 0x65, 0x74, 0x47, 0x75, 0x6e, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x24, 0x0a, 0x05,
	0x49, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x73, 0x74,
	0x61, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x75, 0x6e, 0x52, 0x05, 0x49, 0x74, 0x65,
	0x6d, 0x73, 0x22, 0x05, 0x0a, 0x03, 0x47, 0x75, 0x6e, 0x22, 0x36, 0x0a, 0x0d, 0x47, 0x65, 0x74,
	0x4d, 0x69, 0x6e, 0x65, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x25, 0x0a, 0x05, 0x49, 0x74,
	0x65, 0x6d, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x73, 0x74, 0x61, 0x74,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x69, 0x6e, 0x65, 0x52, 0x05, 0x49, 0x74, 0x65, 0x6d,
	0x73, 0x22, 0x06, 0x0a, 0x04, 0x4d, 0x69, 0x6e, 0x65, 0x22, 0x3c, 0x0a, 0x10, 0x47, 0x65, 0x74,
	0x53, 0x63, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x28, 0x0a,
	0x05, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x73,
	0x74, 0x61, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x63, 0x61, 0x6e, 0x6e, 0x65, 0x72,
	0x52, 0x05, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x22, 0x09, 0x0a, 0x07, 0x53, 0x63, 0x61, 0x6e, 0x6e,
	0x65, 0x72, 0x22, 0x3a, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x53, 0x68, 0x69, 0x65, 0x6c, 0x64, 0x73,
	0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x27, 0x0a, 0x05, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x53, 0x68, 0x69, 0x65, 0x6c, 0x64, 0x52, 0x05, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x22, 0x9e,
	0x06, 0x0a, 0x06, 0x53, 0x68, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x4e, 0x61, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a,
	0x05, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x43, 0x6c,
	0x61, 0x73, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x54, 0x65, 0x63, 0x68, 0x6e,
	0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x54, 0x65, 0x63,
	0x68, 0x6e, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x50, 0x72, 0x69, 0x63, 0x65,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x1a, 0x0a,
	0x08, 0x43, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x08, 0x43, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x12, 0x2a, 0x0a, 0x10, 0x52, 0x65, 0x67,
	0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x61, 0x74, 0x65, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x10, 0x52, 0x65, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x61, 0x74, 0x65, 0x12, 0x2c, 0x0a, 0x11, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x61, 0x6e,
	0x74, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x44, 0x72, 0x61, 0x77, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x11, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x44,
	0x72, 0x61, 0x77, 0x12, 0x14, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x2a, 0x0a, 0x10, 0x52, 0x65, 0x62,
	0x75, 0x69, 0x6c, 0x64, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x44, 0x72, 0x61, 0x77, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x10, 0x52, 0x65, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x50, 0x6f, 0x77, 0x65,
	0x72, 0x44, 0x72, 0x61, 0x77, 0x12, 0x26, 0x0a, 0x0e, 0x4f, 0x66, 0x66, 0x52, 0x65, 0x62, 0x75,
	0x69, 0x6c, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x4f,
	0x66, 0x66, 0x52, 0x65, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1c, 0x0a,
	0x09, 0x54, 0x6f, 0x75, 0x67, 0x68, 0x6e, 0x65, 0x73, 0x73, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x09, 0x54, 0x6f, 0x75, 0x67, 0x68, 0x6e, 0x65, 0x73, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x48,
	0x69, 0x74, 0x50, 0x74, 0x73, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x48, 0x69, 0x74,
	0x50, 0x74, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x4c, 0x6f, 0x6f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x18,
	0x0e, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x4c, 0x6f, 0x6f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x12,
	0x1a, 0x0a, 0x08, 0x4e, 0x69, 0x63, 0x6b, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x4e, 0x69, 0x63, 0x6b, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x48,
	0x70, 0x54, 0x79, 0x70, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x48, 0x70, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x49, 0x64, 0x73, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x11,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x49, 0x64, 0x73, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a,
	0x07, 0x49, 0x64, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x12, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07,
	0x49, 0x64, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x12, 0x0a, 0x04, 0x4d, 0x61, 0x73, 0x73, 0x18,
	0x13, 0x20, 0x01, 0x28, 0x01, 0x52, 0x04, 0x4d, 0x61, 0x73, 0x73, 0x12, 0x32, 0x0a, 0x05, 0x42,
	0x61, 0x73, 0x65, 0x73, 0x18, 0x14, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x73, 0x74, 0x61,
	0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x68, 0x69, 0x65, 0x6c, 0x64, 0x2e, 0x42, 0x61,
	0x73, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x05, 0x42, 0x61, 0x73, 0x65, 0x73, 0x12,
	0x55, 0x0a, 0x13, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x54, 0x65, 0x63, 0x68,
	0x43, 0x6f, 0x6d, 0x70, 0x61, 0x74, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x73,
	0x74, 0x61, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65,
	0x72, 0x79, 0x54, 0x65, 0x63, 0x68, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x74, 0x48, 0x00, 0x52, 0x13,
	0x44, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x54, 0x65, 0x63, 0x68, 0x43, 0x6f, 0x6d,
	0x70, 0x61, 0x74, 0x88, 0x01, 0x01, 0x1a, 0x4f, 0x0a, 0x0a, 0x42, 0x61, 0x73, 0x65, 0x73, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2b, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x47, 0x6f, 0x6f, 0x64, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x42, 0x16, 0x0a, 0x14, 0x5f, 0x44, 0x69, 0x73, 0x63,
	0x6f, 0x76, 0x65, 0x72, 0x79, 0x54, 0x65, 0x63, 0x68, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x74, 0x22,
	0x36, 0x0a, 0x0d, 0x47, 0x65, 0x74, 0x53, 0x68, 0x69, 0x70, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79,
	0x12, 0x25, 0x0a, 0x05, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x0f, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x68, 0x69, 0x70,
	0x52, 0x05, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x22, 0xed, 0x0a, 0x0a, 0x04, 0x53, 0x68, 0x69, 0x70,
	0x12, 0x1a, 0x0a, 0x08, 0x4e, 0x69, 0x63, 0x6b, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x4e, 0x69, 0x63, 0x6b, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04,
	0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x14, 0x0a, 0x05, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x05, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x50, 0x72,
	0x69, 0x63, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x50, 0x72, 0x69, 0x63, 0x65,
	0x12, 0x14, 0x0a, 0x05, 0x41, 0x72, 0x6d, 0x6f, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x05, 0x41, 0x72, 0x6d, 0x6f, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x48, 0x6f, 0x6c, 0x64, 0x53, 0x69,
	0x7a, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x48, 0x6f, 0x6c, 0x64, 0x53, 0x69,
	0x7a, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x4e, 0x61, 0x6e, 0x6f, 0x62, 0x6f, 0x74, 0x73, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x4e, 0x61, 0x6e, 0x6f, 0x62, 0x6f, 0x74, 0x73, 0x12, 0x1c,
	0x0a, 0x09, 0x42, 0x61, 0x74, 0x74, 0x65, 0x72, 0x69, 0x65, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x09, 0x42, 0x61, 0x74, 0x74, 0x65, 0x72, 0x69, 0x65, 0x73, 0x12, 0x12, 0x0a, 0x04,
	0x4d, 0x61, 0x73, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x01, 0x52, 0x04, 0x4d, 0x61, 0x73, 0x73,
	0x12, 0x24, 0x0a, 0x0d, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x43, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74,
	0x79, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x43, 0x61,
	0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x12, 0x2c, 0x0a, 0x11, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x52,
	0x65, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x52, 0x61, 0x74, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x11, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x52, 0x65, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65,
	0x52, 0x61, 0x74, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x43, 0x72, 0x75, 0x69, 0x73, 0x65, 0x53, 0x70,
	0x65, 0x65, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x43, 0x72, 0x75, 0x69, 0x73,
	0x65, 0x53, 0x70, 0x65, 0x65, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x4c, 0x69, 0x6e, 0x65, 0x61, 0x72,
	0x44, 0x72, 0x61, 0x67, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0a, 0x4c, 0x69, 0x6e, 0x65,
	0x61, 0x72, 0x44, 0x72, 0x61, 0x67, 0x12, 0x26, 0x0a, 0x0e, 0x45, 0x6e, 0x67, 0x69, 0x6e, 0x65,
	0x4d, 0x61, 0x78, 0x46, 0x6f, 0x72, 0x63, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e,
	0x45, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x4d, 0x61, 0x78, 0x46, 0x6f, 0x72, 0x63, 0x65, 0x12, 0x22,
	0x0a, 0x0c, 0x49, 0x6d, 0x70, 0x75, 0x6c, 0x73, 0x65, 0x53, 0x70, 0x65, 0x65, 0x64, 0x18, 0x10,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x0c, 0x49, 0x6d, 0x70, 0x75, 0x6c, 0x73, 0x65, 0x53, 0x70, 0x65,
	0x65, 0x64, 0x12, 0x24, 0x0a, 0x0d, 0x54, 0x68, 0x72, 0x75, 0x73, 0x74, 0x65, 0x72, 0x53, 0x70,
	0x65, 0x65, 0x64, 0x18, 0x11, 0x20, 0x03, 0x28, 0x03, 0x52, 0x0d, 0x54, 0x68, 0x72, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x53, 0x70, 0x65, 0x65, 0x64, 0x12, 0x28, 0x0a, 0x0f, 0x52, 0x65, 0x76, 0x65,
	0x72, 0x73, 0x65, 0x46, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x12, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x0f, 0x52, 0x65, 0x76, 0x65, 0x72, 0x73, 0x65, 0x46, 0x72, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x26, 0x0a, 0x0e, 0x54, 0x68, 0x72, 0x75, 0x73, 0x74, 0x43, 0x61, 0x70, 0x61,
	0x63, 0x69, 0x74, 0x79, 0x18, 0x13, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x54, 0x68, 0x72, 0x75,
	0x73, 0x74, 0x43, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x12, 0x26, 0x0a, 0x0e, 0x54, 0x68,
	0x72, 0x75, 0x73, 0x74, 0x52, 0x65, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x18, 0x14, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0e, 0x54, 0x68, 0x72, 0x75, 0x73, 0x74, 0x52, 0x65, 0x63, 0x68, 0x61, 0x72,
	0x67, 0x65, 0x12, 0x30, 0x0a, 0x13, 0x4d, 0x61, 0x78, 0x41, 0x6e, 0x67, 0x75, 0x6c, 0x61, 0x72,
	0x53, 0x70, 0x65, 0x65, 0x64, 0x44, 0x65, 0x67, 0x53, 0x18, 0x15, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x13, 0x4d, 0x61, 0x78, 0x41, 0x6e, 0x67, 0x75, 0x6c, 0x61, 0x72, 0x53, 0x70, 0x65, 0x65, 0x64,
	0x44, 0x65, 0x67, 0x53, 0x12, 0x44, 0x0a, 0x1d, 0x41, 0x6e, 0x67, 0x75, 0x6c, 0x61, 0x72, 0x44,
	0x69, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x46, 0x72, 0x6f, 0x6d, 0x30, 0x54, 0x6f, 0x48, 0x61,
	0x6c, 0x66, 0x53, 0x65, 0x63, 0x18, 0x16, 0x20, 0x01, 0x28, 0x01, 0x52, 0x1d, 0x41, 0x6e, 0x67,
	0x75, 0x6c, 0x61, 0x72, 0x44, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x46, 0x72, 0x6f, 0x6d,
	0x30, 0x54, 0x6f, 0x48, 0x61, 0x6c, 0x66, 0x53, 0x65, 0x63, 0x12, 0x38, 0x0a, 0x17, 0x54, 0x69,
	0x6d, 0x65, 0x54, 0x6f, 0x39, 0x30, 0x4d, 0x61, 0x78, 0x41, 0x6e, 0x67, 0x75, 0x6c, 0x61, 0x72,
	0x53, 0x70, 0x65, 0x65, 0x64, 0x18, 0x17, 0x20, 0x01, 0x28, 0x01, 0x52, 0x17, 0x54, 0x69, 0x6d,
	0x65, 0x54, 0x6f, 0x39, 0x30, 0x4d, 0x61, 0x78, 0x41, 0x6e, 0x67, 0x75, 0x6c, 0x61, 0x72, 0x53,
	0x70, 0x65, 0x65, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x4e, 0x75, 0x64, 0x67, 0x65, 0x46, 0x6f, 0x72,
	0x63, 0x65, 0x18, 0x18, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0a, 0x4e, 0x75, 0x64, 0x67, 0x65, 0x46,
	0x6f, 0x72, 0x63, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x53, 0x74, 0x72, 0x61, 0x66, 0x65, 0x46, 0x6f,
	0x72, 0x63, 0x65, 0x18, 0x19, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0b, 0x53, 0x74, 0x72, 0x61, 0x66,
	0x65, 0x46, 0x6f, 0x72, 0x63, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x4e, 0x61, 0x6d, 0x65, 0x49, 0x44,
	0x18, 0x1a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x4e, 0x61, 0x6d, 0x65, 0x49, 0x44, 0x12, 0x16,
	0x0a, 0x06, 0x49, 0x6e, 0x66, 0x6f, 0x49, 0x44, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06,
	0x49, 0x6e, 0x66, 0x6f, 0x49, 0x44, 0x12, 0x2e, 0x0a, 0x05, 0x53, 0x6c, 0x6f, 0x74, 0x73, 0x18,
	0x1c, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x45, 0x71, 0x75, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x6c, 0x6f, 0x74, 0x52,
	0x05, 0x53, 0x6c, 0x6f, 0x74, 0x73, 0x12, 0x2a, 0x0a, 0x10, 0x42, 0x69, 0x67, 0x67, 0x65, 0x73,
	0x74, 0x48, 0x61, 0x72, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x1d, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x10, 0x42, 0x69, 0x67, 0x67, 0x65, 0x73, 0x74, 0x48, 0x61, 0x72, 0x64, 0x70, 0x6f, 0x69,
	0x6e, 0x74, 0x12, 0x3a, 0x0a, 0x0c, 0x53, 0x68, 0x69, 0x70, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67,
	0x65, 0x73, 0x18, 0x1e, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x68, 0x69, 0x70, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65,
	0x52, 0x0c, 0x53, 0x68, 0x69, 0x70, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x73, 0x12, 0x30,
	0x0a, 0x05, 0x42, 0x61, 0x73, 0x65, 0x73, 0x18, 0x1f, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x73, 0x74, 0x61, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x68, 0x69, 0x70, 0x2e, 0x42,
	0x61, 0x73, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x05, 0x42, 0x61, 0x73, 0x65, 0x73,
	0x12, 0x55, 0x0a, 0x13, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x54, 0x65, 0x63,
	0x68, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x74, 0x18, 0x20, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e,
	0x73, 0x74, 0x61, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x76,
	0x65, 0x72, 0x79, 0x54, 0x65, 0x63, 0x68, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x74, 0x48, 0x00, 0x52,
	0x13, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x54, 0x65, 0x63, 0x68, 0x43, 0x6f,
	0x6d, 0x70, 0x61, 0x74, 0x88, 0x01, 0x01, 0x12, 0x37, 0x0a, 0x09, 0x44, 0x69, 0x73, 0x63, 0x6f,
	0x53, 0x68, 0x69, 0x70, 0x18, 0x21, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x73, 0x74, 0x61,
	0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x53, 0x68, 0x69, 0x70,
	0x48, 0x01, 0x52, 0x09, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x53, 0x68, 0x69, 0x70, 0x88, 0x01, 0x01,
	0x1a, 0x4f, 0x0a, 0x0a, 0x42, 0x61, 0x73, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x2b, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x15, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x61, 0x72, 0x6b,
	0x65, 0x74, 0x47, 0x6f, 0x6f, 0x64, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38,
	0x01, 0x42, 0x16, 0x0a, 0x14, 0x5f, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x54,
	0x65, 0x63, 0x68, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x74, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x44, 0x69,
	0x73, 0x63, 0x6f, 0x53, 0x68, 0x69, 0x70, 0x22, 0x4f, 0x0a, 0x0d, 0x45, 0x71, 0x75, 0x69, 0x70,
	0x6d, 0x65, 0x6e, 0x74, 0x53, 0x6c, 0x6f, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x53, 0x6c, 0x6f, 0x74,
	0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x53, 0x6c, 0x6f, 0x74,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x45,
	0x71, 0x75, 0x69, 0x70, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0c, 0x41, 0x6c, 0x6c, 0x6f,
	0x77, 0x65, 0x64, 0x45, 0x71, 0x75, 0x69, 0x70, 0x22, 0x29, 0x0a, 0x0b, 0x53, 0x68, 0x69, 0x70,
	0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x4e, 0x69, 0x63, 0x6b, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x4e, 0x69, 0x63, 0x6b, 0x6e,
	0x61, 0x6d, 0x65, 0x22, 0x29, 0x0a, 0x09, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x53, 0x68, 0x69, 0x70,
	0x12, 0x1c, 0x0a, 0x09, 0x41, 0x72, 0x6d, 0x6f, 0x72, 0x4d, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x09, 0x41, 0x72, 0x6d, 0x6f, 0x72, 0x4d, 0x75, 0x6c, 0x74, 0x22, 0x3e,
	0x0a, 0x11, 0x47, 0x65, 0x74, 0x54, 0x68, 0x72, 0x75, 0x73, 0x74, 0x65, 0x72, 0x73, 0x52, 0x65,
	0x70, 0x6c, 0x79, 0x12, 0x29, 0x0a, 0x05, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x13, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54,
	0x68, 0x72, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x05, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x22, 0xb0,
	0x04, 0x0a, 0x08, 0x54, 0x68, 0x72, 0x75, 0x73, 0x74, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x4e,
	0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x14, 0x0a, 0x05, 0x50, 0x72, 0x69, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05,
	0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x4d, 0x61, 0x78, 0x46, 0x6f, 0x72, 0x63,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x4d, 0x61, 0x78, 0x46, 0x6f, 0x72, 0x63,
	0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x55, 0x73, 0x61, 0x67, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x55, 0x73, 0x61, 0x67,
	0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x45, 0x66, 0x66, 0x69, 0x63, 0x69, 0x65, 0x6e, 0x63, 0x79, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0a, 0x45, 0x66, 0x66, 0x69, 0x63, 0x69, 0x65, 0x6e, 0x63,
	0x79, 0x12, 0x14, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x48, 0x69, 0x74, 0x50, 0x74,
	0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x48, 0x69, 0x74, 0x50, 0x74, 0x73, 0x12,
	0x1a, 0x0a, 0x08, 0x4c, 0x6f, 0x6f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x08, 0x4c, 0x6f, 0x6f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x4e,
	0x69, 0x63, 0x6b, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x4e,
	0x69, 0x63, 0x6b, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x4e, 0x61, 0x6d, 0x65, 0x49,
	0x44, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x4e, 0x61, 0x6d, 0x65, 0x49, 0x44, 0x12,
	0x16, 0x0a, 0x06, 0x49, 0x6e, 0x66, 0x6f, 0x49, 0x44, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x06, 0x49, 0x6e, 0x66, 0x6f, 0x49, 0x44, 0x12, 0x12, 0x0a, 0x04, 0x4d, 0x61, 0x73, 0x73, 0x18,
	0x0c, 0x20, 0x01, 0x28, 0x01, 0x52, 0x04, 0x4d, 0x61, 0x73, 0x73, 0x12, 0x34, 0x0a, 0x05, 0x42,
	0x61, 0x73, 0x65, 0x73, 0x18, 0x0d, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x73, 0x74, 0x61,
	0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x68, 0x72, 0x75, 0x73, 0x74, 0x65, 0x72, 0x2e,
	0x42, 0x61, 0x73, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x05, 0x42, 0x61, 0x73, 0x65,
	0x73, 0x12, 0x55, 0x0a, 0x13, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x54, 0x65,
	0x63, 0x68, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x74, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e,
	0x2e, 0x73, 0x74, 0x61, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x69, 0x73, 0x63, 0x6f,
	0x76, 0x65, 0x72, 0x79, 0x54, 0x65, 0x63, 0x68, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x74, 0x48, 0x00,
	0x52, 0x13, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x54, 0x65, 0x63, 0x68, 0x43,
	0x6f, 0x6d, 0x70, 0x61, 0x74, 0x88, 0x01, 0x01, 0x1a, 0x4f, 0x0a, 0x0a, 0x42, 0x61, 0x73, 0x65,
	0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2b, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x47, 0x6f, 0x6f, 0x64, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x42, 0x16, 0x0a, 0x14, 0x5f, 0x44, 0x69,
	0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x54, 0x65, 0x63, 0x68, 0x43, 0x6f, 0x6d, 0x70, 0x61,
	0x74, 0x22, 0x3c, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x54, 0x72, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x73,
	0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x28, 0x0a, 0x05, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x54, 0x72, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x05, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x22,
	0x99, 0x03, 0x0a, 0x07, 0x54, 0x72, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x4e,
	0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x14, 0x0a, 0x05, 0x50, 0x72, 0x69, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05,
	0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x4d, 0x61, 0x78, 0x4c, 0x65, 0x6e, 0x67,
	0x74, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x4d, 0x61, 0x78, 0x4c, 0x65, 0x6e,
	0x67, 0x74, 0x68, 0x12, 0x1e, 0x0a, 0x0a, 0x52, 0x65, 0x61, 0x63, 0x68, 0x53, 0x70, 0x65, 0x65,
	0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x52, 0x65, 0x61, 0x63, 0x68, 0x53, 0x70,
	0x65, 0x65, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x4c, 0x6f, 0x6f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x4c, 0x6f, 0x6f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x12,
	0x1a, 0x0a, 0x08, 0x4e, 0x69, 0x63, 0x6b, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x4e, 0x69, 0x63, 0x6b, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x53,
	0x68, 0x6f, 0x72, 0x74, 0x4e, 0x69, 0x63, 0x6b, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0d, 0x53, 0x68, 0x6f, 0x72, 0x74, 0x4e, 0x69, 0x63, 0x6b, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x16, 0x0a, 0x06, 0x4e, 0x61, 0x6d, 0x65, 0x49, 0x44, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x06, 0x4e, 0x61, 0x6d, 0x65, 0x49, 0x44, 0x12, 0x16, 0x0a, 0x06, 0x49, 0x6e, 0x66,
	0x6f, 0x49, 0x44, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x49, 0x6e, 0x66, 0x6f, 0x49,
	0x44, 0x12, 0x33, 0x0a, 0x05, 0x42, 0x61, 0x73, 0x65, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1d, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x72, 0x61,
	0x63, 0x74, 0x6f, 0x72, 0x2e, 0x42, 0x61, 0x73, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52,
	0x05, 0x42, 0x61, 0x73, 0x65, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x4d, 0x61, 0x73, 0x73, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x04, 0x4d, 0x61, 0x73, 0x73, 0x1a, 0x4f, 0x0a, 0x0a, 0x42, 0x61,
	0x73, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2b, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x73, 0x74, 0x61, 0x74,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x47, 0x6f, 0x6f, 0x64,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xb3, 0x01, 0x0a, 0x0e,
	0x47, 0x65, 0x74, 0x48, 0x61, 0x73, 0x68, 0x65, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x4f,
	0x0a, 0x0c, 0x48, 0x61, 0x73, 0x68, 0x65, 0x73, 0x42, 0x79, 0x4e, 0x69, 0x63, 0x6b, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x47, 0x65, 0x74, 0x48, 0x61, 0x73, 0x68, 0x65, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x2e,
	0x48, 0x61, 0x73, 0x68, 0x65, 0x73, 0x42, 0x79, 0x4e, 0x69, 0x63, 0x6b, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x52, 0x0c, 0x48, 0x61, 0x73, 0x68, 0x65, 0x73, 0x42, 0x79, 0x4e, 0x69, 0x63, 0x6b, 0x1a,
	0x50, 0x0a, 0x11, 0x48, 0x61, 0x73, 0x68, 0x65, 0x73, 0x42, 0x79, 0x4e, 0x69, 0x63, 0x6b, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x25, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x48, 0x61, 0x73, 0x68, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38,
	0x01, 0x22, 0x46, 0x0a, 0x04, 0x48, 0x61, 0x73, 0x68, 0x12, 0x14, 0x0a, 0x05, 0x49, 0x6e, 0x74,
	0x33, 0x32, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x12,
	0x16, 0x0a, 0x06, 0x55, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x06, 0x55, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x12, 0x10, 0x0a, 0x03, 0x48, 0x65, 0x78, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x48, 0x65, 0x78, 0x22, 0x34, 0x0a, 0x0c, 0x47, 0x65, 0x74,
	0x50, 0x6f, 0x42, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x24, 0x0a, 0x05, 0x49, 0x74, 0x65,
	0x6d, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x6f, 0x42, 0x52, 0x05, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x22,
	0xf1, 0x05, 0x0a, 0x07, 0x50, 0x6f, 0x42, 0x43, 0x6f, 0x72, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x4e,
	0x69, 0x63, 0x6b, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x4e,
	0x69, 0x63, 0x6b, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x15, 0x0a, 0x03, 0x50,
	0x6f, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x03, 0x50, 0x6f, 0x73, 0x88,
	0x01, 0x01, 0x12, 0x19, 0x0a, 0x05, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x03, 0x48, 0x01, 0x52, 0x05, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a,
	0x05, 0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x48, 0x02, 0x52, 0x05,
	0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a, 0x06, 0x48, 0x65, 0x61, 0x6c,
	0x74, 0x68, 0x18, 0x06, 0x20, 0x01, 0x28, 0x01, 0x48, 0x03, 0x52, 0x06, 0x48, 0x65, 0x61, 0x6c,
	0x74, 0x68, 0x88, 0x01, 0x01, 0x12, 0x25, 0x0a, 0x0b, 0x44, 0x65, 0x66, 0x65, 0x6e, 0x73, 0x65,
	0x4d, 0x6f, 0x64, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x48, 0x04, 0x52, 0x0b, 0x44, 0x65,
	0x66, 0x65, 0x6e, 0x73, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x88, 0x01, 0x01, 0x12, 0x23, 0x0a, 0x0a,
	0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x4e, 0x69, 0x63, 0x6b, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x05, 0x52, 0x0a, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x4e, 0x69, 0x63, 0x6b, 0x88, 0x01,
	0x01, 0x12, 0x23, 0x0a, 0x0a, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x4e, 0x61, 0x6d, 0x65, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x09, 0x48, 0x06, 0x52, 0x0a, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x4e,
	0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x25, 0x0a, 0x0b, 0x46, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x4e, 0x69, 0x63, 0x6b, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x48, 0x07, 0x52, 0x0b, 0x46,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x69, 0x63, 0x6b, 0x88, 0x01, 0x01, 0x12, 0x25, 0x0a,
	0x0b, 0x46, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x08, 0x52, 0x0b, 0x46, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d,
	0x65, 0x88, 0x01, 0x01, 0x12, 0x2b, 0x0a, 0x0e, 0x46, 0x6f, 0x72, 0x75, 0x6d, 0x54, 0x68, 0x72,
	0x65, 0x61, 0x64, 0x55, 0x72, 0x6c, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x48, 0x09, 0x52, 0x0e,
	0x46, 0x6f, 0x72, 0x75, 0x6d, 0x54, 0x68, 0x72, 0x65, 0x61, 0x64, 0x55, 0x72, 0x6c, 0x88, 0x01,
	0x01, 0x12, 0x2b, 0x0a, 0x0e, 0x43, 0x61, 0x72, 0x67, 0x6f, 0x53, 0x70, 0x61, 0x63, 0x65, 0x4c,
	0x65, 0x66, 0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x03, 0x48, 0x0a, 0x52, 0x0e, 0x43, 0x61, 0x72,
	0x67, 0x6f, 0x53, 0x70, 0x61, 0x63, 0x65, 0x4c, 0x65, 0x66, 0x74, 0x88, 0x01, 0x01, 0x12, 0x2d,
	0x0a, 0x07, 0x42, 0x61, 0x73, 0x65, 0x50, 0x6f, 0x73, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0e, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x6f, 0x73, 0x48,
	0x0b, 0x52, 0x07, 0x42, 0x61, 0x73, 0x65, 0x50, 0x6f, 0x73, 0x88, 0x01, 0x01, 0x12, 0x25, 0x0a,
	0x0b, 0x53, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x43, 0x6f, 0x6f, 0x72, 0x64, 0x18, 0x0f, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x0c, 0x52, 0x0b, 0x53, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x43, 0x6f, 0x6f, 0x72,
	0x64, 0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a, 0x06, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x18, 0x10,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x0d, 0x52, 0x06, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x88, 0x01,
	0x01, 0x42, 0x06, 0x0a, 0x04, 0x5f, 0x50, 0x6f, 0x73, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x4c, 0x65,
	0x76, 0x65, 0x6c, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x42, 0x09, 0x0a,
	0x07, 0x5f, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x44, 0x65, 0x66,
	0x65, 0x6e, 0x73, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x53, 0x79, 0x73,
	0x74, 0x65, 0x6d, 0x4e, 0x69, 0x63, 0x6b, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x53, 0x79, 0x73, 0x74,
	0x65, 0x6d, 0x4e, 0x61, 0x6d, 0x65, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x46, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x4e, 0x69, 0x63, 0x6b, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x46, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x46, 0x6f, 0x72, 0x75, 0x6d,
	0x54, 0x68, 0x72, 0x65, 0x61, 0x64, 0x55, 0x72, 0x6c, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x43, 0x61,
	0x72, 0x67, 0x6f, 0x53, 0x70, 0x61, 0x63, 0x65, 0x4c, 0x65, 0x66, 0x74, 0x42, 0x0a, 0x0a, 0x08,
	0x5f, 0x42, 0x61, 0x73, 0x65, 0x50, 0x6f, 0x73, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x53, 0x65, 0x63,
	0x74, 0x6f, 0x72, 0x43, 0x6f, 0x6f, 0x72, 0x64, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x52, 0x65, 0x67,
	0x69, 0x6f, 0x6e, 0x22, 0x60, 0x0a, 0x03, 0x50, 0x6f, 0x42, 0x12, 0x26, 0x0a, 0x04, 0x43, 0x6f,
	0x72, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x6f, 0x42, 0x43, 0x6f, 0x72, 0x65, 0x52, 0x04, 0x43, 0x6f,
	0x72, 0x65, 0x12, 0x31, 0x0a, 0x09, 0x53, 0x68, 0x6f, 0x70, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x53, 0x68, 0x6f, 0x70, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x09, 0x53, 0x68, 0x6f, 0x70,
	0x49, 0x74, 0x65, 0x6d, 0x73, 0x22, 0xee, 0x01, 0x0a, 0x08, 0x53, 0x68, 0x6f, 0x70, 0x49, 0x74,
	0x65, 0x6d, 0x12, 0x1a, 0x0a, 0x08, 0x4e, 0x69, 0x63, 0x6b, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x4e, 0x69, 0x63, 0x6b, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x12,
	0x0a, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x12, 0x0e,
	0x0a, 0x02, 0x49, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x49, 0x64, 0x12, 0x1a,
	0x0a, 0x08, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x08, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x50, 0x72,
	0x69, 0x63, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x50, 0x72, 0x69, 0x63, 0x65,
	0x12, 0x1c, 0x0a, 0x09, 0x53, 0x65, 0x6c, 0x6c, 0x50, 0x72, 0x69, 0x63, 0x65, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x09, 0x53, 0x65, 0x6c, 0x6c, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x1a,
	0x0a, 0x08, 0x4d, 0x69, 0x6e, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x08, 0x4d, 0x69, 0x6e, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x12, 0x1a, 0x0a, 0x08, 0x4d, 0x61,
	0x78, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x4d, 0x61,
	0x78, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x22, 0x3c, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x50, 0x6f, 0x42,
	0x47, 0x6f, 0x6f, 0x64, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x28, 0x0a, 0x05, 0x49, 0x74,
	0x65, 0x6d, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x73, 0x74, 0x61, 0x74,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x6f, 0x42, 0x47, 0x6f, 0x6f, 0x64, 0x52, 0x05, 0x49,
	0x74, 0x65, 0x6d, 0x73, 0x22, 0xb6, 0x03, 0x0a, 0x07, 0x50, 0x6f, 0x42, 0x47, 0x6f, 0x6f, 0x64,
	0x12, 0x1a, 0x0a, 0x08, 0x4e, 0x69, 0x63, 0x6b, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x4e, 0x69, 0x63, 0x6b, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04,
	0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x34, 0x0a, 0x15, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x42, 0x75, 0x79, 0x61, 0x62, 0x6c, 0x65,
	0x46, 0x72, 0x6f, 0x6d, 0x42, 0x61, 0x73, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x15, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x42, 0x75, 0x79, 0x61, 0x62, 0x6c, 0x65, 0x46, 0x72, 0x6f,
	0x6d, 0x42, 0x61, 0x73, 0x65, 0x73, 0x12, 0x32, 0x0a, 0x14, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x53,
	0x65, 0x6c, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x54, 0x6f, 0x42, 0x61, 0x73, 0x65, 0x73, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x14, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x53, 0x65, 0x6c, 0x6c, 0x61,
	0x62, 0x6c, 0x65, 0x54, 0x6f, 0x42, 0x61, 0x73, 0x65, 0x73, 0x12, 0x2b, 0x0a, 0x0e, 0x42, 0x65,
	0x73, 0x74, 0x50, 0x72, 0x69, 0x63, 0x65, 0x54, 0x6f, 0x42, 0x75, 0x79, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x03, 0x48, 0x00, 0x52, 0x0e, 0x42, 0x65, 0x73, 0x74, 0x50, 0x72, 0x69, 0x63, 0x65, 0x54,
	0x6f, 0x42, 0x75, 0x79, 0x88, 0x01, 0x01, 0x12, 0x2d, 0x0a, 0x0f, 0x42, 0x65, 0x73, 0x74, 0x50,
	0x72, 0x69, 0x63, 0x65, 0x54, 0x6f, 0x53, 0x65, 0x6c, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03,
	0x48, 0x01, 0x52, 0x0f, 0x42, 0x65, 0x73, 0x74, 0x50, 0x72, 0x69, 0x63, 0x65, 0x54, 0x6f, 0x53,
	0x65, 0x6c, 0x6c, 0x88, 0x01, 0x01, 0x12, 0x1a, 0x0a, 0x08, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f,
	0x72, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f,
	0x72, 0x79, 0x12, 0x22, 0x0a, 0x0c, 0x41, 0x6e, 0x79, 0x42, 0x61, 0x73, 0x65, 0x53, 0x65, 0x6c,
	0x6c, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x41, 0x6e, 0x79, 0x42, 0x61, 0x73,
	0x65, 0x53, 0x65, 0x6c, 0x6c, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x41, 0x6e, 0x79, 0x42, 0x61, 0x73,
	0x65, 0x42, 0x75, 0x79, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x41, 0x6e, 0x79,
	0x42, 0x61, 0x73, 0x65, 0x42, 0x75, 0x79, 0x73, 0x12, 0x2c, 0x0a, 0x05, 0x42, 0x61, 0x73, 0x65,
	0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x6f, 0x42, 0x47, 0x6f, 0x6f, 0x64, 0x42, 0x61, 0x73, 0x65, 0x52,
	0x05, 0x42, 0x61, 0x73, 0x65, 0x73, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x42, 0x65, 0x73, 0x74, 0x50,
	0x72, 0x69, 0x63, 0x65, 0x54, 0x6f, 0x42, 0x75, 0x79, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x42, 0x65,
	0x73, 0x74, 0x50, 0x72, 0x69, 0x63, 0x65, 0x54, 0x6f, 0x53, 0x65, 0x6c, 0x6c, 0x22, 0x66, 0x0a,
	0x0b, 0x50, 0x6f, 0x42, 0x47, 0x6f, 0x6f, 0x64, 0x42, 0x61, 0x73, 0x65, 0x12, 0x2f, 0x0a, 0x08,
	0x53, 0x68, 0x6f, 0x70, 0x49, 0x74, 0x65, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13,
	0x2e, 0x73, 0x74, 0x61, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x68, 0x6f, 0x70, 0x49,
	0x74, 0x65, 0x6d, 0x52, 0x08, 0x53, 0x68, 0x6f, 0x70, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x26, 0x0a,
	0x04, 0x42, 0x61, 0x73, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x73, 0x74,
	0x61, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x6f, 0x42, 0x43, 0x6f, 0x72, 0x65, 0x52,
	0x04, 0x42, 0x61, 0x73, 0x65, 0x22, 0x49, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x47, 0x72, 0x61, 0x70,
	0x68, 0x50, 0x61, 0x74, 0x68, 0x73, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x12, 0x33, 0x0a, 0x07, 0x51,
	0x75, 0x65, 0x72, 0x69, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x73,
	0x74, 0x61, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x72, 0x61, 0x70, 0x68, 0x50, 0x61,
	0x74, 0x68, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x07, 0x51, 0x75, 0x65, 0x72, 0x69, 0x65, 0x73,
	0x22, 0x34, 0x0a, 0x0e, 0x47, 0x72, 0x61, 0x70, 0x68, 0x50, 0x61, 0x74, 0x68, 0x51, 0x75, 0x65,
	0x72, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x46, 0x72, 0x6f, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x46, 0x72, 0x6f, 0x6d, 0x12, 0x0e, 0x0a, 0x02, 0x54, 0x6f, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x02, 0x54, 0x6f, 0x22, 0x4e, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x47, 0x72, 0x61,
	0x70, 0x68, 0x50, 0x61, 0x74, 0x68, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x38, 0x0a, 0x07,
	0x41, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e,
	0x73, 0x74, 0x61, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x65, 0x74, 0x47, 0x72, 0x61,
	0x70, 0x68, 0x50, 0x61, 0x74, 0x68, 0x73, 0x41, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x52, 0x07, 0x41,
	0x6e, 0x73, 0x77, 0x65, 0x72, 0x73, 0x22, 0xa7, 0x01, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x47, 0x72,
	0x61, 0x70, 0x68, 0x50, 0x61, 0x74, 0x68, 0x73, 0x41, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x12, 0x2f,
	0x0a, 0x05, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e,
	0x73, 0x74, 0x61, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x72, 0x61, 0x70, 0x68, 0x50,
	0x61, 0x74, 0x68, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x05, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x12,
	0x31, 0x0a, 0x04, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e,
	0x73, 0x74, 0x61, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x72, 0x61, 0x70, 0x68, 0x50,
	0x61, 0x74, 0x68, 0x54, 0x69, 0x6d, 0x65, 0x48, 0x00, 0x52, 0x04, 0x54, 0x69, 0x6d, 0x65, 0x88,
	0x01, 0x01, 0x12, 0x19, 0x0a, 0x05, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x01, 0x52, 0x05, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x88, 0x01, 0x01, 0x42, 0x07, 0x0a,
	0x05, 0x5f, 0x54, 0x69, 0x6d, 0x65, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x45, 0x72, 0x72, 0x6f, 0x72,
	0x22, 0x9c, 0x01, 0x0a, 0x0d, 0x47, 0x72, 0x61, 0x70, 0x68, 0x50, 0x61, 0x74, 0x68, 0x54, 0x69,
	0x6d, 0x65, 0x12, 0x21, 0x0a, 0x09, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x03, 0x48, 0x00, 0x52, 0x09, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f,
	0x72, 0x74, 0x88, 0x01, 0x01, 0x12, 0x1d, 0x0a, 0x07, 0x46, 0x72, 0x69, 0x67, 0x61, 0x74, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x48, 0x01, 0x52, 0x07, 0x46, 0x72, 0x69, 0x67, 0x61, 0x74,
	0x65, 0x88, 0x01, 0x01, 0x12, 0x21, 0x0a, 0x09, 0x46, 0x72, 0x65, 0x69, 0x67, 0x68, 0x74, 0x65,
	0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x48, 0x02, 0x52, 0x09, 0x46, 0x72, 0x65, 0x69, 0x67,
	0x68, 0x74, 0x65, 0x72, 0x88, 0x01, 0x01, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x70, 0x6f, 0x72, 0x74, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x46, 0x72, 0x69, 0x67, 0x61, 0x74,
	0x65, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x46, 0x72, 0x65, 0x69, 0x67, 0x68, 0x74, 0x65, 0x72, 0x32,
	0xc6, 0x09, 0x0a, 0x08, 0x44, 0x61, 0x72, 0x6b, 0x73, 0x74, 0x61, 0x74, 0x12, 0x35, 0x0a, 0x09,
	0x47, 0x65, 0x74, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x12, 0x10, 0x2e, 0x73, 0x74, 0x61, 0x74,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x16, 0x2e, 0x73, 0x74,
	0x61, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x52, 0x65,
	0x70, 0x6c, 0x79, 0x12, 0x41, 0x0a, 0x0b, 0x47, 0x65, 0x74, 0x42, 0x61, 0x73, 0x65, 0x73, 0x4e,
	0x70, 0x63, 0x12, 0x18, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47,
	0x65, 0x74, 0x42, 0x61, 0x73, 0x65, 0x73, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x1a, 0x18, 0x2e, 0x73,
	0x74, 0x61, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x65, 0x74, 0x42, 0x61, 0x73, 0x65,
	0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x4e, 0x0a, 0x18, 0x47, 0x65, 0x74, 0x42, 0x61, 0x73,
	0x65, 0x73, 0x4d, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x12, 0x18, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47,
	0x65, 0x74, 0x42, 0x61, 0x73, 0x65, 0x73, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x1a, 0x18, 0x2e, 0x73,
	0x74, 0x61, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x65, 0x74, 0x42, 0x61, 0x73, 0x65,
	0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x42, 0x0a, 0x0c, 0x47, 0x65, 0x74, 0x42, 0x61, 0x73,
	0x65, 0x73, 0x50, 0x6f, 0x42, 0x73, 0x12, 0x18, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x47, 0x65, 0x74, 0x42, 0x61, 0x73, 0x65, 0x73, 0x49, 0x6e, 0x70, 0x75, 0x74,
	0x1a, 0x18, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x65, 0x74,
	0x42, 0x61, 0x73, 0x65, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x34, 0x0a, 0x07, 0x47, 0x65,
	0x74, 0x50, 0x6f, 0x42, 0x73, 0x12, 0x10, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x17, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x6f, 0x42, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79,
	0x12, 0x3c, 0x0a, 0x0b, 0x47, 0x65, 0x74, 0x50, 0x6f, 0x42, 0x47, 0x6f, 0x6f, 0x64, 0x73, 0x12,
	0x10, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x6d, 0x70, 0x74,
	0x79, 0x1a, 0x1b, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x65,
	0x74, 0x50, 0x6f, 0x42, 0x47, 0x6f, 0x6f, 0x64, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x52,
	0x0a, 0x0e, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x64, 0x69, 0x74, 0x69, 0x65, 0x73,
	0x12, 0x1e, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x65, 0x74,
	0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x64, 0x69, 0x74, 0x69, 0x65, 0x73, 0x49, 0x6e, 0x70, 0x75, 0x74,
	0x1a, 0x1e, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x65, 0x74,
	0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x64, 0x69, 0x74, 0x69, 0x65, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79,
	0x22, 0x00, 0x12, 0x43, 0x0a, 0x08, 0x47, 0x65, 0x74, 0x41, 0x6d, 0x6d, 0x6f, 0x73, 0x12, 0x1c,
	0x2e, 0x73, 0x74, 0x61, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x65, 0x74, 0x45, 0x71,
	0x75, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x1a, 0x17, 0x2e, 0x73,
	0x74, 0x61, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x6d, 0x6d, 0x6f,
	0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x58, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x65, 0x72, 0x4d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x73, 0x12, 0x1c, 0x2e,
	0x73, 0x74, 0x61, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x65, 0x74, 0x45, 0x71, 0x75,
	0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x1a, 0x22, 0x2e, 0x73, 0x74,
	0x61, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x65, 0x72, 0x4d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22,
	0x00, 0x12, 0x48, 0x0a, 0x0a, 0x47, 0x65, 0x74, 0x45, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x73, 0x12,
	0x1c, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x65, 0x74, 0x45,
	0x71, 0x75, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x1a, 0x1a, 0x2e,
	0x73, 0x74, 0x61, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x65, 0x74, 0x45, 0x6e, 0x67,
	0x69, 0x6e, 0x65, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x48, 0x0a, 0x0a, 0x47,
	0x65, 0x74, 0x53, 0x68, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x12, 0x1c, 0x2e, 0x73, 0x74, 0x61, 0x74,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x65, 0x74, 0x45, 0x71, 0x75, 0x69, 0x70, 0x6d, 0x65,
	0x6e, 0x74, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x1a, 0x1a, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x68, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x52, 0x65,
	0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x44, 0x0a, 0x08, 0x47, 0x65, 0x74, 0x53, 0x68, 0x69, 0x70,
	0x73, 0x12, 0x1c, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x65,
	0x74, 0x45, 0x71, 0x75, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x1a,
	0x18, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x65, 0x74, 0x53,
	0x68, 0x69, 0x70, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x4c, 0x0a, 0x0c, 0x47,
	0x65, 0x74, 0x54, 0x68, 0x72, 0x75, 0x73, 0x74, 0x65, 0x72, 0x73, 0x12, 0x1c, 0x2e, 0x73, 0x74,
	0x61, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x65, 0x74, 0x45, 0x71, 0x75, 0x69, 0x70,
	0x6d, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x1a, 0x1c, 0x2e, 0x73, 0x74, 0x61, 0x74,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x65, 0x74, 0x54, 0x68, 0x72, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x49, 0x0a, 0x0b, 0x47, 0x65, 0x74,
	0x46, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x1b, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x65, 0x74, 0x46, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x49, 0x6e, 0x70, 0x75, 0x74, 0x1a, 0x1b, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x47, 0x65, 0x74, 0x46, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x70,
	0x6c, 0x79, 0x22, 0x00, 0x12, 0x49, 0x0a, 0x0b, 0x47, 0x65, 0x74, 0x54, 0x72, 0x61, 0x63, 0x74,
	0x6f, 0x72, 0x73, 0x12, 0x1b, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x47, 0x65, 0x74, 0x54, 0x72, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x49, 0x6e, 0x70, 0x75, 0x74,
	0x1a, 0x1b, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x65, 0x74,
	0x54, 0x72, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12,
	0x38, 0x0a, 0x09, 0x47, 0x65, 0x74, 0x48, 0x61, 0x73, 0x68, 0x65, 0x73, 0x12, 0x10, 0x2e, 0x73,
	0x74, 0x61, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x19,
	0x2e, 0x73, 0x74, 0x61, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x65, 0x74, 0x48, 0x61,
	0x73, 0x68, 0x65, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x4d, 0x0a, 0x0d, 0x47, 0x65, 0x74,
	0x47, 0x72, 0x61, 0x70, 0x68, 0x50, 0x61, 0x74, 0x68, 0x73, 0x12, 0x1d, 0x2e, 0x73, 0x74, 0x61,
	0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x65, 0x74, 0x47, 0x72, 0x61, 0x70, 0x68, 0x50,
	0x61, 0x74, 0x68, 0x73, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x1a, 0x1d, 0x2e, 0x73, 0x74, 0x61, 0x74,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x65, 0x74, 0x47, 0x72, 0x61, 0x70, 0x68, 0x50, 0x61,
	0x74, 0x68, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x42, 0x34, 0x5a, 0x32, 0x67, 0x69, 0x74, 0x68,
	0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x64, 0x61, 0x72, 0x6b, 0x6c, 0x61, 0x62, 0x38, 0x2f,
	0x66, 0x6c, 0x2d, 0x64, 0x61, 0x72, 0x6b, 0x73, 0x74, 0x61, 0x74, 0x2f, 0x64, 0x61, 0x72, 0x6b,
	0x67, 0x72, 0x70, 0x63, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x06,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
})

var (
	file_darkstat_proto_rawDescOnce sync.Once
	file_darkstat_proto_rawDescData []byte
)

func file_darkstat_proto_rawDescGZIP() []byte {
	file_darkstat_proto_rawDescOnce.Do(func() {
		file_darkstat_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_darkstat_proto_rawDesc), len(file_darkstat_proto_rawDesc)))
	})
	return file_darkstat_proto_rawDescData
}

var file_darkstat_proto_msgTypes = make([]protoimpl.MessageInfo, 71)
var file_darkstat_proto_goTypes = []any{
	(*Empty)(nil),                   // 0: statproto.Empty
	(*HealthReply)(nil),             // 1: statproto.HealthReply
	(*GetEquipmentInput)(nil),       // 2: statproto.GetEquipmentInput
	(*GetBasesInput)(nil),           // 3: statproto.GetBasesInput
	(*GetTractorsInput)(nil),        // 4: statproto.GetTractorsInput
	(*GetBasesReply)(nil),           // 5: statproto.GetBasesReply
	(*Base)(nil),                    // 6: statproto.Base
	(*MiningInfo)(nil),              // 7: statproto.MiningInfo
	(*MarketGood)(nil),              // 8: statproto.MarketGood
	(*BaseInfo)(nil),                // 9: statproto.BaseInfo
	(*Pos)(nil),                     // 10: statproto.Pos
	(*GetCommoditiesInput)(nil),     // 11: statproto.GetCommoditiesInput
	(*GetCommoditiesReply)(nil),     // 12: statproto.GetCommoditiesReply
	(*Commodity)(nil),               // 13: statproto.Commodity
	(*GetAmmoReply)(nil),            // 14: statproto.GetAmmoReply
	(*Ammo)(nil),                    // 15: statproto.Ammo
	(*DiscoveryTechCompat)(nil),     // 16: statproto.DiscoveryTechCompat
	(*TechCompatAnswer)(nil),        // 17: statproto.TechCompatAnswer
	(*GetTechCompatInput)(nil),      // 18: statproto.GetTechCompatInput
	(*GetTechCompatReply)(nil),      // 19: statproto.GetTechCompatReply
	(*GetCounterMeasuresReply)(nil), // 20: statproto.GetCounterMeasuresReply
	(*CounterMeasure)(nil),          // 21: statproto.CounterMeasure
	(*GetEnginesReply)(nil),         // 22: statproto.GetEnginesReply
	(*Engine)(nil),                  // 23: statproto.Engine
	(*GetFactionsInput)(nil),        // 24: statproto.GetFactionsInput
	(*GetFactionsReply)(nil),        // 25: statproto.GetFactionsReply
	(*Faction)(nil),                 // 26: statproto.Faction
	(*Reputation)(nil),              // 27: statproto.Reputation
	(*Bribe)(nil),                   // 28: statproto.Bribe
	(*GetGunsReply)(nil),            // 29: statproto.GetGunsReply
	(*Gun)(nil),                     // 30: statproto.Gun
	(*GetMinesReply)(nil),           // 31: statproto.GetMinesReply
	(*Mine)(nil),                    // 32: statproto.Mine
	(*GetScannersReply)(nil),        // 33: statproto.GetScannersReply
	(*Scanner)(nil),                 // 34: statproto.Scanner
	(*GetShieldsReply)(nil),         // 35: statproto.GetShieldsReply
	(*Shield)(nil),                  // 36: statproto.Shield
	(*GetShipsReply)(nil),           // 37: statproto.GetShipsReply
	(*Ship)(nil),                    // 38: statproto.Ship
	(*EquipmentSlot)(nil),           // 39: statproto.EquipmentSlot
	(*ShipPackage)(nil),             // 40: statproto.ShipPackage
	(*DiscoShip)(nil),               // 41: statproto.DiscoShip
	(*GetThrustersReply)(nil),       // 42: statproto.GetThrustersReply
	(*Thruster)(nil),                // 43: statproto.Thruster
	(*GetTractorsReply)(nil),        // 44: statproto.GetTractorsReply
	(*Tractor)(nil),                 // 45: statproto.Tractor
	(*GetHashesReply)(nil),          // 46: statproto.GetHashesReply
	(*Hash)(nil),                    // 47: statproto.Hash
	(*GetPoBsReply)(nil),            // 48: statproto.GetPoBsReply
	(*PoBCore)(nil),                 // 49: statproto.PoBCore
	(*PoB)(nil),                     // 50: statproto.PoB
	(*ShopItem)(nil),                // 51: statproto.ShopItem
	(*GetPoBGoodsReply)(nil),        // 52: statproto.GetPoBGoodsReply
	(*PoBGood)(nil),                 // 53: statproto.PoBGood
	(*PoBGoodBase)(nil),             // 54: statproto.PoBGoodBase
	(*GetGraphPathsInput)(nil),      // 55: statproto.GetGraphPathsInput
	(*GraphPathQuery)(nil),          // 56: statproto.GraphPathQuery
	(*GetGraphPathsReply)(nil),      // 57: statproto.GetGraphPathsReply
	(*GetGraphPathsAnswer)(nil),     // 58: statproto.GetGraphPathsAnswer
	(*GraphPathTime)(nil),           // 59: statproto.GraphPathTime
	nil,                             // 60: statproto.Base.MarketGoodsPerNickEntry
	nil,                             // 61: statproto.Commodity.BasesEntry
	nil,                             // 62: statproto.Ammo.BasesEntry
	nil,                             // 63: statproto.DiscoveryTechCompat.TechcompatByIDEntry
	nil,                             // 64: statproto.CounterMeasure.BasesEntry
	nil,                             // 65: statproto.Engine.BasesEntry
	nil,                             // 66: statproto.Shield.BasesEntry
	nil,                             // 67: statproto.Ship.BasesEntry
	nil,                             // 68: statproto.Thruster.BasesEntry
	nil,                             // 69: statproto.Tractor.BasesEntry
	nil,                             // 70: statproto.GetHashesReply.HashesByNickEntry
}
var file_darkstat_proto_depIdxs = []int32{
	6,  // 0: statproto.GetBasesReply.Items:type_name -> statproto.Base
	10, // 1: statproto.Base.Pos:type_name -> statproto.Pos
	60, // 2: statproto.Base.MarketGoodsPerNick:type_name -> statproto.Base.MarketGoodsPerNickEntry
	8,  // 3: statproto.MiningInfo.MinedGood:type_name -> statproto.MarketGood
	9,  // 4: statproto.MarketGood.base_info:type_name -> statproto.BaseInfo
	10, // 5: statproto.BaseInfo.BasePos:type_name -> statproto.Pos
	13, // 6: statproto.GetCommoditiesReply.Items:type_name -> statproto.Commodity
	61, // 7: statproto.Commodity.Bases:type_name -> statproto.Commodity.BasesEntry
	15, // 8: statproto.GetAmmoReply.Items:type_name -> statproto.Ammo
	62, // 9: statproto.Ammo.Bases:type_name -> statproto.Ammo.BasesEntry
	16, // 10: statproto.Ammo.DiscoveryTechCompat:type_name -> statproto.DiscoveryTechCompat
	63, // 11: statproto.DiscoveryTechCompat.TechcompatByID:type_name -> statproto.DiscoveryTechCompat.TechcompatByIDEntry
	16, // 12: statproto.TechCompatAnswer.TechCompat:type_name -> statproto.DiscoveryTechCompat
	17, // 13: statproto.GetTechCompatReply.Answers:type_name -> statproto.TechCompatAnswer
	21, // 14: statproto.GetCounterMeasuresReply.Items:type_name -> statproto.CounterMeasure
	64, // 15: statproto.CounterMeasure.Bases:type_name -> statproto.CounterMeasure.BasesEntry
	16, // 16: statproto.CounterMeasure.DiscoveryTechCompat:type_name -> statproto.DiscoveryTechCompat
	23, // 17: statproto.GetEnginesReply.Items:type_name -> statproto.Engine
	65, // 18: statproto.Engine.Bases:type_name -> statproto.Engine.BasesEntry
	16, // 19: statproto.Engine.DiscoveryTechCompat:type_name -> statproto.DiscoveryTechCompat
	26, // 20: statproto.GetFactionsReply.Items:type_name -> statproto.Faction
	27, // 21: statproto.Faction.Reputations:type_name -> statproto.Reputation
	28, // 22: statproto.Faction.Bribes:type_name -> statproto.Bribe
	9,  // 23: statproto.Bribe.BaseInfo:type_name -> statproto.BaseInfo
	30, // 24: statproto.GetGunsReply.Items:type_name -> statproto.Gun
	32, // 25: statproto.GetMinesReply.Items:type_name -> statproto.Mine
	34, // 26: statproto.GetScannersReply.Items:type_name -> statproto.Scanner
	36, // 27: statproto.GetShieldsReply.Items:type_name -> statproto.Shield
	66, // 28: statproto.Shield.Bases:type_name -> statproto.Shield.BasesEntry
	16, // 29: statproto.Shield.DiscoveryTechCompat:type_name -> statproto.DiscoveryTechCompat
	38, // 30: statproto.GetShipsReply.Items:type_name -> statproto.Ship
	39, // 31: statproto.Ship.Slots:type_name -> statproto.EquipmentSlot
	40, // 32: statproto.Ship.ShipPackages:type_name -> statproto.ShipPackage
	67, // 33: statproto.Ship.Bases:type_name -> statproto.Ship.BasesEntry
	16, // 34: statproto.Ship.DiscoveryTechCompat:type_name -> statproto.DiscoveryTechCompat
	41, // 35: statproto.Ship.DiscoShip:type_name -> statproto.DiscoShip
	43, // 36: statproto.GetThrustersReply.Items:type_name -> statproto.Thruster
	68, // 37: statproto.Thruster.Bases:type_name -> statproto.Thruster.BasesEntry
	16, // 38: statproto.Thruster.DiscoveryTechCompat:type_name -> statproto.DiscoveryTechCompat
	45, // 39: statproto.GetTractorsReply.Items:type_name -> statproto.Tractor
	69, // 40: statproto.Tractor.Bases:type_name -> statproto.Tractor.BasesEntry
	70, // 41: statproto.GetHashesReply.HashesByNick:type_name -> statproto.GetHashesReply.HashesByNickEntry
	50, // 42: statproto.GetPoBsReply.Items:type_name -> statproto.PoB
	10, // 43: statproto.PoBCore.BasePos:type_name -> statproto.Pos
	49, // 44: statproto.PoB.Core:type_name -> statproto.PoBCore
	51, // 45: statproto.PoB.ShopItems:type_name -> statproto.ShopItem
	53, // 46: statproto.GetPoBGoodsReply.Items:type_name -> statproto.PoBGood
	54, // 47: statproto.PoBGood.Bases:type_name -> statproto.PoBGoodBase
	51, // 48: statproto.PoBGoodBase.ShopItem:type_name -> statproto.ShopItem
	49, // 49: statproto.PoBGoodBase.Base:type_name -> statproto.PoBCore
	56, // 50: statproto.GetGraphPathsInput.Queries:type_name -> statproto.GraphPathQuery
	58, // 51: statproto.GetGraphPathsReply.Answers:type_name -> statproto.GetGraphPathsAnswer
	56, // 52: statproto.GetGraphPathsAnswer.Route:type_name -> statproto.GraphPathQuery
	59, // 53: statproto.GetGraphPathsAnswer.Time:type_name -> statproto.GraphPathTime
	8,  // 54: statproto.Base.MarketGoodsPerNickEntry.value:type_name -> statproto.MarketGood
	8,  // 55: statproto.Commodity.BasesEntry.value:type_name -> statproto.MarketGood
	8,  // 56: statproto.Ammo.BasesEntry.value:type_name -> statproto.MarketGood
	8,  // 57: statproto.CounterMeasure.BasesEntry.value:type_name -> statproto.MarketGood
	8,  // 58: statproto.Engine.BasesEntry.value:type_name -> statproto.MarketGood
	8,  // 59: statproto.Shield.BasesEntry.value:type_name -> statproto.MarketGood
	8,  // 60: statproto.Ship.BasesEntry.value:type_name -> statproto.MarketGood
	8,  // 61: statproto.Thruster.BasesEntry.value:type_name -> statproto.MarketGood
	8,  // 62: statproto.Tractor.BasesEntry.value:type_name -> statproto.MarketGood
	47, // 63: statproto.GetHashesReply.HashesByNickEntry.value:type_name -> statproto.Hash
	0,  // 64: statproto.Darkstat.GetHealth:input_type -> statproto.Empty
	3,  // 65: statproto.Darkstat.GetBasesNpc:input_type -> statproto.GetBasesInput
	3,  // 66: statproto.Darkstat.GetBasesMiningOperations:input_type -> statproto.GetBasesInput
	3,  // 67: statproto.Darkstat.GetBasesPoBs:input_type -> statproto.GetBasesInput
	0,  // 68: statproto.Darkstat.GetPoBs:input_type -> statproto.Empty
	0,  // 69: statproto.Darkstat.GetPoBGoods:input_type -> statproto.Empty
	11, // 70: statproto.Darkstat.GetCommodities:input_type -> statproto.GetCommoditiesInput
	2,  // 71: statproto.Darkstat.GetAmmos:input_type -> statproto.GetEquipmentInput
	2,  // 72: statproto.Darkstat.GetCounterMeasures:input_type -> statproto.GetEquipmentInput
	2,  // 73: statproto.Darkstat.GetEngines:input_type -> statproto.GetEquipmentInput
	2,  // 74: statproto.Darkstat.GetShields:input_type -> statproto.GetEquipmentInput
	2,  // 75: statproto.Darkstat.GetShips:input_type -> statproto.GetEquipmentInput
	2,  // 76: statproto.Darkstat.GetThrusters:input_type -> statproto.GetEquipmentInput
	24, // 77: statproto.Darkstat.GetFactions:input_type -> statproto.GetFactionsInput
	4,  // 78: statproto.Darkstat.GetTractors:input_type -> statproto.GetTractorsInput
	0,  // 79: statproto.Darkstat.GetHashes:input_type -> statproto.Empty
	55, // 80: statproto.Darkstat.GetGraphPaths:input_type -> statproto.GetGraphPathsInput
	1,  // 81: statproto.Darkstat.GetHealth:output_type -> statproto.HealthReply
	5,  // 82: statproto.Darkstat.GetBasesNpc:output_type -> statproto.GetBasesReply
	5,  // 83: statproto.Darkstat.GetBasesMiningOperations:output_type -> statproto.GetBasesReply
	5,  // 84: statproto.Darkstat.GetBasesPoBs:output_type -> statproto.GetBasesReply
	48, // 85: statproto.Darkstat.GetPoBs:output_type -> statproto.GetPoBsReply
	52, // 86: statproto.Darkstat.GetPoBGoods:output_type -> statproto.GetPoBGoodsReply
	12, // 87: statproto.Darkstat.GetCommodities:output_type -> statproto.GetCommoditiesReply
	14, // 88: statproto.Darkstat.GetAmmos:output_type -> statproto.GetAmmoReply
	20, // 89: statproto.Darkstat.GetCounterMeasures:output_type -> statproto.GetCounterMeasuresReply
	22, // 90: statproto.Darkstat.GetEngines:output_type -> statproto.GetEnginesReply
	35, // 91: statproto.Darkstat.GetShields:output_type -> statproto.GetShieldsReply
	37, // 92: statproto.Darkstat.GetShips:output_type -> statproto.GetShipsReply
	42, // 93: statproto.Darkstat.GetThrusters:output_type -> statproto.GetThrustersReply
	25, // 94: statproto.Darkstat.GetFactions:output_type -> statproto.GetFactionsReply
	44, // 95: statproto.Darkstat.GetTractors:output_type -> statproto.GetTractorsReply
	46, // 96: statproto.Darkstat.GetHashes:output_type -> statproto.GetHashesReply
	57, // 97: statproto.Darkstat.GetGraphPaths:output_type -> statproto.GetGraphPathsReply
	81, // [81:98] is the sub-list for method output_type
	64, // [64:81] is the sub-list for method input_type
	64, // [64:64] is the sub-list for extension type_name
	64, // [64:64] is the sub-list for extension extendee
	0,  // [0:64] is the sub-list for field type_name
}

func init() { file_darkstat_proto_init() }
func file_darkstat_proto_init() {
	if File_darkstat_proto != nil {
		return
	}
	file_darkstat_proto_msgTypes[7].OneofWrappers = []any{}
	file_darkstat_proto_msgTypes[8].OneofWrappers = []any{}
	file_darkstat_proto_msgTypes[15].OneofWrappers = []any{}
	file_darkstat_proto_msgTypes[17].OneofWrappers = []any{}
	file_darkstat_proto_msgTypes[21].OneofWrappers = []any{}
	file_darkstat_proto_msgTypes[23].OneofWrappers = []any{}
	file_darkstat_proto_msgTypes[36].OneofWrappers = []any{}
	file_darkstat_proto_msgTypes[38].OneofWrappers = []any{}
	file_darkstat_proto_msgTypes[43].OneofWrappers = []any{}
	file_darkstat_proto_msgTypes[49].OneofWrappers = []any{}
	file_darkstat_proto_msgTypes[53].OneofWrappers = []any{}
	file_darkstat_proto_msgTypes[58].OneofWrappers = []any{}
	file_darkstat_proto_msgTypes[59].OneofWrappers = []any{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_darkstat_proto_rawDesc), len(file_darkstat_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   71,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_darkstat_proto_goTypes,
		DependencyIndexes: file_darkstat_proto_depIdxs,
		MessageInfos:      file_darkstat_proto_msgTypes,
	}.Build()
	File_darkstat_proto = out.File
	file_darkstat_proto_goTypes = nil
	file_darkstat_proto_depIdxs = nil
}
