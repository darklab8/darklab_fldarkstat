syntax = "proto3";

option go_package = "github.com/darklab8/fl-darkstat/darkgrpc/statproto";

package statproto;
/*
Newest Darkstat API. it is accessable with gRPC and with regular JSON at this grpc API gateway.
https://github.com/darklab8/fl-darkstat#alternatively-we-offer-client-generation-through-grpc
Check documentation how u can generate Client Library for your language of choice, C#, Python, Typescript or even C++.
Full list of supported languages https://grpc.io/docs/languages/
Then u will be able to benefit pulling this data with the most comfort.
Or you can just pull as jsons from this json API as alternative.

In case of local usage, this API is available both at TCP localhost, and over Unix Domain Socket when darkstat is run at Linux ^_^.
With Unix Sockets u get extra performance boosts to pull all the data.

the Grpc api is the one for any new feature additions
Grpc API gateway to access same data over regular json POST requests is automatically syncronized with Grpc RPC calls available.
*/

service Darkstat {
  // Just to check if grpc works. Returns boolean value if it is healthy as true
  rpc GetHealth (Empty) returns (HealthReply);

  // Get all Freelancer NPC Bases
  rpc GetBases (GetBasesInput) returns (GetBasesReply);

  // Get all Player Owned Bases. Completely all that are public exposed
  rpc GetPoBs (Empty) returns (GetPoBsReply);
  // Get all PoB goods, where they are sold and bought. Reverse search by PoBs
  rpc GetPoBGoods (Empty) returns (GetPoBGoodsReply);

  // Get all Player Owned Bases in the same format as Npc Bases. Returns only PoBs which have known positions
  // Useful for trading calculations
  rpc GetPoBBases (GetBasesInput) returns (GetBasesReply);

  rpc GetCommodities (GetCommoditiesInput) returns (GetCommoditiesReply) {}
  rpc GetAmmos (GetEquipmentInput) returns (GetAmmoReply) {}
  rpc GetCounterMeasures (GetEquipmentInput) returns (GetCounterMeasuresReply) {}
  rpc GetEngines (GetEquipmentInput) returns (GetEnginesReply) {}

  // rpc GetGuns (GetEquipmentInput) returns (GetGunsReply) {}
  // rpc GetMines (GetEquipmentInput) returns (GetMinesReply) {}
  // rpc GetScanners (GetEquipmentInput) returns (GetScannersReply) {}
  // rpc GetShields (GetEquipmentInput) returns (GetShieldsReply) {}
  // rpc GetShips (GetEquipmentInput) returns (GetShipsReply) {}
  // rpc GetThrusters (GetEquipmentInput) returns (GetThrustersReply) {}

  // rpc GetFactions (Empty) returns (GetFactionsReply) {}
  // rpc GetTractors (Empty) returns (GetTractorsReply) {}
  // rpc GetHashes (Empty) returns (GetHashesReply);

  rpc GetGraphPaths (GetGraphPathsInput) returns (GetGraphPathsReply);
}

// The request message containing the user's name.
message Empty {
}
message HealthReply {
  bool is_healthy = 1;
}
message GetEquipmentInput {
  bool IncludeMarketGoods = 1;
  bool IncludeTechCompat = 2;
}
message GetBasesInput {
  bool IncludeMarketGoods = 1;
}
message GetBasesReply {
  repeated Base Items = 1;
}

// The response message containing the greetings
message Base {
  string Name = 1;
  repeated string Archetypes = 2;
  string Nickname = 3; 
  string FactionName = 5; 
  string System = 6; 
  string SystemNickname = 7; 
  string Region = 9;
  int64 StridName = 10; 
  int64 InfocardID = 11; 
  string File = 12; 
  string BGCS_base_run_by = 13;
  Pos Pos = 14; 
  string SectorCoord = 15;
  bool IsTransportUnreachable = 16; 
  bool Reachable = 18; 
  bool IsPob = 19;

  map<string, MarketGood> MarketGoodsPerNick = 20;
}

message MiningInfo {
  int64 DynamicLootMin = 1;   
	int64 DynamicLootMax = 2;
	int64 DynamicLootDifficulty = 3;
	optional MarketGood MinedGood = 4;         
}


message MarketGood {
  string Nickname = 1;
  string ShipNickname = 2; 
  string Name = 3;     
  int64 PriceBase = 4; 
  string HpType = 5;   
  string Category = 6;

    int64 LevelRequired = 7;
    double RepRequired = 8;
    optional int64 PriceBaseBuysFor = 9; 
    int64 PriceBaseSellsFor  = 10;
    double Volume   = 11;   
    int64 ShipClass  = 12;        
    bool BaseSells    = 13;    
    bool IsServerSideOverride = 14;
    bool NotBuyable      = 15;     
    bool IsTransportUnreachable = 16;

    string BaseNickname = 17; 
    string BaseName = 18;   
    string  SystemName = 19; 
    string  Region = 20;    
    string  FactionName = 21; 
    Pos BasePos = 22;     
    string SectorCoord = 23;
}

message Pos {
  double X = 1;
  double Y = 2;
  double Z = 3;
}

message GetCommoditiesInput {
  // To Include market goods, where the item is sold and bought or not. Adds a lot of extra weight to data
  //
  // Example: `false`
  bool IncludeMarketGoods = 1;
}
message GetCommoditiesReply {
  repeated Commodity Items = 1;
}

message Commodity {
	string Nickname = 1;        
	int64 PriceBase = 2;                                   
	string Name     = 3;                         
	bool Combinable = 4;  
	double Volume   = 5;                                    
	int64 ShipClass = 6;         
	int64 NameID      = 7;                                      
	int64 InfocardID  = 8; 
	map<string, MarketGood> Bases  = 9;            
	int64 PriceBestBaseBuysFor     = 10;                          
	int64 PriceBestBaseSellsFor    = 11;        
	int64 ProffitMargin            = 12;                          
	double Mass    = 13;            
}

message GetAmmoReply {
  repeated Ammo Items = 1;
}

message Ammo {
	string Name  = 1;
	int64 Price  = 2;

	int64 HitPts  = 3;
	double Volume = 4;
	double MunitionLifetime = 5;

	string Nickname = 6;
	int64 NameID    = 7;
	int64 InfoID    = 8;
	string SeekerType  = 9;
	int64 SeekerRange  = 10;
	int64 SeekerFovDeg = 11;

	map<string, MarketGood> Bases  = 12;            

	optional DiscoveryTechCompat DiscoveryTechCompat = 13;

  optional int64 AmountInCatridge = 14;
  optional int64 MaxCatridges     = 15;
  double Mass    = 16;
}

message DiscoveryTechCompat {
  map<string, double> TechcompatByID = 1;
  string TechCell = 2;
}

message TechCompatAnswer {
  optional DiscoveryTechCompat TechCompat = 1;
  optional string Error = 2;
  string Nickname = 3;
}

message GetTechCompatInput {
  repeated string Nicknames = 1;
}

message GetTechCompatReply {
  repeated TechCompatAnswer Answers = 1;
}

message GetCounterMeasuresReply {
  repeated CounterMeasure Items = 1;
}
message CounterMeasure {
	string Name = 1;
	int64 Price = 2;

	int64 HitPts    = 3;
	int64  AIRange  = 4;
	int64  Lifetime = 5;
	int64  Range    = 6;
	int64  DiversionPctg = 7;

	bool Lootable   = 8;
	string Nickname      = 9;
	int64  NameID        = 10;
	int64  InfoID        = 11;

	map<string, MarketGood> Bases  = 12;            
	optional DiscoveryTechCompat DiscoveryTechCompat = 13;

  optional int64 AmountInCatridge = 14;
  optional int64 MaxCatridges     = 15;
	double Mass      = 16;
}

message GetEnginesReply {
  repeated Engine Items = 1;
}
message Engine {
	string Name = 1;
	int64 Price = 2;

	int64 CruiseSpeed      = 3;
	int64 CruiseChargeTime = 4;
	int64 LinearDrag       = 5;
	int64 MaxForce         = 6;
	double ReverseFraction = 7;
	double ImpulseSpeed    = 8;

	string HpType          = 9;
	string FlameEffect     = 10;
	string TrailEffect     = 11;

	string Nickname        = 12;
	int64 NameID           = 13;
	int64 InfoID           = 14;

	map<string, MarketGood> Bases  = 15;            
	optional DiscoveryTechCompat DiscoveryTechCompat = 16;
	double Mass            = 17;
}
message GetFactionsReply {
  repeated Faction Items = 1;
}
message Faction {

}
message GetGunsReply {
  repeated Gun Items = 1;
}
message Gun {

}
message GetMinesReply {
  repeated Mine Items = 1;
}
message Mine {

}
message GetScannersReply {
  repeated Scanner Items = 1;
}
message Scanner {

}
message GetShieldsReply {
  repeated Shield Items = 1;
}
message Shield {

}
message GetShipsReply {
  repeated Ship Items = 1;
}
message Ship {

}
message GetThrustersReply {
  repeated Thruster Items = 1;
}
message Thruster {

}
message GetTractorsReply {
  repeated Tractor Items = 1;
}
message Tractor {

}
message GetHashesReply {

}
message GetPoBsReply {
  repeated PoB Items = 1;
}
message PoBCore {
  string Nickname = 1;
  string Name = 2;
  optional string Pos = 3;
  optional int64 Level = 4;

	optional int64 Money = 5;
	optional double Health = 6;
	optional int64 DefenseMode = 7;

	optional string SystemNick = 8;
	optional string SystemName  = 9; 
	optional string FactionNick = 10;
	optional string FactionName = 11;

	optional string ForumThreadUrl  = 12;
	optional int64 CargoSpaceLeft   = 13;

	optional Pos BasePos            = 14;
	optional string SectorCoord     = 15;
	optional string Region          = 16;
}
message PoB {
  PoBCore Core = 1;
  repeated ShopItem ShopItems = 2;
}
message ShopItem {
  string Nickname = 1;
  string Name = 2;
  string Category = 3;

  int64 Id = 4;
  int64 Quantity = 5;
  int64 Price    = 6;
	int64 SellPrice = 7;
	int64 MinStock  = 8;
	int64 MaxStock  = 9;
}

message GetPoBGoodsReply {
  repeated PoBGood Items = 1;
}
message PoBGood {
  string Nickname = 1;
  string Name = 2;
  int64 TotalBuyableFromBases = 3;
  int64 TotalSellableToBases = 4;
  optional int64 BestPriceToBuy = 5;
  optional int64 BestPriceToSell = 6;
  string Category = 7;
  bool AnyBaseSells = 8;
  bool AnyBaseBuys = 9;
  repeated PoBGoodBase Bases = 10;
}
message PoBGoodBase {
  ShopItem ShopItem = 1;
  PoBCore Base = 2;
}

message GetGraphPathsInput {
  repeated GraphPathQuery Queries = 1;
}
message GraphPathQuery {
	string From = 1;
	string To = 2;
}


message GetGraphPathsReply {
  repeated GetGraphPathsAnswer Answers = 1;
}

message GetGraphPathsAnswer {
  GraphPathQuery Route = 1;
  optional GraphPathTime Time = 2;
  optional string Error = 3;
}

message GraphPathTime {
	optional int64 Transport = 1;
	optional int64 Frigate = 2;
	optional int64 Freighter = 3;
}