{
  "swagger": "2.0",
  "info": {
    "title": "darkstat.proto",
    "description": "Newest Darkstat API. it is accessable with gRPC and with regular JSON at this grpc API gateway.\nhttps://github.com/darklab8/fl-darkstat#alternatively-we-offer-client-generation-through-grpc\nCheck documentation how u can generate Client Library for your language of choice, C#, Python, Typescript or even C++.\nFull list of supported languages https://grpc.io/docs/languages/\nThen u will be able to benefit pulling this data with the most comfort.\nOr you can just pull as jsons from this json API as alternative.\n\nIn case of local usage, this API is available both at TCP localhost, and over Unix Domain Socket when darkstat is run at Linux ^_^.\nWith Unix Sockets u get extra performance boosts to pull all the data.\n\nthe Grpc api is the one for any new feature additions\nGrpc API gateway to access same data over regular json POST requests is automatically syncronized with Grpc RPC calls available.\n\nNOTE: Routes have defined input `IncludeMarketGoods` and `IncludeTechCompat` at least.\nDepending on your having them true or not, significantly different amount of data is pushed",
    "version": "version not set"
  },
  "tags": [
    {
      "name": "Darkstat"
    }
  ],
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "paths": {
    "/statproto.Darkstat/GetAmmos": {
      "post": {
        "operationId": "Darkstat_GetAmmos",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/statprotoGetAmmoReply"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/statprotoGetEquipmentInput"
            }
          }
        ],
        "tags": [
          "Darkstat"
        ]
      }
    },
    "/statproto.Darkstat/GetBasesMiningOperations": {
      "post": {
        "summary": "Get all imaginary bases that in place of mining fields. Useful for trading calculations",
        "operationId": "Darkstat_GetBasesMiningOperations",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/statprotoGetBasesReply"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/statprotoGetBasesInput"
            }
          }
        ],
        "tags": [
          "Darkstat"
        ]
      }
    },
    "/statproto.Darkstat/GetBasesNpc": {
      "post": {
        "summary": "Get all Freelancer NPC Bases",
        "operationId": "Darkstat_GetBasesNpc",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/statprotoGetBasesReply"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/statprotoGetBasesInput"
            }
          }
        ],
        "tags": [
          "Darkstat"
        ]
      }
    },
    "/statproto.Darkstat/GetBasesPoBs": {
      "post": {
        "summary": "Get all Player Owned Bases in the same format as Npc Bases. Returns only PoBs which have known positions\nUseful for trading calculations",
        "operationId": "Darkstat_GetBasesPoBs",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/statprotoGetBasesReply"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/statprotoGetBasesInput"
            }
          }
        ],
        "tags": [
          "Darkstat"
        ]
      }
    },
    "/statproto.Darkstat/GetCommodities": {
      "post": {
        "operationId": "Darkstat_GetCommodities",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/statprotoGetCommoditiesReply"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/statprotoGetCommoditiesInput"
            }
          }
        ],
        "tags": [
          "Darkstat"
        ]
      }
    },
    "/statproto.Darkstat/GetCounterMeasures": {
      "post": {
        "operationId": "Darkstat_GetCounterMeasures",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/statprotoGetCounterMeasuresReply"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/statprotoGetEquipmentInput"
            }
          }
        ],
        "tags": [
          "Darkstat"
        ]
      }
    },
    "/statproto.Darkstat/GetEngines": {
      "post": {
        "operationId": "Darkstat_GetEngines",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/statprotoGetEnginesReply"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/statprotoGetEquipmentInput"
            }
          }
        ],
        "tags": [
          "Darkstat"
        ]
      }
    },
    "/statproto.Darkstat/GetFactions": {
      "post": {
        "operationId": "Darkstat_GetFactions",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/statprotoGetFactionsReply"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/statprotoGetFactionsInput"
            }
          }
        ],
        "tags": [
          "Darkstat"
        ]
      }
    },
    "/statproto.Darkstat/GetGraphPaths": {
      "post": {
        "operationId": "Darkstat_GetGraphPaths",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/statprotoGetGraphPathsReply"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/statprotoGetGraphPathsInput"
            }
          }
        ],
        "tags": [
          "Darkstat"
        ]
      }
    },
    "/statproto.Darkstat/GetHashes": {
      "post": {
        "summary": "rpc GetInfocards",
        "operationId": "Darkstat_GetHashes",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/statprotoGetHashesReply"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "description": "The request message containing the user's name.",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/statprotoEmpty"
            }
          }
        ],
        "tags": [
          "Darkstat"
        ]
      }
    },
    "/statproto.Darkstat/GetHealth": {
      "post": {
        "summary": "Just to check if grpc works. Returns boolean value if it is healthy as true",
        "operationId": "Darkstat_GetHealth",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/statprotoHealthReply"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "description": "The request message containing the user's name.",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/statprotoEmpty"
            }
          }
        ],
        "tags": [
          "Darkstat"
        ]
      }
    },
    "/statproto.Darkstat/GetPoBGoods": {
      "post": {
        "summary": "Get all PoB goods, where they are sold and bought. Reverse search by PoBs",
        "operationId": "Darkstat_GetPoBGoods",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/statprotoGetPoBGoodsReply"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "description": "The request message containing the user's name.",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/statprotoEmpty"
            }
          }
        ],
        "tags": [
          "Darkstat"
        ]
      }
    },
    "/statproto.Darkstat/GetPoBs": {
      "post": {
        "summary": "Get all Player Owned Bases. Completely all that are public exposed",
        "operationId": "Darkstat_GetPoBs",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/statprotoGetPoBsReply"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "description": "The request message containing the user's name.",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/statprotoEmpty"
            }
          }
        ],
        "tags": [
          "Darkstat"
        ]
      }
    },
    "/statproto.Darkstat/GetShips": {
      "post": {
        "operationId": "Darkstat_GetShips",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/statprotoGetShipsReply"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/statprotoGetEquipmentInput"
            }
          }
        ],
        "tags": [
          "Darkstat"
        ]
      }
    },
    "/statproto.Darkstat/GetThrusters": {
      "post": {
        "operationId": "Darkstat_GetThrusters",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/statprotoGetThrustersReply"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/statprotoGetEquipmentInput"
            }
          }
        ],
        "tags": [
          "Darkstat"
        ]
      }
    },
    "/statproto.Darkstat/GetTractors": {
      "post": {
        "summary": "Get Tractors. For Discovery those are IDs",
        "operationId": "Darkstat_GetTractors",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/statprotoGetTractorsReply"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/statprotoGetTractorsInput"
            }
          }
        ],
        "tags": [
          "Darkstat"
        ]
      }
    }
  },
  "definitions": {
    "protobufAny": {
      "type": "object",
      "properties": {
        "@type": {
          "type": "string"
        }
      },
      "additionalProperties": {}
    },
    "rpcStatus": {
      "type": "object",
      "properties": {
        "code": {
          "type": "integer",
          "format": "int32"
        },
        "message": {
          "type": "string"
        },
        "details": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/protobufAny"
          }
        }
      }
    },
    "statprotoAmmo": {
      "type": "object",
      "properties": {
        "Name": {
          "type": "string"
        },
        "Price": {
          "type": "string",
          "format": "int64"
        },
        "HitPts": {
          "type": "string",
          "format": "int64"
        },
        "Volume": {
          "type": "number",
          "format": "double"
        },
        "MunitionLifetime": {
          "type": "number",
          "format": "double"
        },
        "Nickname": {
          "type": "string"
        },
        "NameID": {
          "type": "string",
          "format": "int64"
        },
        "InfoID": {
          "type": "string",
          "format": "int64"
        },
        "SeekerType": {
          "type": "string"
        },
        "SeekerRange": {
          "type": "string",
          "format": "int64"
        },
        "SeekerFovDeg": {
          "type": "string",
          "format": "int64"
        },
        "Bases": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/statprotoMarketGood"
          }
        },
        "DiscoveryTechCompat": {
          "$ref": "#/definitions/statprotoDiscoveryTechCompat"
        },
        "AmountInCatridge": {
          "type": "string",
          "format": "int64"
        },
        "MaxCatridges": {
          "type": "string",
          "format": "int64"
        },
        "Mass": {
          "type": "number",
          "format": "double"
        }
      }
    },
    "statprotoBase": {
      "type": "object",
      "properties": {
        "Name": {
          "type": "string"
        },
        "Archetypes": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "Nickname": {
          "type": "string"
        },
        "FactionName": {
          "type": "string"
        },
        "System": {
          "type": "string"
        },
        "SystemNickname": {
          "type": "string"
        },
        "Region": {
          "type": "string"
        },
        "StridName": {
          "type": "string",
          "format": "int64"
        },
        "InfocardID": {
          "type": "string",
          "format": "int64"
        },
        "File": {
          "type": "string"
        },
        "BGCSBaseRunBy": {
          "type": "string"
        },
        "Pos": {
          "$ref": "#/definitions/statprotoPos"
        },
        "SectorCoord": {
          "type": "string"
        },
        "IsTransportUnreachable": {
          "type": "boolean"
        },
        "Reachable": {
          "type": "boolean"
        },
        "IsPob": {
          "type": "boolean"
        },
        "MarketGoodsPerNick": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/statprotoMarketGood"
          }
        }
      },
      "title": "The response message containing the greetings"
    },
    "statprotoBaseInfo": {
      "type": "object",
      "properties": {
        "BaseNickname": {
          "type": "string"
        },
        "BaseName": {
          "type": "string"
        },
        "SystemName": {
          "type": "string"
        },
        "Region": {
          "type": "string"
        },
        "FactionName": {
          "type": "string"
        },
        "BasePos": {
          "$ref": "#/definitions/statprotoPos"
        },
        "SectorCoord": {
          "type": "string"
        }
      }
    },
    "statprotoBribe": {
      "type": "object",
      "properties": {
        "BaseNickname": {
          "type": "string"
        },
        "Chance": {
          "type": "number",
          "format": "double"
        },
        "BaseInfo": {
          "$ref": "#/definitions/statprotoBaseInfo"
        }
      }
    },
    "statprotoCommodity": {
      "type": "object",
      "properties": {
        "Nickname": {
          "type": "string"
        },
        "PriceBase": {
          "type": "string",
          "format": "int64"
        },
        "Name": {
          "type": "string"
        },
        "Combinable": {
          "type": "boolean"
        },
        "Volume": {
          "type": "number",
          "format": "double"
        },
        "ShipClass": {
          "type": "string",
          "format": "int64"
        },
        "NameID": {
          "type": "string",
          "format": "int64"
        },
        "InfocardID": {
          "type": "string",
          "format": "int64"
        },
        "Bases": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/statprotoMarketGood"
          }
        },
        "PriceBestBaseBuysFor": {
          "type": "string",
          "format": "int64"
        },
        "PriceBestBaseSellsFor": {
          "type": "string",
          "format": "int64"
        },
        "ProffitMargin": {
          "type": "string",
          "format": "int64"
        },
        "Mass": {
          "type": "number",
          "format": "double"
        }
      }
    },
    "statprotoCounterMeasure": {
      "type": "object",
      "properties": {
        "Name": {
          "type": "string"
        },
        "Price": {
          "type": "string",
          "format": "int64"
        },
        "HitPts": {
          "type": "string",
          "format": "int64"
        },
        "AIRange": {
          "type": "string",
          "format": "int64"
        },
        "Lifetime": {
          "type": "string",
          "format": "int64"
        },
        "Range": {
          "type": "string",
          "format": "int64"
        },
        "DiversionPctg": {
          "type": "string",
          "format": "int64"
        },
        "Lootable": {
          "type": "boolean"
        },
        "Nickname": {
          "type": "string"
        },
        "NameID": {
          "type": "string",
          "format": "int64"
        },
        "InfoID": {
          "type": "string",
          "format": "int64"
        },
        "Bases": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/statprotoMarketGood"
          }
        },
        "DiscoveryTechCompat": {
          "$ref": "#/definitions/statprotoDiscoveryTechCompat"
        },
        "AmountInCatridge": {
          "type": "string",
          "format": "int64"
        },
        "MaxCatridges": {
          "type": "string",
          "format": "int64"
        },
        "Mass": {
          "type": "number",
          "format": "double"
        }
      }
    },
    "statprotoDiscoShip": {
      "type": "object",
      "properties": {
        "ArmorMult": {
          "type": "number",
          "format": "double"
        }
      }
    },
    "statprotoDiscoveryTechCompat": {
      "type": "object",
      "properties": {
        "TechcompatByID": {
          "type": "object",
          "additionalProperties": {
            "type": "number",
            "format": "double"
          }
        },
        "TechCell": {
          "type": "string"
        }
      }
    },
    "statprotoEmpty": {
      "type": "object",
      "description": "The request message containing the user's name."
    },
    "statprotoEngine": {
      "type": "object",
      "properties": {
        "Name": {
          "type": "string"
        },
        "Price": {
          "type": "string",
          "format": "int64"
        },
        "CruiseSpeed": {
          "type": "string",
          "format": "int64"
        },
        "CruiseChargeTime": {
          "type": "string",
          "format": "int64"
        },
        "LinearDrag": {
          "type": "string",
          "format": "int64"
        },
        "MaxForce": {
          "type": "string",
          "format": "int64"
        },
        "ReverseFraction": {
          "type": "number",
          "format": "double"
        },
        "ImpulseSpeed": {
          "type": "number",
          "format": "double"
        },
        "HpType": {
          "type": "string"
        },
        "FlameEffect": {
          "type": "string"
        },
        "TrailEffect": {
          "type": "string"
        },
        "Nickname": {
          "type": "string"
        },
        "NameID": {
          "type": "string",
          "format": "int64"
        },
        "InfoID": {
          "type": "string",
          "format": "int64"
        },
        "Bases": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/statprotoMarketGood"
          }
        },
        "DiscoveryTechCompat": {
          "$ref": "#/definitions/statprotoDiscoveryTechCompat"
        },
        "Mass": {
          "type": "number",
          "format": "double"
        }
      }
    },
    "statprotoEquipmentSlot": {
      "type": "object",
      "properties": {
        "SlotName": {
          "type": "string"
        },
        "AllowedEquip": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "statprotoFaction": {
      "type": "object",
      "properties": {
        "Name": {
          "type": "string"
        },
        "ShortName": {
          "type": "string"
        },
        "Nickname": {
          "type": "string"
        },
        "ObjectDestruction": {
          "type": "number",
          "format": "double"
        },
        "MissionSuccess": {
          "type": "number",
          "format": "double"
        },
        "MissionFailure": {
          "type": "number",
          "format": "double"
        },
        "MissionAbort": {
          "type": "number",
          "format": "double"
        },
        "InfonameID": {
          "type": "string",
          "format": "int64"
        },
        "InfocardID": {
          "type": "string",
          "format": "int64"
        },
        "Reputations": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/statprotoReputation"
          }
        },
        "Bribes": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/statprotoBribe"
          }
        }
      }
    },
    "statprotoGetAmmoReply": {
      "type": "object",
      "properties": {
        "Items": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/statprotoAmmo"
          }
        }
      }
    },
    "statprotoGetBasesInput": {
      "type": "object",
      "properties": {
        "IncludeMarketGoods": {
          "type": "boolean"
        },
        "FilterToUseful": {
          "type": "boolean"
        }
      }
    },
    "statprotoGetBasesReply": {
      "type": "object",
      "properties": {
        "Items": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/statprotoBase"
          }
        }
      }
    },
    "statprotoGetCommoditiesInput": {
      "type": "object",
      "properties": {
        "IncludeMarketGoods": {
          "type": "boolean",
          "description": "Example: `false`",
          "title": "To Include market goods, where the item is sold and bought or not. Adds a lot of extra weight to data"
        },
        "FilterToUseful": {
          "type": "boolean"
        }
      }
    },
    "statprotoGetCommoditiesReply": {
      "type": "object",
      "properties": {
        "Items": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/statprotoCommodity"
          }
        }
      }
    },
    "statprotoGetCounterMeasuresReply": {
      "type": "object",
      "properties": {
        "Items": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/statprotoCounterMeasure"
          }
        }
      }
    },
    "statprotoGetEnginesReply": {
      "type": "object",
      "properties": {
        "Items": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/statprotoEngine"
          }
        }
      }
    },
    "statprotoGetEquipmentInput": {
      "type": "object",
      "properties": {
        "IncludeMarketGoods": {
          "type": "boolean"
        },
        "IncludeTechCompat": {
          "type": "boolean"
        },
        "FilterToUseful": {
          "type": "boolean"
        }
      }
    },
    "statprotoGetFactionsInput": {
      "type": "object",
      "properties": {
        "IncludeReputations": {
          "type": "boolean"
        },
        "IncludeBribes": {
          "type": "boolean"
        },
        "FilterToUseful": {
          "type": "boolean"
        }
      }
    },
    "statprotoGetFactionsReply": {
      "type": "object",
      "properties": {
        "Items": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/statprotoFaction"
          }
        }
      }
    },
    "statprotoGetGraphPathsAnswer": {
      "type": "object",
      "properties": {
        "Route": {
          "$ref": "#/definitions/statprotoGraphPathQuery"
        },
        "Time": {
          "$ref": "#/definitions/statprotoGraphPathTime"
        },
        "Error": {
          "type": "string"
        }
      }
    },
    "statprotoGetGraphPathsInput": {
      "type": "object",
      "properties": {
        "Queries": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/statprotoGraphPathQuery"
          }
        }
      }
    },
    "statprotoGetGraphPathsReply": {
      "type": "object",
      "properties": {
        "Answers": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/statprotoGetGraphPathsAnswer"
          }
        }
      }
    },
    "statprotoGetHashesReply": {
      "type": "object",
      "properties": {
        "HashesByNick": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/statprotoHash"
          }
        }
      }
    },
    "statprotoGetPoBGoodsReply": {
      "type": "object",
      "properties": {
        "Items": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/statprotoPoBGood"
          }
        }
      }
    },
    "statprotoGetPoBsReply": {
      "type": "object",
      "properties": {
        "Items": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/statprotoPoB"
          }
        }
      }
    },
    "statprotoGetShipsReply": {
      "type": "object",
      "properties": {
        "Items": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/statprotoShip"
          }
        }
      }
    },
    "statprotoGetThrustersReply": {
      "type": "object",
      "properties": {
        "Items": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/statprotoThruster"
          }
        }
      }
    },
    "statprotoGetTractorsInput": {
      "type": "object",
      "properties": {
        "IncludeMarketGoods": {
          "type": "boolean"
        },
        "FilterToUseful": {
          "type": "boolean"
        }
      }
    },
    "statprotoGetTractorsReply": {
      "type": "object",
      "properties": {
        "Items": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/statprotoTractor"
          }
        }
      }
    },
    "statprotoGraphPathQuery": {
      "type": "object",
      "properties": {
        "From": {
          "type": "string"
        },
        "To": {
          "type": "string"
        }
      }
    },
    "statprotoGraphPathTime": {
      "type": "object",
      "properties": {
        "Transport": {
          "type": "string",
          "format": "int64"
        },
        "Frigate": {
          "type": "string",
          "format": "int64"
        },
        "Freighter": {
          "type": "string",
          "format": "int64"
        }
      }
    },
    "statprotoHash": {
      "type": "object",
      "properties": {
        "Int32": {
          "type": "integer",
          "format": "int32"
        },
        "Uint32": {
          "type": "integer",
          "format": "int64"
        },
        "Hex": {
          "type": "string"
        }
      }
    },
    "statprotoHealthReply": {
      "type": "object",
      "properties": {
        "isHealthy": {
          "type": "boolean"
        }
      }
    },
    "statprotoMarketGood": {
      "type": "object",
      "properties": {
        "Nickname": {
          "type": "string"
        },
        "ShipNickname": {
          "type": "string"
        },
        "Name": {
          "type": "string"
        },
        "PriceBase": {
          "type": "string",
          "format": "int64"
        },
        "HpType": {
          "type": "string"
        },
        "Category": {
          "type": "string"
        },
        "LevelRequired": {
          "type": "string",
          "format": "int64"
        },
        "RepRequired": {
          "type": "number",
          "format": "double"
        },
        "PriceBaseBuysFor": {
          "type": "string",
          "format": "int64"
        },
        "PriceBaseSellsFor": {
          "type": "string",
          "format": "int64"
        },
        "Volume": {
          "type": "number",
          "format": "double"
        },
        "ShipClass": {
          "type": "string",
          "format": "int64"
        },
        "BaseSells": {
          "type": "boolean"
        },
        "IsServerSideOverride": {
          "type": "boolean"
        },
        "NotBuyable": {
          "type": "boolean"
        },
        "IsTransportUnreachable": {
          "type": "boolean"
        },
        "baseInfo": {
          "$ref": "#/definitions/statprotoBaseInfo"
        }
      }
    },
    "statprotoPoB": {
      "type": "object",
      "properties": {
        "Core": {
          "$ref": "#/definitions/statprotoPoBCore"
        },
        "ShopItems": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/statprotoShopItem"
          }
        }
      }
    },
    "statprotoPoBCore": {
      "type": "object",
      "properties": {
        "Nickname": {
          "type": "string"
        },
        "Name": {
          "type": "string"
        },
        "Pos": {
          "type": "string"
        },
        "Level": {
          "type": "string",
          "format": "int64"
        },
        "Money": {
          "type": "string",
          "format": "int64"
        },
        "Health": {
          "type": "number",
          "format": "double"
        },
        "DefenseMode": {
          "type": "string",
          "format": "int64"
        },
        "SystemNick": {
          "type": "string"
        },
        "SystemName": {
          "type": "string"
        },
        "FactionNick": {
          "type": "string"
        },
        "FactionName": {
          "type": "string"
        },
        "ForumThreadUrl": {
          "type": "string"
        },
        "CargoSpaceLeft": {
          "type": "string",
          "format": "int64"
        },
        "BasePos": {
          "$ref": "#/definitions/statprotoPos"
        },
        "SectorCoord": {
          "type": "string"
        },
        "Region": {
          "type": "string"
        }
      }
    },
    "statprotoPoBGood": {
      "type": "object",
      "properties": {
        "Nickname": {
          "type": "string"
        },
        "Name": {
          "type": "string"
        },
        "TotalBuyableFromBases": {
          "type": "string",
          "format": "int64"
        },
        "TotalSellableToBases": {
          "type": "string",
          "format": "int64"
        },
        "BestPriceToBuy": {
          "type": "string",
          "format": "int64"
        },
        "BestPriceToSell": {
          "type": "string",
          "format": "int64"
        },
        "Category": {
          "type": "string"
        },
        "AnyBaseSells": {
          "type": "boolean"
        },
        "AnyBaseBuys": {
          "type": "boolean"
        },
        "Bases": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/statprotoPoBGoodBase"
          }
        }
      }
    },
    "statprotoPoBGoodBase": {
      "type": "object",
      "properties": {
        "ShopItem": {
          "$ref": "#/definitions/statprotoShopItem"
        },
        "Base": {
          "$ref": "#/definitions/statprotoPoBCore"
        }
      }
    },
    "statprotoPos": {
      "type": "object",
      "properties": {
        "X": {
          "type": "number",
          "format": "double"
        },
        "Y": {
          "type": "number",
          "format": "double"
        },
        "Z": {
          "type": "number",
          "format": "double"
        }
      }
    },
    "statprotoReputation": {
      "type": "object",
      "properties": {
        "Name": {
          "type": "string"
        },
        "Rep": {
          "type": "number",
          "format": "double"
        },
        "Empathy": {
          "type": "number",
          "format": "double"
        },
        "Nickname": {
          "type": "string"
        }
      }
    },
    "statprotoShip": {
      "type": "object",
      "properties": {
        "Nickname": {
          "type": "string"
        },
        "Name": {
          "type": "string"
        },
        "Class": {
          "type": "string",
          "format": "int64"
        },
        "Type": {
          "type": "string"
        },
        "Price": {
          "type": "string",
          "format": "int64"
        },
        "Armor": {
          "type": "string",
          "format": "int64"
        },
        "HoldSize": {
          "type": "string",
          "format": "int64"
        },
        "Nanobots": {
          "type": "string",
          "format": "int64"
        },
        "Batteries": {
          "type": "string",
          "format": "int64"
        },
        "Mass": {
          "type": "number",
          "format": "double"
        },
        "PowerCapacity": {
          "type": "string",
          "format": "int64"
        },
        "PowerRechargeRate": {
          "type": "string",
          "format": "int64"
        },
        "CruiseSpeed": {
          "type": "string",
          "format": "int64"
        },
        "LinearDrag": {
          "type": "number",
          "format": "double"
        },
        "EngineMaxForce": {
          "type": "string",
          "format": "int64"
        },
        "ImpulseSpeed": {
          "type": "number",
          "format": "double"
        },
        "ThrusterSpeed": {
          "type": "array",
          "items": {
            "type": "string",
            "format": "int64"
          }
        },
        "ReverseFraction": {
          "type": "number",
          "format": "double"
        },
        "ThrustCapacity": {
          "type": "string",
          "format": "int64"
        },
        "ThrustRecharge": {
          "type": "string",
          "format": "int64"
        },
        "MaxAngularSpeedDegS": {
          "type": "number",
          "format": "double"
        },
        "AngularDistanceFrom0ToHalfSec": {
          "type": "number",
          "format": "double"
        },
        "TimeTo90MaxAngularSpeed": {
          "type": "number",
          "format": "double"
        },
        "NudgeForce": {
          "type": "number",
          "format": "double"
        },
        "StrafeForce": {
          "type": "number",
          "format": "double"
        },
        "NameID": {
          "type": "string",
          "format": "int64"
        },
        "InfoID": {
          "type": "string",
          "format": "int64"
        },
        "Slots": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/statprotoEquipmentSlot"
          }
        },
        "BiggestHardpoint": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "ShipPackages": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/statprotoShipPackage"
          }
        },
        "Bases": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/statprotoMarketGood"
          }
        },
        "DiscoveryTechCompat": {
          "$ref": "#/definitions/statprotoDiscoveryTechCompat"
        },
        "DiscoShip": {
          "$ref": "#/definitions/statprotoDiscoShip"
        }
      }
    },
    "statprotoShipPackage": {
      "type": "object",
      "properties": {
        "Nickname": {
          "type": "string"
        }
      }
    },
    "statprotoShopItem": {
      "type": "object",
      "properties": {
        "Nickname": {
          "type": "string"
        },
        "Name": {
          "type": "string"
        },
        "Category": {
          "type": "string"
        },
        "Id": {
          "type": "string",
          "format": "int64"
        },
        "Quantity": {
          "type": "string",
          "format": "int64"
        },
        "Price": {
          "type": "string",
          "format": "int64"
        },
        "SellPrice": {
          "type": "string",
          "format": "int64"
        },
        "MinStock": {
          "type": "string",
          "format": "int64"
        },
        "MaxStock": {
          "type": "string",
          "format": "int64"
        }
      }
    },
    "statprotoThruster": {
      "type": "object",
      "properties": {
        "Name": {
          "type": "string"
        },
        "Price": {
          "type": "string",
          "format": "int64"
        },
        "MaxForce": {
          "type": "string",
          "format": "int64"
        },
        "PowerUsage": {
          "type": "string",
          "format": "int64"
        },
        "Efficiency": {
          "type": "number",
          "format": "double"
        },
        "Value": {
          "type": "number",
          "format": "double"
        },
        "HitPts": {
          "type": "string",
          "format": "int64"
        },
        "Lootable": {
          "type": "boolean"
        },
        "Nickname": {
          "type": "string"
        },
        "NameID": {
          "type": "string",
          "format": "int64"
        },
        "InfoID": {
          "type": "string",
          "format": "int64"
        },
        "Mass": {
          "type": "number",
          "format": "double"
        },
        "Bases": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/statprotoMarketGood"
          }
        },
        "DiscoveryTechCompat": {
          "$ref": "#/definitions/statprotoDiscoveryTechCompat"
        }
      }
    },
    "statprotoTractor": {
      "type": "object",
      "properties": {
        "Name": {
          "type": "string"
        },
        "Price": {
          "type": "string",
          "format": "int64"
        },
        "MaxLength": {
          "type": "string",
          "format": "int64"
        },
        "ReachSpeed": {
          "type": "string",
          "format": "int64"
        },
        "Lootable": {
          "type": "boolean"
        },
        "Nickname": {
          "type": "string"
        },
        "ShortNickname": {
          "type": "string"
        },
        "NameID": {
          "type": "string",
          "format": "int64"
        },
        "InfoID": {
          "type": "string",
          "format": "int64"
        },
        "Bases": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/statprotoMarketGood"
          }
        },
        "Mass": {
          "type": "number",
          "format": "double"
        }
      }
    }
  }
}
