// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.4
// 	protoc        v3.12.4
// source: main.proto

package statproto

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// The request message containing the user's name.
type Empty struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Empty) Reset() {
	*x = Empty{}
	mi := &file_main_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Empty) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Empty) ProtoMessage() {}

func (x *Empty) ProtoReflect() protoreflect.Message {
	mi := &file_main_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Empty.ProtoReflect.Descriptor instead.
func (*Empty) Descriptor() ([]byte, []int) {
	return file_main_proto_rawDescGZIP(), []int{0}
}

type HealthReply struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	IsHealthy     bool                   `protobuf:"varint,1,opt,name=is_healthy,json=isHealthy,proto3" json:"is_healthy,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *HealthReply) Reset() {
	*x = HealthReply{}
	mi := &file_main_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *HealthReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HealthReply) ProtoMessage() {}

func (x *HealthReply) ProtoReflect() protoreflect.Message {
	mi := &file_main_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HealthReply.ProtoReflect.Descriptor instead.
func (*HealthReply) Descriptor() ([]byte, []int) {
	return file_main_proto_rawDescGZIP(), []int{1}
}

func (x *HealthReply) GetIsHealthy() bool {
	if x != nil {
		return x.IsHealthy
	}
	return false
}

type GetEquipmentInput struct {
	state              protoimpl.MessageState `protogen:"open.v1"`
	IncludeMarketGoods bool                   `protobuf:"varint,1,opt,name=IncludeMarketGoods,proto3" json:"IncludeMarketGoods,omitempty"`
	IncludeTechCompat  bool                   `protobuf:"varint,2,opt,name=IncludeTechCompat,proto3" json:"IncludeTechCompat,omitempty"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *GetEquipmentInput) Reset() {
	*x = GetEquipmentInput{}
	mi := &file_main_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetEquipmentInput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetEquipmentInput) ProtoMessage() {}

func (x *GetEquipmentInput) ProtoReflect() protoreflect.Message {
	mi := &file_main_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetEquipmentInput.ProtoReflect.Descriptor instead.
func (*GetEquipmentInput) Descriptor() ([]byte, []int) {
	return file_main_proto_rawDescGZIP(), []int{2}
}

func (x *GetEquipmentInput) GetIncludeMarketGoods() bool {
	if x != nil {
		return x.IncludeMarketGoods
	}
	return false
}

func (x *GetEquipmentInput) GetIncludeTechCompat() bool {
	if x != nil {
		return x.IncludeTechCompat
	}
	return false
}

type GetBasesInput struct {
	state              protoimpl.MessageState `protogen:"open.v1"`
	IncludeMarketGoods bool                   `protobuf:"varint,1,opt,name=IncludeMarketGoods,proto3" json:"IncludeMarketGoods,omitempty"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *GetBasesInput) Reset() {
	*x = GetBasesInput{}
	mi := &file_main_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetBasesInput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetBasesInput) ProtoMessage() {}

func (x *GetBasesInput) ProtoReflect() protoreflect.Message {
	mi := &file_main_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetBasesInput.ProtoReflect.Descriptor instead.
func (*GetBasesInput) Descriptor() ([]byte, []int) {
	return file_main_proto_rawDescGZIP(), []int{3}
}

func (x *GetBasesInput) GetIncludeMarketGoods() bool {
	if x != nil {
		return x.IncludeMarketGoods
	}
	return false
}

type GetBasesReply struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Items         []*Base                `protobuf:"bytes,1,rep,name=Items,proto3" json:"Items,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetBasesReply) Reset() {
	*x = GetBasesReply{}
	mi := &file_main_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetBasesReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetBasesReply) ProtoMessage() {}

func (x *GetBasesReply) ProtoReflect() protoreflect.Message {
	mi := &file_main_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetBasesReply.ProtoReflect.Descriptor instead.
func (*GetBasesReply) Descriptor() ([]byte, []int) {
	return file_main_proto_rawDescGZIP(), []int{4}
}

func (x *GetBasesReply) GetItems() []*Base {
	if x != nil {
		return x.Items
	}
	return nil
}

// The response message containing the greetings
type Base struct {
	state                  protoimpl.MessageState `protogen:"open.v1"`
	Name                   string                 `protobuf:"bytes,1,opt,name=Name,proto3" json:"Name,omitempty"`
	Archetypes             []string               `protobuf:"bytes,2,rep,name=Archetypes,proto3" json:"Archetypes,omitempty"`
	Nickname               string                 `protobuf:"bytes,3,opt,name=Nickname,proto3" json:"Nickname,omitempty"`
	FactionName            string                 `protobuf:"bytes,5,opt,name=FactionName,proto3" json:"FactionName,omitempty"`
	System                 string                 `protobuf:"bytes,6,opt,name=System,proto3" json:"System,omitempty"`
	SystemNickname         string                 `protobuf:"bytes,7,opt,name=SystemNickname,proto3" json:"SystemNickname,omitempty"`
	Region                 string                 `protobuf:"bytes,9,opt,name=Region,proto3" json:"Region,omitempty"`
	StridName              int64                  `protobuf:"varint,10,opt,name=StridName,proto3" json:"StridName,omitempty"`
	InfocardID             int64                  `protobuf:"varint,11,opt,name=InfocardID,proto3" json:"InfocardID,omitempty"`
	File                   string                 `protobuf:"bytes,12,opt,name=File,proto3" json:"File,omitempty"`
	BGCSBaseRunBy          string                 `protobuf:"bytes,13,opt,name=BGCS_base_run_by,json=BGCSBaseRunBy,proto3" json:"BGCS_base_run_by,omitempty"`
	Pos                    *Pos                   `protobuf:"bytes,14,opt,name=Pos,proto3" json:"Pos,omitempty"`
	SectorCoord            string                 `protobuf:"bytes,15,opt,name=SectorCoord,proto3" json:"SectorCoord,omitempty"`
	IsTransportUnreachable bool                   `protobuf:"varint,16,opt,name=IsTransportUnreachable,proto3" json:"IsTransportUnreachable,omitempty"`
	Reachable              bool                   `protobuf:"varint,18,opt,name=Reachable,proto3" json:"Reachable,omitempty"`
	IsPob                  bool                   `protobuf:"varint,19,opt,name=IsPob,proto3" json:"IsPob,omitempty"`
	MarketGoodsPerNick     map[string]*MarketGood `protobuf:"bytes,20,rep,name=MarketGoodsPerNick,proto3" json:"MarketGoodsPerNick,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	unknownFields          protoimpl.UnknownFields
	sizeCache              protoimpl.SizeCache
}

func (x *Base) Reset() {
	*x = Base{}
	mi := &file_main_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Base) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Base) ProtoMessage() {}

func (x *Base) ProtoReflect() protoreflect.Message {
	mi := &file_main_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Base.ProtoReflect.Descriptor instead.
func (*Base) Descriptor() ([]byte, []int) {
	return file_main_proto_rawDescGZIP(), []int{5}
}

func (x *Base) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Base) GetArchetypes() []string {
	if x != nil {
		return x.Archetypes
	}
	return nil
}

func (x *Base) GetNickname() string {
	if x != nil {
		return x.Nickname
	}
	return ""
}

func (x *Base) GetFactionName() string {
	if x != nil {
		return x.FactionName
	}
	return ""
}

func (x *Base) GetSystem() string {
	if x != nil {
		return x.System
	}
	return ""
}

func (x *Base) GetSystemNickname() string {
	if x != nil {
		return x.SystemNickname
	}
	return ""
}

func (x *Base) GetRegion() string {
	if x != nil {
		return x.Region
	}
	return ""
}

func (x *Base) GetStridName() int64 {
	if x != nil {
		return x.StridName
	}
	return 0
}

func (x *Base) GetInfocardID() int64 {
	if x != nil {
		return x.InfocardID
	}
	return 0
}

func (x *Base) GetFile() string {
	if x != nil {
		return x.File
	}
	return ""
}

func (x *Base) GetBGCSBaseRunBy() string {
	if x != nil {
		return x.BGCSBaseRunBy
	}
	return ""
}

func (x *Base) GetPos() *Pos {
	if x != nil {
		return x.Pos
	}
	return nil
}

func (x *Base) GetSectorCoord() string {
	if x != nil {
		return x.SectorCoord
	}
	return ""
}

func (x *Base) GetIsTransportUnreachable() bool {
	if x != nil {
		return x.IsTransportUnreachable
	}
	return false
}

func (x *Base) GetReachable() bool {
	if x != nil {
		return x.Reachable
	}
	return false
}

func (x *Base) GetIsPob() bool {
	if x != nil {
		return x.IsPob
	}
	return false
}

func (x *Base) GetMarketGoodsPerNick() map[string]*MarketGood {
	if x != nil {
		return x.MarketGoodsPerNick
	}
	return nil
}

type MiningInfo struct {
	state                 protoimpl.MessageState `protogen:"open.v1"`
	DynamicLootMin        int64                  `protobuf:"varint,1,opt,name=DynamicLootMin,proto3" json:"DynamicLootMin,omitempty"`
	DynamicLootMax        int64                  `protobuf:"varint,2,opt,name=DynamicLootMax,proto3" json:"DynamicLootMax,omitempty"`
	DynamicLootDifficulty int64                  `protobuf:"varint,3,opt,name=DynamicLootDifficulty,proto3" json:"DynamicLootDifficulty,omitempty"`
	MinedGood             *MarketGood            `protobuf:"bytes,4,opt,name=MinedGood,proto3,oneof" json:"MinedGood,omitempty"`
	unknownFields         protoimpl.UnknownFields
	sizeCache             protoimpl.SizeCache
}

func (x *MiningInfo) Reset() {
	*x = MiningInfo{}
	mi := &file_main_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MiningInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MiningInfo) ProtoMessage() {}

func (x *MiningInfo) ProtoReflect() protoreflect.Message {
	mi := &file_main_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MiningInfo.ProtoReflect.Descriptor instead.
func (*MiningInfo) Descriptor() ([]byte, []int) {
	return file_main_proto_rawDescGZIP(), []int{6}
}

func (x *MiningInfo) GetDynamicLootMin() int64 {
	if x != nil {
		return x.DynamicLootMin
	}
	return 0
}

func (x *MiningInfo) GetDynamicLootMax() int64 {
	if x != nil {
		return x.DynamicLootMax
	}
	return 0
}

func (x *MiningInfo) GetDynamicLootDifficulty() int64 {
	if x != nil {
		return x.DynamicLootDifficulty
	}
	return 0
}

func (x *MiningInfo) GetMinedGood() *MarketGood {
	if x != nil {
		return x.MinedGood
	}
	return nil
}

type MarketGood struct {
	state                  protoimpl.MessageState `protogen:"open.v1"`
	Nickname               string                 `protobuf:"bytes,1,opt,name=Nickname,proto3" json:"Nickname,omitempty"`
	ShipNickname           string                 `protobuf:"bytes,2,opt,name=ShipNickname,proto3" json:"ShipNickname,omitempty"`
	Name                   string                 `protobuf:"bytes,3,opt,name=Name,proto3" json:"Name,omitempty"`
	PriceBase              int64                  `protobuf:"varint,4,opt,name=PriceBase,proto3" json:"PriceBase,omitempty"`
	HpType                 string                 `protobuf:"bytes,5,opt,name=HpType,proto3" json:"HpType,omitempty"`
	Category               string                 `protobuf:"bytes,6,opt,name=Category,proto3" json:"Category,omitempty"`
	LevelRequired          int64                  `protobuf:"varint,7,opt,name=LevelRequired,proto3" json:"LevelRequired,omitempty"`
	RepRequired            float64                `protobuf:"fixed64,8,opt,name=RepRequired,proto3" json:"RepRequired,omitempty"`
	PriceBaseBuysFor       *int64                 `protobuf:"varint,9,opt,name=PriceBaseBuysFor,proto3,oneof" json:"PriceBaseBuysFor,omitempty"`
	PriceBaseSellsFor      int64                  `protobuf:"varint,10,opt,name=PriceBaseSellsFor,proto3" json:"PriceBaseSellsFor,omitempty"`
	Volume                 float64                `protobuf:"fixed64,11,opt,name=Volume,proto3" json:"Volume,omitempty"`
	ShipClass              int64                  `protobuf:"varint,12,opt,name=ShipClass,proto3" json:"ShipClass,omitempty"`
	BaseSells              bool                   `protobuf:"varint,13,opt,name=BaseSells,proto3" json:"BaseSells,omitempty"`
	IsServerSideOverride   bool                   `protobuf:"varint,14,opt,name=IsServerSideOverride,proto3" json:"IsServerSideOverride,omitempty"`
	NotBuyable             bool                   `protobuf:"varint,15,opt,name=NotBuyable,proto3" json:"NotBuyable,omitempty"`
	IsTransportUnreachable bool                   `protobuf:"varint,16,opt,name=IsTransportUnreachable,proto3" json:"IsTransportUnreachable,omitempty"`
	BaseNickname           string                 `protobuf:"bytes,17,opt,name=BaseNickname,proto3" json:"BaseNickname,omitempty"`
	BaseName               string                 `protobuf:"bytes,18,opt,name=BaseName,proto3" json:"BaseName,omitempty"`
	SystemName             string                 `protobuf:"bytes,19,opt,name=SystemName,proto3" json:"SystemName,omitempty"`
	Region                 string                 `protobuf:"bytes,20,opt,name=Region,proto3" json:"Region,omitempty"`
	FactionName            string                 `protobuf:"bytes,21,opt,name=FactionName,proto3" json:"FactionName,omitempty"`
	BasePos                *Pos                   `protobuf:"bytes,22,opt,name=BasePos,proto3" json:"BasePos,omitempty"`
	SectorCoord            string                 `protobuf:"bytes,23,opt,name=SectorCoord,proto3" json:"SectorCoord,omitempty"`
	unknownFields          protoimpl.UnknownFields
	sizeCache              protoimpl.SizeCache
}

func (x *MarketGood) Reset() {
	*x = MarketGood{}
	mi := &file_main_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MarketGood) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MarketGood) ProtoMessage() {}

func (x *MarketGood) ProtoReflect() protoreflect.Message {
	mi := &file_main_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MarketGood.ProtoReflect.Descriptor instead.
func (*MarketGood) Descriptor() ([]byte, []int) {
	return file_main_proto_rawDescGZIP(), []int{7}
}

func (x *MarketGood) GetNickname() string {
	if x != nil {
		return x.Nickname
	}
	return ""
}

func (x *MarketGood) GetShipNickname() string {
	if x != nil {
		return x.ShipNickname
	}
	return ""
}

func (x *MarketGood) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *MarketGood) GetPriceBase() int64 {
	if x != nil {
		return x.PriceBase
	}
	return 0
}

func (x *MarketGood) GetHpType() string {
	if x != nil {
		return x.HpType
	}
	return ""
}

func (x *MarketGood) GetCategory() string {
	if x != nil {
		return x.Category
	}
	return ""
}

func (x *MarketGood) GetLevelRequired() int64 {
	if x != nil {
		return x.LevelRequired
	}
	return 0
}

func (x *MarketGood) GetRepRequired() float64 {
	if x != nil {
		return x.RepRequired
	}
	return 0
}

func (x *MarketGood) GetPriceBaseBuysFor() int64 {
	if x != nil && x.PriceBaseBuysFor != nil {
		return *x.PriceBaseBuysFor
	}
	return 0
}

func (x *MarketGood) GetPriceBaseSellsFor() int64 {
	if x != nil {
		return x.PriceBaseSellsFor
	}
	return 0
}

func (x *MarketGood) GetVolume() float64 {
	if x != nil {
		return x.Volume
	}
	return 0
}

func (x *MarketGood) GetShipClass() int64 {
	if x != nil {
		return x.ShipClass
	}
	return 0
}

func (x *MarketGood) GetBaseSells() bool {
	if x != nil {
		return x.BaseSells
	}
	return false
}

func (x *MarketGood) GetIsServerSideOverride() bool {
	if x != nil {
		return x.IsServerSideOverride
	}
	return false
}

func (x *MarketGood) GetNotBuyable() bool {
	if x != nil {
		return x.NotBuyable
	}
	return false
}

func (x *MarketGood) GetIsTransportUnreachable() bool {
	if x != nil {
		return x.IsTransportUnreachable
	}
	return false
}

func (x *MarketGood) GetBaseNickname() string {
	if x != nil {
		return x.BaseNickname
	}
	return ""
}

func (x *MarketGood) GetBaseName() string {
	if x != nil {
		return x.BaseName
	}
	return ""
}

func (x *MarketGood) GetSystemName() string {
	if x != nil {
		return x.SystemName
	}
	return ""
}

func (x *MarketGood) GetRegion() string {
	if x != nil {
		return x.Region
	}
	return ""
}

func (x *MarketGood) GetFactionName() string {
	if x != nil {
		return x.FactionName
	}
	return ""
}

func (x *MarketGood) GetBasePos() *Pos {
	if x != nil {
		return x.BasePos
	}
	return nil
}

func (x *MarketGood) GetSectorCoord() string {
	if x != nil {
		return x.SectorCoord
	}
	return ""
}

type Pos struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	X             float64                `protobuf:"fixed64,1,opt,name=X,proto3" json:"X,omitempty"`
	Y             float64                `protobuf:"fixed64,2,opt,name=Y,proto3" json:"Y,omitempty"`
	Z             float64                `protobuf:"fixed64,3,opt,name=Z,proto3" json:"Z,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Pos) Reset() {
	*x = Pos{}
	mi := &file_main_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Pos) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Pos) ProtoMessage() {}

func (x *Pos) ProtoReflect() protoreflect.Message {
	mi := &file_main_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Pos.ProtoReflect.Descriptor instead.
func (*Pos) Descriptor() ([]byte, []int) {
	return file_main_proto_rawDescGZIP(), []int{8}
}

func (x *Pos) GetX() float64 {
	if x != nil {
		return x.X
	}
	return 0
}

func (x *Pos) GetY() float64 {
	if x != nil {
		return x.Y
	}
	return 0
}

func (x *Pos) GetZ() float64 {
	if x != nil {
		return x.Z
	}
	return 0
}

type GetCommoditiesInput struct {
	state              protoimpl.MessageState `protogen:"open.v1"`
	IncludeMarketGoods bool                   `protobuf:"varint,1,opt,name=IncludeMarketGoods,proto3" json:"IncludeMarketGoods,omitempty"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *GetCommoditiesInput) Reset() {
	*x = GetCommoditiesInput{}
	mi := &file_main_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetCommoditiesInput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCommoditiesInput) ProtoMessage() {}

func (x *GetCommoditiesInput) ProtoReflect() protoreflect.Message {
	mi := &file_main_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCommoditiesInput.ProtoReflect.Descriptor instead.
func (*GetCommoditiesInput) Descriptor() ([]byte, []int) {
	return file_main_proto_rawDescGZIP(), []int{9}
}

func (x *GetCommoditiesInput) GetIncludeMarketGoods() bool {
	if x != nil {
		return x.IncludeMarketGoods
	}
	return false
}

type GetCommoditiesReply struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Items         []*Commodity           `protobuf:"bytes,1,rep,name=Items,proto3" json:"Items,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetCommoditiesReply) Reset() {
	*x = GetCommoditiesReply{}
	mi := &file_main_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetCommoditiesReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCommoditiesReply) ProtoMessage() {}

func (x *GetCommoditiesReply) ProtoReflect() protoreflect.Message {
	mi := &file_main_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCommoditiesReply.ProtoReflect.Descriptor instead.
func (*GetCommoditiesReply) Descriptor() ([]byte, []int) {
	return file_main_proto_rawDescGZIP(), []int{10}
}

func (x *GetCommoditiesReply) GetItems() []*Commodity {
	if x != nil {
		return x.Items
	}
	return nil
}

type Commodity struct {
	state                 protoimpl.MessageState `protogen:"open.v1"`
	Nickname              string                 `protobuf:"bytes,1,opt,name=Nickname,proto3" json:"Nickname,omitempty"`
	PriceBase             int64                  `protobuf:"varint,2,opt,name=PriceBase,proto3" json:"PriceBase,omitempty"`
	Name                  string                 `protobuf:"bytes,3,opt,name=Name,proto3" json:"Name,omitempty"`
	Combinable            bool                   `protobuf:"varint,4,opt,name=Combinable,proto3" json:"Combinable,omitempty"`
	Volume                float64                `protobuf:"fixed64,5,opt,name=Volume,proto3" json:"Volume,omitempty"`
	ShipClass             int64                  `protobuf:"varint,6,opt,name=ShipClass,proto3" json:"ShipClass,omitempty"`
	NameID                int64                  `protobuf:"varint,7,opt,name=NameID,proto3" json:"NameID,omitempty"`
	InfocardID            int64                  `protobuf:"varint,8,opt,name=InfocardID,proto3" json:"InfocardID,omitempty"`
	Bases                 map[string]*MarketGood `protobuf:"bytes,9,rep,name=Bases,proto3" json:"Bases,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	PriceBestBaseBuysFor  int64                  `protobuf:"varint,10,opt,name=PriceBestBaseBuysFor,proto3" json:"PriceBestBaseBuysFor,omitempty"`
	PriceBestBaseSellsFor int64                  `protobuf:"varint,11,opt,name=PriceBestBaseSellsFor,proto3" json:"PriceBestBaseSellsFor,omitempty"`
	ProffitMargin         int64                  `protobuf:"varint,12,opt,name=ProffitMargin,proto3" json:"ProffitMargin,omitempty"`
	Mass                  float64                `protobuf:"fixed64,13,opt,name=Mass,proto3" json:"Mass,omitempty"`
	unknownFields         protoimpl.UnknownFields
	sizeCache             protoimpl.SizeCache
}

func (x *Commodity) Reset() {
	*x = Commodity{}
	mi := &file_main_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Commodity) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Commodity) ProtoMessage() {}

func (x *Commodity) ProtoReflect() protoreflect.Message {
	mi := &file_main_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Commodity.ProtoReflect.Descriptor instead.
func (*Commodity) Descriptor() ([]byte, []int) {
	return file_main_proto_rawDescGZIP(), []int{11}
}

func (x *Commodity) GetNickname() string {
	if x != nil {
		return x.Nickname
	}
	return ""
}

func (x *Commodity) GetPriceBase() int64 {
	if x != nil {
		return x.PriceBase
	}
	return 0
}

func (x *Commodity) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Commodity) GetCombinable() bool {
	if x != nil {
		return x.Combinable
	}
	return false
}

func (x *Commodity) GetVolume() float64 {
	if x != nil {
		return x.Volume
	}
	return 0
}

func (x *Commodity) GetShipClass() int64 {
	if x != nil {
		return x.ShipClass
	}
	return 0
}

func (x *Commodity) GetNameID() int64 {
	if x != nil {
		return x.NameID
	}
	return 0
}

func (x *Commodity) GetInfocardID() int64 {
	if x != nil {
		return x.InfocardID
	}
	return 0
}

func (x *Commodity) GetBases() map[string]*MarketGood {
	if x != nil {
		return x.Bases
	}
	return nil
}

func (x *Commodity) GetPriceBestBaseBuysFor() int64 {
	if x != nil {
		return x.PriceBestBaseBuysFor
	}
	return 0
}

func (x *Commodity) GetPriceBestBaseSellsFor() int64 {
	if x != nil {
		return x.PriceBestBaseSellsFor
	}
	return 0
}

func (x *Commodity) GetProffitMargin() int64 {
	if x != nil {
		return x.ProffitMargin
	}
	return 0
}

func (x *Commodity) GetMass() float64 {
	if x != nil {
		return x.Mass
	}
	return 0
}

type GetAmmoReply struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Items         []*Ammo                `protobuf:"bytes,1,rep,name=Items,proto3" json:"Items,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetAmmoReply) Reset() {
	*x = GetAmmoReply{}
	mi := &file_main_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetAmmoReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAmmoReply) ProtoMessage() {}

func (x *GetAmmoReply) ProtoReflect() protoreflect.Message {
	mi := &file_main_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAmmoReply.ProtoReflect.Descriptor instead.
func (*GetAmmoReply) Descriptor() ([]byte, []int) {
	return file_main_proto_rawDescGZIP(), []int{12}
}

func (x *GetAmmoReply) GetItems() []*Ammo {
	if x != nil {
		return x.Items
	}
	return nil
}

type Ammo struct {
	state               protoimpl.MessageState `protogen:"open.v1"`
	Name                string                 `protobuf:"bytes,1,opt,name=Name,proto3" json:"Name,omitempty"`
	Price               int64                  `protobuf:"varint,2,opt,name=Price,proto3" json:"Price,omitempty"`
	HitPts              int64                  `protobuf:"varint,3,opt,name=HitPts,proto3" json:"HitPts,omitempty"`
	Volume              float64                `protobuf:"fixed64,4,opt,name=Volume,proto3" json:"Volume,omitempty"`
	MunitionLifetime    float64                `protobuf:"fixed64,5,opt,name=MunitionLifetime,proto3" json:"MunitionLifetime,omitempty"`
	Nickname            string                 `protobuf:"bytes,6,opt,name=Nickname,proto3" json:"Nickname,omitempty"`
	NameID              int64                  `protobuf:"varint,7,opt,name=NameID,proto3" json:"NameID,omitempty"`
	InfoID              int64                  `protobuf:"varint,8,opt,name=InfoID,proto3" json:"InfoID,omitempty"`
	SeekerType          string                 `protobuf:"bytes,9,opt,name=SeekerType,proto3" json:"SeekerType,omitempty"`
	SeekerRange         int64                  `protobuf:"varint,10,opt,name=SeekerRange,proto3" json:"SeekerRange,omitempty"`
	SeekerFovDeg        int64                  `protobuf:"varint,11,opt,name=SeekerFovDeg,proto3" json:"SeekerFovDeg,omitempty"`
	Bases               map[string]*MarketGood `protobuf:"bytes,12,rep,name=Bases,proto3" json:"Bases,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	DiscoveryTechCompat *DiscoveryTechCompat   `protobuf:"bytes,13,opt,name=DiscoveryTechCompat,proto3,oneof" json:"DiscoveryTechCompat,omitempty"`
	AmountInCatridge    *int64                 `protobuf:"varint,14,opt,name=AmountInCatridge,proto3,oneof" json:"AmountInCatridge,omitempty"`
	MaxCatridges        *int64                 `protobuf:"varint,15,opt,name=MaxCatridges,proto3,oneof" json:"MaxCatridges,omitempty"`
	Mass                float64                `protobuf:"fixed64,16,opt,name=Mass,proto3" json:"Mass,omitempty"`
	unknownFields       protoimpl.UnknownFields
	sizeCache           protoimpl.SizeCache
}

func (x *Ammo) Reset() {
	*x = Ammo{}
	mi := &file_main_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Ammo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ammo) ProtoMessage() {}

func (x *Ammo) ProtoReflect() protoreflect.Message {
	mi := &file_main_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ammo.ProtoReflect.Descriptor instead.
func (*Ammo) Descriptor() ([]byte, []int) {
	return file_main_proto_rawDescGZIP(), []int{13}
}

func (x *Ammo) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Ammo) GetPrice() int64 {
	if x != nil {
		return x.Price
	}
	return 0
}

func (x *Ammo) GetHitPts() int64 {
	if x != nil {
		return x.HitPts
	}
	return 0
}

func (x *Ammo) GetVolume() float64 {
	if x != nil {
		return x.Volume
	}
	return 0
}

func (x *Ammo) GetMunitionLifetime() float64 {
	if x != nil {
		return x.MunitionLifetime
	}
	return 0
}

func (x *Ammo) GetNickname() string {
	if x != nil {
		return x.Nickname
	}
	return ""
}

func (x *Ammo) GetNameID() int64 {
	if x != nil {
		return x.NameID
	}
	return 0
}

func (x *Ammo) GetInfoID() int64 {
	if x != nil {
		return x.InfoID
	}
	return 0
}

func (x *Ammo) GetSeekerType() string {
	if x != nil {
		return x.SeekerType
	}
	return ""
}

func (x *Ammo) GetSeekerRange() int64 {
	if x != nil {
		return x.SeekerRange
	}
	return 0
}

func (x *Ammo) GetSeekerFovDeg() int64 {
	if x != nil {
		return x.SeekerFovDeg
	}
	return 0
}

func (x *Ammo) GetBases() map[string]*MarketGood {
	if x != nil {
		return x.Bases
	}
	return nil
}

func (x *Ammo) GetDiscoveryTechCompat() *DiscoveryTechCompat {
	if x != nil {
		return x.DiscoveryTechCompat
	}
	return nil
}

func (x *Ammo) GetAmountInCatridge() int64 {
	if x != nil && x.AmountInCatridge != nil {
		return *x.AmountInCatridge
	}
	return 0
}

func (x *Ammo) GetMaxCatridges() int64 {
	if x != nil && x.MaxCatridges != nil {
		return *x.MaxCatridges
	}
	return 0
}

func (x *Ammo) GetMass() float64 {
	if x != nil {
		return x.Mass
	}
	return 0
}

type DiscoveryTechCompat struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	TechcompatByID map[string]float64     `protobuf:"bytes,1,rep,name=TechcompatByID,proto3" json:"TechcompatByID,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"fixed64,2,opt,name=value"`
	TechCell       string                 `protobuf:"bytes,2,opt,name=TechCell,proto3" json:"TechCell,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *DiscoveryTechCompat) Reset() {
	*x = DiscoveryTechCompat{}
	mi := &file_main_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DiscoveryTechCompat) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DiscoveryTechCompat) ProtoMessage() {}

func (x *DiscoveryTechCompat) ProtoReflect() protoreflect.Message {
	mi := &file_main_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DiscoveryTechCompat.ProtoReflect.Descriptor instead.
func (*DiscoveryTechCompat) Descriptor() ([]byte, []int) {
	return file_main_proto_rawDescGZIP(), []int{14}
}

func (x *DiscoveryTechCompat) GetTechcompatByID() map[string]float64 {
	if x != nil {
		return x.TechcompatByID
	}
	return nil
}

func (x *DiscoveryTechCompat) GetTechCell() string {
	if x != nil {
		return x.TechCell
	}
	return ""
}

type TechCompatAnswer struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	TechCompat    *DiscoveryTechCompat   `protobuf:"bytes,1,opt,name=TechCompat,proto3,oneof" json:"TechCompat,omitempty"`
	Error         *string                `protobuf:"bytes,2,opt,name=Error,proto3,oneof" json:"Error,omitempty"`
	Nickname      string                 `protobuf:"bytes,3,opt,name=Nickname,proto3" json:"Nickname,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TechCompatAnswer) Reset() {
	*x = TechCompatAnswer{}
	mi := &file_main_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TechCompatAnswer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TechCompatAnswer) ProtoMessage() {}

func (x *TechCompatAnswer) ProtoReflect() protoreflect.Message {
	mi := &file_main_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TechCompatAnswer.ProtoReflect.Descriptor instead.
func (*TechCompatAnswer) Descriptor() ([]byte, []int) {
	return file_main_proto_rawDescGZIP(), []int{15}
}

func (x *TechCompatAnswer) GetTechCompat() *DiscoveryTechCompat {
	if x != nil {
		return x.TechCompat
	}
	return nil
}

func (x *TechCompatAnswer) GetError() string {
	if x != nil && x.Error != nil {
		return *x.Error
	}
	return ""
}

func (x *TechCompatAnswer) GetNickname() string {
	if x != nil {
		return x.Nickname
	}
	return ""
}

type GetTechCompatInput struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Nicknames     []string               `protobuf:"bytes,1,rep,name=Nicknames,proto3" json:"Nicknames,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetTechCompatInput) Reset() {
	*x = GetTechCompatInput{}
	mi := &file_main_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetTechCompatInput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTechCompatInput) ProtoMessage() {}

func (x *GetTechCompatInput) ProtoReflect() protoreflect.Message {
	mi := &file_main_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTechCompatInput.ProtoReflect.Descriptor instead.
func (*GetTechCompatInput) Descriptor() ([]byte, []int) {
	return file_main_proto_rawDescGZIP(), []int{16}
}

func (x *GetTechCompatInput) GetNicknames() []string {
	if x != nil {
		return x.Nicknames
	}
	return nil
}

type GetTechCompatReply struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Answers       []*TechCompatAnswer    `protobuf:"bytes,1,rep,name=Answers,proto3" json:"Answers,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetTechCompatReply) Reset() {
	*x = GetTechCompatReply{}
	mi := &file_main_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetTechCompatReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTechCompatReply) ProtoMessage() {}

func (x *GetTechCompatReply) ProtoReflect() protoreflect.Message {
	mi := &file_main_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTechCompatReply.ProtoReflect.Descriptor instead.
func (*GetTechCompatReply) Descriptor() ([]byte, []int) {
	return file_main_proto_rawDescGZIP(), []int{17}
}

func (x *GetTechCompatReply) GetAnswers() []*TechCompatAnswer {
	if x != nil {
		return x.Answers
	}
	return nil
}

type GetCounterMeasuresReply struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Items         []*CounterMeasure      `protobuf:"bytes,1,rep,name=Items,proto3" json:"Items,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetCounterMeasuresReply) Reset() {
	*x = GetCounterMeasuresReply{}
	mi := &file_main_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetCounterMeasuresReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCounterMeasuresReply) ProtoMessage() {}

func (x *GetCounterMeasuresReply) ProtoReflect() protoreflect.Message {
	mi := &file_main_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCounterMeasuresReply.ProtoReflect.Descriptor instead.
func (*GetCounterMeasuresReply) Descriptor() ([]byte, []int) {
	return file_main_proto_rawDescGZIP(), []int{18}
}

func (x *GetCounterMeasuresReply) GetItems() []*CounterMeasure {
	if x != nil {
		return x.Items
	}
	return nil
}

type CounterMeasure struct {
	state               protoimpl.MessageState `protogen:"open.v1"`
	Name                string                 `protobuf:"bytes,1,opt,name=Name,proto3" json:"Name,omitempty"`
	Price               int64                  `protobuf:"varint,2,opt,name=Price,proto3" json:"Price,omitempty"`
	HitPts              int64                  `protobuf:"varint,3,opt,name=HitPts,proto3" json:"HitPts,omitempty"`
	AIRange             int64                  `protobuf:"varint,4,opt,name=AIRange,proto3" json:"AIRange,omitempty"`
	Lifetime            int64                  `protobuf:"varint,5,opt,name=Lifetime,proto3" json:"Lifetime,omitempty"`
	Range               int64                  `protobuf:"varint,6,opt,name=Range,proto3" json:"Range,omitempty"`
	DiversionPctg       int64                  `protobuf:"varint,7,opt,name=DiversionPctg,proto3" json:"DiversionPctg,omitempty"`
	Lootable            bool                   `protobuf:"varint,8,opt,name=Lootable,proto3" json:"Lootable,omitempty"`
	Nickname            string                 `protobuf:"bytes,9,opt,name=Nickname,proto3" json:"Nickname,omitempty"`
	NameID              int64                  `protobuf:"varint,10,opt,name=NameID,proto3" json:"NameID,omitempty"`
	InfoID              int64                  `protobuf:"varint,11,opt,name=InfoID,proto3" json:"InfoID,omitempty"`
	Bases               map[string]*MarketGood `protobuf:"bytes,12,rep,name=Bases,proto3" json:"Bases,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	DiscoveryTechCompat *DiscoveryTechCompat   `protobuf:"bytes,13,opt,name=DiscoveryTechCompat,proto3,oneof" json:"DiscoveryTechCompat,omitempty"`
	AmountInCatridge    *int64                 `protobuf:"varint,14,opt,name=AmountInCatridge,proto3,oneof" json:"AmountInCatridge,omitempty"`
	MaxCatridges        *int64                 `protobuf:"varint,15,opt,name=MaxCatridges,proto3,oneof" json:"MaxCatridges,omitempty"`
	Mass                float64                `protobuf:"fixed64,16,opt,name=Mass,proto3" json:"Mass,omitempty"`
	unknownFields       protoimpl.UnknownFields
	sizeCache           protoimpl.SizeCache
}

func (x *CounterMeasure) Reset() {
	*x = CounterMeasure{}
	mi := &file_main_proto_msgTypes[19]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CounterMeasure) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CounterMeasure) ProtoMessage() {}

func (x *CounterMeasure) ProtoReflect() protoreflect.Message {
	mi := &file_main_proto_msgTypes[19]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CounterMeasure.ProtoReflect.Descriptor instead.
func (*CounterMeasure) Descriptor() ([]byte, []int) {
	return file_main_proto_rawDescGZIP(), []int{19}
}

func (x *CounterMeasure) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CounterMeasure) GetPrice() int64 {
	if x != nil {
		return x.Price
	}
	return 0
}

func (x *CounterMeasure) GetHitPts() int64 {
	if x != nil {
		return x.HitPts
	}
	return 0
}

func (x *CounterMeasure) GetAIRange() int64 {
	if x != nil {
		return x.AIRange
	}
	return 0
}

func (x *CounterMeasure) GetLifetime() int64 {
	if x != nil {
		return x.Lifetime
	}
	return 0
}

func (x *CounterMeasure) GetRange() int64 {
	if x != nil {
		return x.Range
	}
	return 0
}

func (x *CounterMeasure) GetDiversionPctg() int64 {
	if x != nil {
		return x.DiversionPctg
	}
	return 0
}

func (x *CounterMeasure) GetLootable() bool {
	if x != nil {
		return x.Lootable
	}
	return false
}

func (x *CounterMeasure) GetNickname() string {
	if x != nil {
		return x.Nickname
	}
	return ""
}

func (x *CounterMeasure) GetNameID() int64 {
	if x != nil {
		return x.NameID
	}
	return 0
}

func (x *CounterMeasure) GetInfoID() int64 {
	if x != nil {
		return x.InfoID
	}
	return 0
}

func (x *CounterMeasure) GetBases() map[string]*MarketGood {
	if x != nil {
		return x.Bases
	}
	return nil
}

func (x *CounterMeasure) GetDiscoveryTechCompat() *DiscoveryTechCompat {
	if x != nil {
		return x.DiscoveryTechCompat
	}
	return nil
}

func (x *CounterMeasure) GetAmountInCatridge() int64 {
	if x != nil && x.AmountInCatridge != nil {
		return *x.AmountInCatridge
	}
	return 0
}

func (x *CounterMeasure) GetMaxCatridges() int64 {
	if x != nil && x.MaxCatridges != nil {
		return *x.MaxCatridges
	}
	return 0
}

func (x *CounterMeasure) GetMass() float64 {
	if x != nil {
		return x.Mass
	}
	return 0
}

type GetEnginesReply struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Items         []*Engine              `protobuf:"bytes,1,rep,name=Items,proto3" json:"Items,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetEnginesReply) Reset() {
	*x = GetEnginesReply{}
	mi := &file_main_proto_msgTypes[20]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetEnginesReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetEnginesReply) ProtoMessage() {}

func (x *GetEnginesReply) ProtoReflect() protoreflect.Message {
	mi := &file_main_proto_msgTypes[20]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetEnginesReply.ProtoReflect.Descriptor instead.
func (*GetEnginesReply) Descriptor() ([]byte, []int) {
	return file_main_proto_rawDescGZIP(), []int{20}
}

func (x *GetEnginesReply) GetItems() []*Engine {
	if x != nil {
		return x.Items
	}
	return nil
}

type Engine struct {
	state               protoimpl.MessageState `protogen:"open.v1"`
	Name                string                 `protobuf:"bytes,1,opt,name=Name,proto3" json:"Name,omitempty"`
	Price               int64                  `protobuf:"varint,2,opt,name=Price,proto3" json:"Price,omitempty"`
	CruiseSpeed         int64                  `protobuf:"varint,3,opt,name=CruiseSpeed,proto3" json:"CruiseSpeed,omitempty"`
	CruiseChargeTime    int64                  `protobuf:"varint,4,opt,name=CruiseChargeTime,proto3" json:"CruiseChargeTime,omitempty"`
	LinearDrag          int64                  `protobuf:"varint,5,opt,name=LinearDrag,proto3" json:"LinearDrag,omitempty"`
	MaxForce            int64                  `protobuf:"varint,6,opt,name=MaxForce,proto3" json:"MaxForce,omitempty"`
	ReverseFraction     float64                `protobuf:"fixed64,7,opt,name=ReverseFraction,proto3" json:"ReverseFraction,omitempty"`
	ImpulseSpeed        float64                `protobuf:"fixed64,8,opt,name=ImpulseSpeed,proto3" json:"ImpulseSpeed,omitempty"`
	HpType              string                 `protobuf:"bytes,9,opt,name=HpType,proto3" json:"HpType,omitempty"`
	FlameEffect         string                 `protobuf:"bytes,10,opt,name=FlameEffect,proto3" json:"FlameEffect,omitempty"`
	TrailEffect         string                 `protobuf:"bytes,11,opt,name=TrailEffect,proto3" json:"TrailEffect,omitempty"`
	Nickname            string                 `protobuf:"bytes,12,opt,name=Nickname,proto3" json:"Nickname,omitempty"`
	NameID              int64                  `protobuf:"varint,13,opt,name=NameID,proto3" json:"NameID,omitempty"`
	InfoID              int64                  `protobuf:"varint,14,opt,name=InfoID,proto3" json:"InfoID,omitempty"`
	Bases               map[string]*MarketGood `protobuf:"bytes,15,rep,name=Bases,proto3" json:"Bases,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	DiscoveryTechCompat *DiscoveryTechCompat   `protobuf:"bytes,16,opt,name=DiscoveryTechCompat,proto3,oneof" json:"DiscoveryTechCompat,omitempty"`
	Mass                float64                `protobuf:"fixed64,17,opt,name=Mass,proto3" json:"Mass,omitempty"`
	unknownFields       protoimpl.UnknownFields
	sizeCache           protoimpl.SizeCache
}

func (x *Engine) Reset() {
	*x = Engine{}
	mi := &file_main_proto_msgTypes[21]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Engine) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Engine) ProtoMessage() {}

func (x *Engine) ProtoReflect() protoreflect.Message {
	mi := &file_main_proto_msgTypes[21]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Engine.ProtoReflect.Descriptor instead.
func (*Engine) Descriptor() ([]byte, []int) {
	return file_main_proto_rawDescGZIP(), []int{21}
}

func (x *Engine) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Engine) GetPrice() int64 {
	if x != nil {
		return x.Price
	}
	return 0
}

func (x *Engine) GetCruiseSpeed() int64 {
	if x != nil {
		return x.CruiseSpeed
	}
	return 0
}

func (x *Engine) GetCruiseChargeTime() int64 {
	if x != nil {
		return x.CruiseChargeTime
	}
	return 0
}

func (x *Engine) GetLinearDrag() int64 {
	if x != nil {
		return x.LinearDrag
	}
	return 0
}

func (x *Engine) GetMaxForce() int64 {
	if x != nil {
		return x.MaxForce
	}
	return 0
}

func (x *Engine) GetReverseFraction() float64 {
	if x != nil {
		return x.ReverseFraction
	}
	return 0
}

func (x *Engine) GetImpulseSpeed() float64 {
	if x != nil {
		return x.ImpulseSpeed
	}
	return 0
}

func (x *Engine) GetHpType() string {
	if x != nil {
		return x.HpType
	}
	return ""
}

func (x *Engine) GetFlameEffect() string {
	if x != nil {
		return x.FlameEffect
	}
	return ""
}

func (x *Engine) GetTrailEffect() string {
	if x != nil {
		return x.TrailEffect
	}
	return ""
}

func (x *Engine) GetNickname() string {
	if x != nil {
		return x.Nickname
	}
	return ""
}

func (x *Engine) GetNameID() int64 {
	if x != nil {
		return x.NameID
	}
	return 0
}

func (x *Engine) GetInfoID() int64 {
	if x != nil {
		return x.InfoID
	}
	return 0
}

func (x *Engine) GetBases() map[string]*MarketGood {
	if x != nil {
		return x.Bases
	}
	return nil
}

func (x *Engine) GetDiscoveryTechCompat() *DiscoveryTechCompat {
	if x != nil {
		return x.DiscoveryTechCompat
	}
	return nil
}

func (x *Engine) GetMass() float64 {
	if x != nil {
		return x.Mass
	}
	return 0
}

type GetFactionsReply struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Items         []*Faction             `protobuf:"bytes,1,rep,name=Items,proto3" json:"Items,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetFactionsReply) Reset() {
	*x = GetFactionsReply{}
	mi := &file_main_proto_msgTypes[22]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetFactionsReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetFactionsReply) ProtoMessage() {}

func (x *GetFactionsReply) ProtoReflect() protoreflect.Message {
	mi := &file_main_proto_msgTypes[22]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetFactionsReply.ProtoReflect.Descriptor instead.
func (*GetFactionsReply) Descriptor() ([]byte, []int) {
	return file_main_proto_rawDescGZIP(), []int{22}
}

func (x *GetFactionsReply) GetItems() []*Faction {
	if x != nil {
		return x.Items
	}
	return nil
}

type Faction struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Faction) Reset() {
	*x = Faction{}
	mi := &file_main_proto_msgTypes[23]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Faction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Faction) ProtoMessage() {}

func (x *Faction) ProtoReflect() protoreflect.Message {
	mi := &file_main_proto_msgTypes[23]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Faction.ProtoReflect.Descriptor instead.
func (*Faction) Descriptor() ([]byte, []int) {
	return file_main_proto_rawDescGZIP(), []int{23}
}

type GetGunsReply struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Items         []*Gun                 `protobuf:"bytes,1,rep,name=Items,proto3" json:"Items,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetGunsReply) Reset() {
	*x = GetGunsReply{}
	mi := &file_main_proto_msgTypes[24]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetGunsReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetGunsReply) ProtoMessage() {}

func (x *GetGunsReply) ProtoReflect() protoreflect.Message {
	mi := &file_main_proto_msgTypes[24]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetGunsReply.ProtoReflect.Descriptor instead.
func (*GetGunsReply) Descriptor() ([]byte, []int) {
	return file_main_proto_rawDescGZIP(), []int{24}
}

func (x *GetGunsReply) GetItems() []*Gun {
	if x != nil {
		return x.Items
	}
	return nil
}

type Gun struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Gun) Reset() {
	*x = Gun{}
	mi := &file_main_proto_msgTypes[25]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Gun) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Gun) ProtoMessage() {}

func (x *Gun) ProtoReflect() protoreflect.Message {
	mi := &file_main_proto_msgTypes[25]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Gun.ProtoReflect.Descriptor instead.
func (*Gun) Descriptor() ([]byte, []int) {
	return file_main_proto_rawDescGZIP(), []int{25}
}

type GetMinesReply struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Items         []*Mine                `protobuf:"bytes,1,rep,name=Items,proto3" json:"Items,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetMinesReply) Reset() {
	*x = GetMinesReply{}
	mi := &file_main_proto_msgTypes[26]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetMinesReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetMinesReply) ProtoMessage() {}

func (x *GetMinesReply) ProtoReflect() protoreflect.Message {
	mi := &file_main_proto_msgTypes[26]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetMinesReply.ProtoReflect.Descriptor instead.
func (*GetMinesReply) Descriptor() ([]byte, []int) {
	return file_main_proto_rawDescGZIP(), []int{26}
}

func (x *GetMinesReply) GetItems() []*Mine {
	if x != nil {
		return x.Items
	}
	return nil
}

type Mine struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Mine) Reset() {
	*x = Mine{}
	mi := &file_main_proto_msgTypes[27]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Mine) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Mine) ProtoMessage() {}

func (x *Mine) ProtoReflect() protoreflect.Message {
	mi := &file_main_proto_msgTypes[27]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Mine.ProtoReflect.Descriptor instead.
func (*Mine) Descriptor() ([]byte, []int) {
	return file_main_proto_rawDescGZIP(), []int{27}
}

type GetScannersReply struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Items         []*Scanner             `protobuf:"bytes,1,rep,name=Items,proto3" json:"Items,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetScannersReply) Reset() {
	*x = GetScannersReply{}
	mi := &file_main_proto_msgTypes[28]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetScannersReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetScannersReply) ProtoMessage() {}

func (x *GetScannersReply) ProtoReflect() protoreflect.Message {
	mi := &file_main_proto_msgTypes[28]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetScannersReply.ProtoReflect.Descriptor instead.
func (*GetScannersReply) Descriptor() ([]byte, []int) {
	return file_main_proto_rawDescGZIP(), []int{28}
}

func (x *GetScannersReply) GetItems() []*Scanner {
	if x != nil {
		return x.Items
	}
	return nil
}

type Scanner struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Scanner) Reset() {
	*x = Scanner{}
	mi := &file_main_proto_msgTypes[29]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Scanner) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Scanner) ProtoMessage() {}

func (x *Scanner) ProtoReflect() protoreflect.Message {
	mi := &file_main_proto_msgTypes[29]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Scanner.ProtoReflect.Descriptor instead.
func (*Scanner) Descriptor() ([]byte, []int) {
	return file_main_proto_rawDescGZIP(), []int{29}
}

type GetShieldsReply struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Items         []*Shield              `protobuf:"bytes,1,rep,name=Items,proto3" json:"Items,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetShieldsReply) Reset() {
	*x = GetShieldsReply{}
	mi := &file_main_proto_msgTypes[30]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetShieldsReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetShieldsReply) ProtoMessage() {}

func (x *GetShieldsReply) ProtoReflect() protoreflect.Message {
	mi := &file_main_proto_msgTypes[30]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetShieldsReply.ProtoReflect.Descriptor instead.
func (*GetShieldsReply) Descriptor() ([]byte, []int) {
	return file_main_proto_rawDescGZIP(), []int{30}
}

func (x *GetShieldsReply) GetItems() []*Shield {
	if x != nil {
		return x.Items
	}
	return nil
}

type Shield struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Shield) Reset() {
	*x = Shield{}
	mi := &file_main_proto_msgTypes[31]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Shield) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Shield) ProtoMessage() {}

func (x *Shield) ProtoReflect() protoreflect.Message {
	mi := &file_main_proto_msgTypes[31]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Shield.ProtoReflect.Descriptor instead.
func (*Shield) Descriptor() ([]byte, []int) {
	return file_main_proto_rawDescGZIP(), []int{31}
}

type GetShipsReply struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Items         []*Ship                `protobuf:"bytes,1,rep,name=Items,proto3" json:"Items,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetShipsReply) Reset() {
	*x = GetShipsReply{}
	mi := &file_main_proto_msgTypes[32]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetShipsReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetShipsReply) ProtoMessage() {}

func (x *GetShipsReply) ProtoReflect() protoreflect.Message {
	mi := &file_main_proto_msgTypes[32]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetShipsReply.ProtoReflect.Descriptor instead.
func (*GetShipsReply) Descriptor() ([]byte, []int) {
	return file_main_proto_rawDescGZIP(), []int{32}
}

func (x *GetShipsReply) GetItems() []*Ship {
	if x != nil {
		return x.Items
	}
	return nil
}

type Ship struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Ship) Reset() {
	*x = Ship{}
	mi := &file_main_proto_msgTypes[33]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Ship) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ship) ProtoMessage() {}

func (x *Ship) ProtoReflect() protoreflect.Message {
	mi := &file_main_proto_msgTypes[33]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ship.ProtoReflect.Descriptor instead.
func (*Ship) Descriptor() ([]byte, []int) {
	return file_main_proto_rawDescGZIP(), []int{33}
}

type GetThrustersReply struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Items         []*Thruster            `protobuf:"bytes,1,rep,name=Items,proto3" json:"Items,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetThrustersReply) Reset() {
	*x = GetThrustersReply{}
	mi := &file_main_proto_msgTypes[34]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetThrustersReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetThrustersReply) ProtoMessage() {}

func (x *GetThrustersReply) ProtoReflect() protoreflect.Message {
	mi := &file_main_proto_msgTypes[34]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetThrustersReply.ProtoReflect.Descriptor instead.
func (*GetThrustersReply) Descriptor() ([]byte, []int) {
	return file_main_proto_rawDescGZIP(), []int{34}
}

func (x *GetThrustersReply) GetItems() []*Thruster {
	if x != nil {
		return x.Items
	}
	return nil
}

type Thruster struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Thruster) Reset() {
	*x = Thruster{}
	mi := &file_main_proto_msgTypes[35]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Thruster) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Thruster) ProtoMessage() {}

func (x *Thruster) ProtoReflect() protoreflect.Message {
	mi := &file_main_proto_msgTypes[35]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Thruster.ProtoReflect.Descriptor instead.
func (*Thruster) Descriptor() ([]byte, []int) {
	return file_main_proto_rawDescGZIP(), []int{35}
}

type GetTractorsReply struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Items         []*Tractor             `protobuf:"bytes,1,rep,name=Items,proto3" json:"Items,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetTractorsReply) Reset() {
	*x = GetTractorsReply{}
	mi := &file_main_proto_msgTypes[36]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetTractorsReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTractorsReply) ProtoMessage() {}

func (x *GetTractorsReply) ProtoReflect() protoreflect.Message {
	mi := &file_main_proto_msgTypes[36]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTractorsReply.ProtoReflect.Descriptor instead.
func (*GetTractorsReply) Descriptor() ([]byte, []int) {
	return file_main_proto_rawDescGZIP(), []int{36}
}

func (x *GetTractorsReply) GetItems() []*Tractor {
	if x != nil {
		return x.Items
	}
	return nil
}

type Tractor struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Tractor) Reset() {
	*x = Tractor{}
	mi := &file_main_proto_msgTypes[37]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Tractor) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Tractor) ProtoMessage() {}

func (x *Tractor) ProtoReflect() protoreflect.Message {
	mi := &file_main_proto_msgTypes[37]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Tractor.ProtoReflect.Descriptor instead.
func (*Tractor) Descriptor() ([]byte, []int) {
	return file_main_proto_rawDescGZIP(), []int{37}
}

type GetHashesReply struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetHashesReply) Reset() {
	*x = GetHashesReply{}
	mi := &file_main_proto_msgTypes[38]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetHashesReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetHashesReply) ProtoMessage() {}

func (x *GetHashesReply) ProtoReflect() protoreflect.Message {
	mi := &file_main_proto_msgTypes[38]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetHashesReply.ProtoReflect.Descriptor instead.
func (*GetHashesReply) Descriptor() ([]byte, []int) {
	return file_main_proto_rawDescGZIP(), []int{38}
}

type GetPoBsReply struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Items         []*PoB                 `protobuf:"bytes,1,rep,name=Items,proto3" json:"Items,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetPoBsReply) Reset() {
	*x = GetPoBsReply{}
	mi := &file_main_proto_msgTypes[39]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetPoBsReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPoBsReply) ProtoMessage() {}

func (x *GetPoBsReply) ProtoReflect() protoreflect.Message {
	mi := &file_main_proto_msgTypes[39]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPoBsReply.ProtoReflect.Descriptor instead.
func (*GetPoBsReply) Descriptor() ([]byte, []int) {
	return file_main_proto_rawDescGZIP(), []int{39}
}

func (x *GetPoBsReply) GetItems() []*PoB {
	if x != nil {
		return x.Items
	}
	return nil
}

type PoB struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PoB) Reset() {
	*x = PoB{}
	mi := &file_main_proto_msgTypes[40]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PoB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PoB) ProtoMessage() {}

func (x *PoB) ProtoReflect() protoreflect.Message {
	mi := &file_main_proto_msgTypes[40]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PoB.ProtoReflect.Descriptor instead.
func (*PoB) Descriptor() ([]byte, []int) {
	return file_main_proto_rawDescGZIP(), []int{40}
}

type GetPoBGoodsReply struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Items         []*PoBGood             `protobuf:"bytes,1,rep,name=Items,proto3" json:"Items,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetPoBGoodsReply) Reset() {
	*x = GetPoBGoodsReply{}
	mi := &file_main_proto_msgTypes[41]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetPoBGoodsReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPoBGoodsReply) ProtoMessage() {}

func (x *GetPoBGoodsReply) ProtoReflect() protoreflect.Message {
	mi := &file_main_proto_msgTypes[41]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPoBGoodsReply.ProtoReflect.Descriptor instead.
func (*GetPoBGoodsReply) Descriptor() ([]byte, []int) {
	return file_main_proto_rawDescGZIP(), []int{41}
}

func (x *GetPoBGoodsReply) GetItems() []*PoBGood {
	if x != nil {
		return x.Items
	}
	return nil
}

type PoBGood struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PoBGood) Reset() {
	*x = PoBGood{}
	mi := &file_main_proto_msgTypes[42]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PoBGood) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PoBGood) ProtoMessage() {}

func (x *PoBGood) ProtoReflect() protoreflect.Message {
	mi := &file_main_proto_msgTypes[42]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PoBGood.ProtoReflect.Descriptor instead.
func (*PoBGood) Descriptor() ([]byte, []int) {
	return file_main_proto_rawDescGZIP(), []int{42}
}

type GetGraphPathsInput struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetGraphPathsInput) Reset() {
	*x = GetGraphPathsInput{}
	mi := &file_main_proto_msgTypes[43]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetGraphPathsInput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetGraphPathsInput) ProtoMessage() {}

func (x *GetGraphPathsInput) ProtoReflect() protoreflect.Message {
	mi := &file_main_proto_msgTypes[43]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetGraphPathsInput.ProtoReflect.Descriptor instead.
func (*GetGraphPathsInput) Descriptor() ([]byte, []int) {
	return file_main_proto_rawDescGZIP(), []int{43}
}

type GetGraphPathsReply struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetGraphPathsReply) Reset() {
	*x = GetGraphPathsReply{}
	mi := &file_main_proto_msgTypes[44]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetGraphPathsReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetGraphPathsReply) ProtoMessage() {}

func (x *GetGraphPathsReply) ProtoReflect() protoreflect.Message {
	mi := &file_main_proto_msgTypes[44]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetGraphPathsReply.ProtoReflect.Descriptor instead.
func (*GetGraphPathsReply) Descriptor() ([]byte, []int) {
	return file_main_proto_rawDescGZIP(), []int{44}
}

type GetPoBBasesReply struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetPoBBasesReply) Reset() {
	*x = GetPoBBasesReply{}
	mi := &file_main_proto_msgTypes[45]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetPoBBasesReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPoBBasesReply) ProtoMessage() {}

func (x *GetPoBBasesReply) ProtoReflect() protoreflect.Message {
	mi := &file_main_proto_msgTypes[45]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPoBBasesReply.ProtoReflect.Descriptor instead.
func (*GetPoBBasesReply) Descriptor() ([]byte, []int) {
	return file_main_proto_rawDescGZIP(), []int{45}
}

var File_main_proto protoreflect.FileDescriptor

var file_main_proto_rawDesc = string([]byte{
	0x0a, 0x0a, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x09, 0x73, 0x74,
	0x61, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x07, 0x0a, 0x05, 0x45, 0x6d, 0x70, 0x74, 0x79,
	0x22, 0x2c, 0x0a, 0x0b, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12,
	0x1d, 0x0a, 0x0a, 0x69, 0x73, 0x5f, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x09, 0x69, 0x73, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x79, 0x22, 0x71,
	0x0a, 0x11, 0x47, 0x65, 0x74, 0x45, 0x71, 0x75, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x6e,
	0x70, 0x75, 0x74, 0x12, 0x2e, 0x0a, 0x12, 0x49, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x4d, 0x61,
	0x72, 0x6b, 0x65, 0x74, 0x47, 0x6f, 0x6f, 0x64, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x12, 0x49, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x47, 0x6f,
	0x6f, 0x64, 0x73, 0x12, 0x2c, 0x0a, 0x11, 0x49, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x54, 0x65,
	0x63, 0x68, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x11,
	0x49, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x54, 0x65, 0x63, 0x68, 0x43, 0x6f, 0x6d, 0x70, 0x61,
	0x74, 0x22, 0x3f, 0x0a, 0x0d, 0x47, 0x65, 0x74, 0x42, 0x61, 0x73, 0x65, 0x73, 0x49, 0x6e, 0x70,
	0x75, 0x74, 0x12, 0x2e, 0x0a, 0x12, 0x49, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x4d, 0x61, 0x72,
	0x6b, 0x65, 0x74, 0x47, 0x6f, 0x6f, 0x64, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x12,
	0x49, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x47, 0x6f, 0x6f,
	0x64, 0x73, 0x22, 0x36, 0x0a, 0x0d, 0x47, 0x65, 0x74, 0x42, 0x61, 0x73, 0x65, 0x73, 0x52, 0x65,
	0x70, 0x6c, 0x79, 0x12, 0x25, 0x0a, 0x05, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42,
	0x61, 0x73, 0x65, 0x52, 0x05, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x22, 0xb2, 0x05, 0x0a, 0x04, 0x42,
	0x61, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x41, 0x72, 0x63, 0x68, 0x65,
	0x74, 0x79, 0x70, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x41, 0x72, 0x63,
	0x68, 0x65, 0x74, 0x79, 0x70, 0x65, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x4e, 0x69, 0x63, 0x6b, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x4e, 0x69, 0x63, 0x6b, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x46, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x61,
	0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x46, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x12, 0x26, 0x0a,
	0x0e, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x4e, 0x69, 0x63, 0x6b, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x4e, 0x69, 0x63,
	0x6b, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x12, 0x1c, 0x0a,
	0x09, 0x53, 0x74, 0x72, 0x69, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x09, 0x53, 0x74, 0x72, 0x69, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x49,
	0x6e, 0x66, 0x6f, 0x63, 0x61, 0x72, 0x64, 0x49, 0x44, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0a, 0x49, 0x6e, 0x66, 0x6f, 0x63, 0x61, 0x72, 0x64, 0x49, 0x44, 0x12, 0x12, 0x0a, 0x04, 0x46,
	0x69, 0x6c, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x46, 0x69, 0x6c, 0x65, 0x12,
	0x27, 0x0a, 0x10, 0x42, 0x47, 0x43, 0x53, 0x5f, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x72, 0x75, 0x6e,
	0x5f, 0x62, 0x79, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x42, 0x47, 0x43, 0x53, 0x42,
	0x61, 0x73, 0x65, 0x52, 0x75, 0x6e, 0x42, 0x79, 0x12, 0x20, 0x0a, 0x03, 0x50, 0x6f, 0x73, 0x18,
	0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x50, 0x6f, 0x73, 0x52, 0x03, 0x50, 0x6f, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x53, 0x65,
	0x63, 0x74, 0x6f, 0x72, 0x43, 0x6f, 0x6f, 0x72, 0x64, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x53, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x43, 0x6f, 0x6f, 0x72, 0x64, 0x12, 0x36, 0x0a, 0x16,
	0x49, 0x73, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x55, 0x6e, 0x72, 0x65, 0x61,
	0x63, 0x68, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x08, 0x52, 0x16, 0x49, 0x73,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x55, 0x6e, 0x72, 0x65, 0x61, 0x63, 0x68,
	0x61, 0x62, 0x6c, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x52, 0x65, 0x61, 0x63, 0x68, 0x61, 0x62, 0x6c,
	0x65, 0x18, 0x12, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x52, 0x65, 0x61, 0x63, 0x68, 0x61, 0x62,
	0x6c, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x49, 0x73, 0x50, 0x6f, 0x62, 0x18, 0x13, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x05, 0x49, 0x73, 0x50, 0x6f, 0x62, 0x12, 0x57, 0x0a, 0x12, 0x4d, 0x61, 0x72, 0x6b,
	0x65, 0x74, 0x47, 0x6f, 0x6f, 0x64, 0x73, 0x50, 0x65, 0x72, 0x4e, 0x69, 0x63, 0x6b, 0x18, 0x14,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x42, 0x61, 0x73, 0x65, 0x2e, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x47, 0x6f, 0x6f, 0x64,
	0x73, 0x50, 0x65, 0x72, 0x4e, 0x69, 0x63, 0x6b, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x12, 0x4d,
	0x61, 0x72, 0x6b, 0x65, 0x74, 0x47, 0x6f, 0x6f, 0x64, 0x73, 0x50, 0x65, 0x72, 0x4e, 0x69, 0x63,
	0x6b, 0x1a, 0x5c, 0x0a, 0x17, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x47, 0x6f, 0x6f, 0x64, 0x73,
	0x50, 0x65, 0x72, 0x4e, 0x69, 0x63, 0x6b, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2b,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e,
	0x73, 0x74, 0x61, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74,
	0x47, 0x6f, 0x6f, 0x64, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22,
	0xda, 0x01, 0x0a, 0x0a, 0x4d, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x26,
	0x0a, 0x0e, 0x44, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x4c, 0x6f, 0x6f, 0x74, 0x4d, 0x69, 0x6e,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x44, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x4c,
	0x6f, 0x6f, 0x74, 0x4d, 0x69, 0x6e, 0x12, 0x26, 0x0a, 0x0e, 0x44, 0x79, 0x6e, 0x61, 0x6d, 0x69,
	0x63, 0x4c, 0x6f, 0x6f, 0x74, 0x4d, 0x61, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e,
	0x44, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x4c, 0x6f, 0x6f, 0x74, 0x4d, 0x61, 0x78, 0x12, 0x34,
	0x0a, 0x15, 0x44, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x4c, 0x6f, 0x6f, 0x74, 0x44, 0x69, 0x66,
	0x66, 0x69, 0x63, 0x75, 0x6c, 0x74, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x15, 0x44,
	0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x4c, 0x6f, 0x6f, 0x74, 0x44, 0x69, 0x66, 0x66, 0x69, 0x63,
	0x75, 0x6c, 0x74, 0x79, 0x12, 0x38, 0x0a, 0x09, 0x4d, 0x69, 0x6e, 0x65, 0x64, 0x47, 0x6f, 0x6f,
	0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x47, 0x6f, 0x6f, 0x64, 0x48, 0x00,
	0x52, 0x09, 0x4d, 0x69, 0x6e, 0x65, 0x64, 0x47, 0x6f, 0x6f, 0x64, 0x88, 0x01, 0x01, 0x42, 0x0c,
	0x0a, 0x0a, 0x5f, 0x4d, 0x69, 0x6e, 0x65, 0x64, 0x47, 0x6f, 0x6f, 0x64, 0x22, 0xb4, 0x06, 0x0a,
	0x0a, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x47, 0x6f, 0x6f, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x4e,
	0x69, 0x63, 0x6b, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x4e,
	0x69, 0x63, 0x6b, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x53, 0x68, 0x69, 0x70, 0x4e,
	0x69, 0x63, 0x6b, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x53,
	0x68, 0x69, 0x70, 0x4e, 0x69, 0x63, 0x6b, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x4e,
	0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x1c, 0x0a, 0x09, 0x50, 0x72, 0x69, 0x63, 0x65, 0x42, 0x61, 0x73, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x09, 0x50, 0x72, 0x69, 0x63, 0x65, 0x42, 0x61, 0x73, 0x65, 0x12, 0x16, 0x0a,
	0x06, 0x48, 0x70, 0x54, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x48,
	0x70, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72,
	0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72,
	0x79, 0x12, 0x24, 0x0a, 0x0d, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72,
	0x65, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x52,
	0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x52, 0x65, 0x70, 0x52, 0x65,
	0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0b, 0x52, 0x65,
	0x70, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x12, 0x2f, 0x0a, 0x10, 0x50, 0x72, 0x69,
	0x63, 0x65, 0x42, 0x61, 0x73, 0x65, 0x42, 0x75, 0x79, 0x73, 0x46, 0x6f, 0x72, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x03, 0x48, 0x00, 0x52, 0x10, 0x50, 0x72, 0x69, 0x63, 0x65, 0x42, 0x61, 0x73, 0x65,
	0x42, 0x75, 0x79, 0x73, 0x46, 0x6f, 0x72, 0x88, 0x01, 0x01, 0x12, 0x2c, 0x0a, 0x11, 0x50, 0x72,
	0x69, 0x63, 0x65, 0x42, 0x61, 0x73, 0x65, 0x53, 0x65, 0x6c, 0x6c, 0x73, 0x46, 0x6f, 0x72, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x11, 0x50, 0x72, 0x69, 0x63, 0x65, 0x42, 0x61, 0x73, 0x65,
	0x53, 0x65, 0x6c, 0x6c, 0x73, 0x46, 0x6f, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x56, 0x6f, 0x6c, 0x75,
	0x6d, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x01, 0x52, 0x06, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65,
	0x12, 0x1c, 0x0a, 0x09, 0x53, 0x68, 0x69, 0x70, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x18, 0x0c, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x09, 0x53, 0x68, 0x69, 0x70, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x12, 0x1c,
	0x0a, 0x09, 0x42, 0x61, 0x73, 0x65, 0x53, 0x65, 0x6c, 0x6c, 0x73, 0x18, 0x0d, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x09, 0x42, 0x61, 0x73, 0x65, 0x53, 0x65, 0x6c, 0x6c, 0x73, 0x12, 0x32, 0x0a, 0x14,
	0x49, 0x73, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x53, 0x69, 0x64, 0x65, 0x4f, 0x76, 0x65, 0x72,
	0x72, 0x69, 0x64, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x08, 0x52, 0x14, 0x49, 0x73, 0x53, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x53, 0x69, 0x64, 0x65, 0x4f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65,
	0x12, 0x1e, 0x0a, 0x0a, 0x4e, 0x6f, 0x74, 0x42, 0x75, 0x79, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x0f,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x4e, 0x6f, 0x74, 0x42, 0x75, 0x79, 0x61, 0x62, 0x6c, 0x65,
	0x12, 0x36, 0x0a, 0x16, 0x49, 0x73, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x55,
	0x6e, 0x72, 0x65, 0x61, 0x63, 0x68, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x16, 0x49, 0x73, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x55, 0x6e, 0x72,
	0x65, 0x61, 0x63, 0x68, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x42, 0x61, 0x73, 0x65,
	0x4e, 0x69, 0x63, 0x6b, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c,
	0x42, 0x61, 0x73, 0x65, 0x4e, 0x69, 0x63, 0x6b, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08,
	0x42, 0x61, 0x73, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x42, 0x61, 0x73, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x53, 0x79, 0x73, 0x74,
	0x65, 0x6d, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x53, 0x79,
	0x73, 0x74, 0x65, 0x6d, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x52, 0x65, 0x67, 0x69,
	0x6f, 0x6e, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e,
	0x12, 0x20, 0x0a, 0x0b, 0x46, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x18,
	0x15, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x46, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x28, 0x0a, 0x07, 0x42, 0x61, 0x73, 0x65, 0x50, 0x6f, 0x73, 0x18, 0x16, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x50, 0x6f, 0x73, 0x52, 0x07, 0x42, 0x61, 0x73, 0x65, 0x50, 0x6f, 0x73, 0x12, 0x20, 0x0a, 0x0b,
	0x53, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x43, 0x6f, 0x6f, 0x72, 0x64, 0x18, 0x17, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x53, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x43, 0x6f, 0x6f, 0x72, 0x64, 0x42, 0x13,
	0x0a, 0x11, 0x5f, 0x50, 0x72, 0x69, 0x63, 0x65, 0x42, 0x61, 0x73, 0x65, 0x42, 0x75, 0x79, 0x73,
	0x46, 0x6f, 0x72, 0x22, 0x2f, 0x0a, 0x03, 0x50, 0x6f, 0x73, 0x12, 0x0c, 0x0a, 0x01, 0x58, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x01, 0x52, 0x01, 0x58, 0x12, 0x0c, 0x0a, 0x01, 0x59, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x01, 0x59, 0x12, 0x0c, 0x0a, 0x01, 0x5a, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x01, 0x5a, 0x22, 0x45, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x6f,
	0x64, 0x69, 0x74, 0x69, 0x65, 0x73, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x12, 0x2e, 0x0a, 0x12, 0x49,
	0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x47, 0x6f, 0x6f, 0x64,
	0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x12, 0x49, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65,
	0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x47, 0x6f, 0x6f, 0x64, 0x73, 0x22, 0x41, 0x0a, 0x13, 0x47,
	0x65, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x64, 0x69, 0x74, 0x69, 0x65, 0x73, 0x52, 0x65, 0x70,
	0x6c, 0x79, 0x12, 0x2a, 0x0a, 0x05, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x14, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f,
	0x6d, 0x6d, 0x6f, 0x64, 0x69, 0x74, 0x79, 0x52, 0x05, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x22, 0x93,
	0x04, 0x0a, 0x09, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x64, 0x69, 0x74, 0x79, 0x12, 0x1a, 0x0a, 0x08,
	0x4e, 0x69, 0x63, 0x6b, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x4e, 0x69, 0x63, 0x6b, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x50, 0x72, 0x69, 0x63,
	0x65, 0x42, 0x61, 0x73, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x50, 0x72, 0x69,
	0x63, 0x65, 0x42, 0x61, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x43, 0x6f,
	0x6d, 0x62, 0x69, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a,
	0x43, 0x6f, 0x6d, 0x62, 0x69, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x56, 0x6f,
	0x6c, 0x75, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x52, 0x06, 0x56, 0x6f, 0x6c, 0x75,
	0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x53, 0x68, 0x69, 0x70, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x53, 0x68, 0x69, 0x70, 0x43, 0x6c, 0x61, 0x73, 0x73,
	0x12, 0x16, 0x0a, 0x06, 0x4e, 0x61, 0x6d, 0x65, 0x49, 0x44, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x06, 0x4e, 0x61, 0x6d, 0x65, 0x49, 0x44, 0x12, 0x1e, 0x0a, 0x0a, 0x49, 0x6e, 0x66, 0x6f,
	0x63, 0x61, 0x72, 0x64, 0x49, 0x44, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x49, 0x6e,
	0x66, 0x6f, 0x63, 0x61, 0x72, 0x64, 0x49, 0x44, 0x12, 0x35, 0x0a, 0x05, 0x42, 0x61, 0x73, 0x65,
	0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x64, 0x69, 0x74, 0x79, 0x2e, 0x42, 0x61,
	0x73, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x05, 0x42, 0x61, 0x73, 0x65, 0x73, 0x12,
	0x32, 0x0a, 0x14, 0x50, 0x72, 0x69, 0x63, 0x65, 0x42, 0x65, 0x73, 0x74, 0x42, 0x61, 0x73, 0x65,
	0x42, 0x75, 0x79, 0x73, 0x46, 0x6f, 0x72, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x14, 0x50,
	0x72, 0x69, 0x63, 0x65, 0x42, 0x65, 0x73, 0x74, 0x42, 0x61, 0x73, 0x65, 0x42, 0x75, 0x79, 0x73,
	0x46, 0x6f, 0x72, 0x12, 0x34, 0x0a, 0x15, 0x50, 0x72, 0x69, 0x63, 0x65, 0x42, 0x65, 0x73, 0x74,
	0x42, 0x61, 0x73, 0x65, 0x53, 0x65, 0x6c, 0x6c, 0x73, 0x46, 0x6f, 0x72, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x15, 0x50, 0x72, 0x69, 0x63, 0x65, 0x42, 0x65, 0x73, 0x74, 0x42, 0x61, 0x73,
	0x65, 0x53, 0x65, 0x6c, 0x6c, 0x73, 0x46, 0x6f, 0x72, 0x12, 0x24, 0x0a, 0x0d, 0x50, 0x72, 0x6f,
	0x66, 0x66, 0x69, 0x74, 0x4d, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0d, 0x50, 0x72, 0x6f, 0x66, 0x66, 0x69, 0x74, 0x4d, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x12,
	0x12, 0x0a, 0x04, 0x4d, 0x61, 0x73, 0x73, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x01, 0x52, 0x04, 0x4d,
	0x61, 0x73, 0x73, 0x1a, 0x4f, 0x0a, 0x0a, 0x42, 0x61, 0x73, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x2b, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x15, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d,
	0x61, 0x72, 0x6b, 0x65, 0x74, 0x47, 0x6f, 0x6f, 0x64, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x3a, 0x02, 0x38, 0x01, 0x22, 0x35, 0x0a, 0x0c, 0x47, 0x65, 0x74, 0x41, 0x6d, 0x6d, 0x6f, 0x52,
	0x65, 0x70, 0x6c, 0x79, 0x12, 0x25, 0x0a, 0x05, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x41, 0x6d, 0x6d, 0x6f, 0x52, 0x05, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x22, 0xc4, 0x05, 0x0a, 0x04,
	0x41, 0x6d, 0x6d, 0x6f, 0x12, 0x12, 0x0a, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x50, 0x72, 0x69, 0x63,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x16,
	0x0a, 0x06, 0x48, 0x69, 0x74, 0x50, 0x74, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06,
	0x48, 0x69, 0x74, 0x50, 0x74, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x06, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x12, 0x2a,
	0x0a, 0x10, 0x4d, 0x75, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x66, 0x65, 0x74, 0x69,
	0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x52, 0x10, 0x4d, 0x75, 0x6e, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x4c, 0x69, 0x66, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x4e, 0x69,
	0x63, 0x6b, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x4e, 0x69,
	0x63, 0x6b, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x4e, 0x61, 0x6d, 0x65, 0x49, 0x44,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x4e, 0x61, 0x6d, 0x65, 0x49, 0x44, 0x12, 0x16,
	0x0a, 0x06, 0x49, 0x6e, 0x66, 0x6f, 0x49, 0x44, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06,
	0x49, 0x6e, 0x66, 0x6f, 0x49, 0x44, 0x12, 0x1e, 0x0a, 0x0a, 0x53, 0x65, 0x65, 0x6b, 0x65, 0x72,
	0x54, 0x79, 0x70, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x53, 0x65, 0x65, 0x6b,
	0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x53, 0x65, 0x65, 0x6b, 0x65, 0x72,
	0x52, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x53, 0x65, 0x65,
	0x6b, 0x65, 0x72, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x53, 0x65, 0x65, 0x6b,
	0x65, 0x72, 0x46, 0x6f, 0x76, 0x44, 0x65, 0x67, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c,
	0x53, 0x65, 0x65, 0x6b, 0x65, 0x72, 0x46, 0x6f, 0x76, 0x44, 0x65, 0x67, 0x12, 0x30, 0x0a, 0x05,
	0x42, 0x61, 0x73, 0x65, 0x73, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x73, 0x74,
	0x61, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x6d, 0x6d, 0x6f, 0x2e, 0x42, 0x61, 0x73,
	0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x05, 0x42, 0x61, 0x73, 0x65, 0x73, 0x12, 0x55,
	0x0a, 0x13, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x54, 0x65, 0x63, 0x68, 0x43,
	0x6f, 0x6d, 0x70, 0x61, 0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x73, 0x74,
	0x61, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72,
	0x79, 0x54, 0x65, 0x63, 0x68, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x74, 0x48, 0x00, 0x52, 0x13, 0x44,
	0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x54, 0x65, 0x63, 0x68, 0x43, 0x6f, 0x6d, 0x70,
	0x61, 0x74, 0x88, 0x01, 0x01, 0x12, 0x2f, 0x0a, 0x10, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x49,
	0x6e, 0x43, 0x61, 0x74, 0x72, 0x69, 0x64, 0x67, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x03, 0x48,
	0x01, 0x52, 0x10, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x6e, 0x43, 0x61, 0x74, 0x72, 0x69,
	0x64, 0x67, 0x65, 0x88, 0x01, 0x01, 0x12, 0x27, 0x0a, 0x0c, 0x4d, 0x61, 0x78, 0x43, 0x61, 0x74,
	0x72, 0x69, 0x64, 0x67, 0x65, 0x73, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x03, 0x48, 0x02, 0x52, 0x0c,
	0x4d, 0x61, 0x78, 0x43, 0x61, 0x74, 0x72, 0x69, 0x64, 0x67, 0x65, 0x73, 0x88, 0x01, 0x01, 0x12,
	0x12, 0x0a, 0x04, 0x4d, 0x61, 0x73, 0x73, 0x18, 0x10, 0x20, 0x01, 0x28, 0x01, 0x52, 0x04, 0x4d,
	0x61, 0x73, 0x73, 0x1a, 0x4f, 0x0a, 0x0a, 0x42, 0x61, 0x73, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x2b, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x15, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d,
	0x61, 0x72, 0x6b, 0x65, 0x74, 0x47, 0x6f, 0x6f, 0x64, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x3a, 0x02, 0x38, 0x01, 0x42, 0x16, 0x0a, 0x14, 0x5f, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65,
	0x72, 0x79, 0x54, 0x65, 0x63, 0x68, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x74, 0x42, 0x13, 0x0a, 0x11,
	0x5f, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x6e, 0x43, 0x61, 0x74, 0x72, 0x69, 0x64, 0x67,
	0x65, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x4d, 0x61, 0x78, 0x43, 0x61, 0x74, 0x72, 0x69, 0x64, 0x67,
	0x65, 0x73, 0x22, 0xd0, 0x01, 0x0a, 0x13, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79,
	0x54, 0x65, 0x63, 0x68, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x74, 0x12, 0x5a, 0x0a, 0x0e, 0x54, 0x65,
	0x63, 0x68, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x74, 0x42, 0x79, 0x49, 0x44, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x32, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44,
	0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x54, 0x65, 0x63, 0x68, 0x43, 0x6f, 0x6d, 0x70,
	0x61, 0x74, 0x2e, 0x54, 0x65, 0x63, 0x68, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x74, 0x42, 0x79, 0x49,
	0x44, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0e, 0x54, 0x65, 0x63, 0x68, 0x63, 0x6f, 0x6d, 0x70,
	0x61, 0x74, 0x42, 0x79, 0x49, 0x44, 0x12, 0x1a, 0x0a, 0x08, 0x54, 0x65, 0x63, 0x68, 0x43, 0x65,
	0x6c, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x54, 0x65, 0x63, 0x68, 0x43, 0x65,
	0x6c, 0x6c, 0x1a, 0x41, 0x0a, 0x13, 0x54, 0x65, 0x63, 0x68, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x74,
	0x42, 0x79, 0x49, 0x44, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xa7, 0x01, 0x0a, 0x10, 0x54, 0x65, 0x63, 0x68, 0x43, 0x6f,
	0x6d, 0x70, 0x61, 0x74, 0x41, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x12, 0x43, 0x0a, 0x0a, 0x54, 0x65,
	0x63, 0x68, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e,
	0x2e, 0x73, 0x74, 0x61, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x69, 0x73, 0x63, 0x6f,
	0x76, 0x65, 0x72, 0x79, 0x54, 0x65, 0x63, 0x68, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x74, 0x48, 0x00,
	0x52, 0x0a, 0x54, 0x65, 0x63, 0x68, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x74, 0x88, 0x01, 0x01, 0x12,
	0x19, 0x0a, 0x05, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01,
	0x52, 0x05, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x88, 0x01, 0x01, 0x12, 0x1a, 0x0a, 0x08, 0x4e, 0x69,
	0x63, 0x6b, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x4e, 0x69,
	0x63, 0x6b, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x54, 0x65, 0x63, 0x68, 0x43,
	0x6f, 0x6d, 0x70, 0x61, 0x74, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x22,
	0x32, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x54, 0x65, 0x63, 0x68, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x74,
	0x49, 0x6e, 0x70, 0x75, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x4e, 0x69, 0x63, 0x6b, 0x6e, 0x61, 0x6d,
	0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x4e, 0x69, 0x63, 0x6b, 0x6e, 0x61,
	0x6d, 0x65, 0x73, 0x22, 0x4b, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x54, 0x65, 0x63, 0x68, 0x43, 0x6f,
	0x6d, 0x70, 0x61, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x35, 0x0a, 0x07, 0x41, 0x6e, 0x73,
	0x77, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x73, 0x74, 0x61,
	0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x65, 0x63, 0x68, 0x43, 0x6f, 0x6d, 0x70, 0x61,
	0x74, 0x41, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x52, 0x07, 0x41, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x73,
	0x22, 0x4a, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x4d, 0x65,
	0x61, 0x73, 0x75, 0x72, 0x65, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x2f, 0x0a, 0x05, 0x49,
	0x74, 0x65, 0x6d, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x73, 0x74, 0x61,
	0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x4d, 0x65,
	0x61, 0x73, 0x75, 0x72, 0x65, 0x52, 0x05, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x22, 0xbc, 0x05, 0x0a,
	0x0e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x4d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x12,
	0x12, 0x0a, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x50, 0x72, 0x69, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x05, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x48, 0x69, 0x74,
	0x50, 0x74, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x48, 0x69, 0x74, 0x50, 0x74,
	0x73, 0x12, 0x18, 0x0a, 0x07, 0x41, 0x49, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x07, 0x41, 0x49, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x4c,
	0x69, 0x66, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x4c,
	0x69, 0x66, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x52, 0x61, 0x6e, 0x67, 0x65,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x24, 0x0a,
	0x0d, 0x44, 0x69, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x50, 0x63, 0x74, 0x67, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x44, 0x69, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x50,
	0x63, 0x74, 0x67, 0x12, 0x1a, 0x0a, 0x08, 0x4c, 0x6f, 0x6f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x4c, 0x6f, 0x6f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x12,
	0x1a, 0x0a, 0x08, 0x4e, 0x69, 0x63, 0x6b, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x4e, 0x69, 0x63, 0x6b, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x4e,
	0x61, 0x6d, 0x65, 0x49, 0x44, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x4e, 0x61, 0x6d,
	0x65, 0x49, 0x44, 0x12, 0x16, 0x0a, 0x06, 0x49, 0x6e, 0x66, 0x6f, 0x49, 0x44, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x06, 0x49, 0x6e, 0x66, 0x6f, 0x49, 0x44, 0x12, 0x3a, 0x0a, 0x05, 0x42,
	0x61, 0x73, 0x65, 0x73, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x73, 0x74, 0x61,
	0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x4d, 0x65,
	0x61, 0x73, 0x75, 0x72, 0x65, 0x2e, 0x42, 0x61, 0x73, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x52, 0x05, 0x42, 0x61, 0x73, 0x65, 0x73, 0x12, 0x55, 0x0a, 0x13, 0x44, 0x69, 0x73, 0x63, 0x6f,
	0x76, 0x65, 0x72, 0x79, 0x54, 0x65, 0x63, 0x68, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x74, 0x18, 0x0d,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x54, 0x65, 0x63, 0x68, 0x43, 0x6f,
	0x6d, 0x70, 0x61, 0x74, 0x48, 0x00, 0x52, 0x13, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72,
	0x79, 0x54, 0x65, 0x63, 0x68, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x74, 0x88, 0x01, 0x01, 0x12, 0x2f,
	0x0a, 0x10, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x6e, 0x43, 0x61, 0x74, 0x72, 0x69, 0x64,
	0x67, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x03, 0x48, 0x01, 0x52, 0x10, 0x41, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x49, 0x6e, 0x43, 0x61, 0x74, 0x72, 0x69, 0x64, 0x67, 0x65, 0x88, 0x01, 0x01, 0x12,
	0x27, 0x0a, 0x0c, 0x4d, 0x61, 0x78, 0x43, 0x61, 0x74, 0x72, 0x69, 0x64, 0x67, 0x65, 0x73, 0x18,
	0x0f, 0x20, 0x01, 0x28, 0x03, 0x48, 0x02, 0x52, 0x0c, 0x4d, 0x61, 0x78, 0x43, 0x61, 0x74, 0x72,
	0x69, 0x64, 0x67, 0x65, 0x73, 0x88, 0x01, 0x01, 0x12, 0x12, 0x0a, 0x04, 0x4d, 0x61, 0x73, 0x73,
	0x18, 0x10, 0x20, 0x01, 0x28, 0x01, 0x52, 0x04, 0x4d, 0x61, 0x73, 0x73, 0x1a, 0x4f, 0x0a, 0x0a,
	0x42, 0x61, 0x73, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2b, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x73, 0x74,
	0x61, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x47, 0x6f,
	0x6f, 0x64, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x42, 0x16, 0x0a,
	0x14, 0x5f, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x54, 0x65, 0x63, 0x68, 0x43,
	0x6f, 0x6d, 0x70, 0x61, 0x74, 0x42, 0x13, 0x0a, 0x11, 0x5f, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x49, 0x6e, 0x43, 0x61, 0x74, 0x72, 0x69, 0x64, 0x67, 0x65, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x4d,
	0x61, 0x78, 0x43, 0x61, 0x74, 0x72, 0x69, 0x64, 0x67, 0x65, 0x73, 0x22, 0x3a, 0x0a, 0x0f, 0x47,
	0x65, 0x74, 0x45, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x27,
	0x0a, 0x05, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e,
	0x73, 0x74, 0x61, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x6e, 0x67, 0x69, 0x6e, 0x65,
	0x52, 0x05, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x22, 0xba, 0x05, 0x0a, 0x06, 0x45, 0x6e, 0x67, 0x69,
	0x6e, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x50, 0x72, 0x69, 0x63, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x20, 0x0a, 0x0b,
	0x43, 0x72, 0x75, 0x69, 0x73, 0x65, 0x53, 0x70, 0x65, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0b, 0x43, 0x72, 0x75, 0x69, 0x73, 0x65, 0x53, 0x70, 0x65, 0x65, 0x64, 0x12, 0x2a,
	0x0a, 0x10, 0x43, 0x72, 0x75, 0x69, 0x73, 0x65, 0x43, 0x68, 0x61, 0x72, 0x67, 0x65, 0x54, 0x69,
	0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x10, 0x43, 0x72, 0x75, 0x69, 0x73, 0x65,
	0x43, 0x68, 0x61, 0x72, 0x67, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x4c, 0x69,
	0x6e, 0x65, 0x61, 0x72, 0x44, 0x72, 0x61, 0x67, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a,
	0x4c, 0x69, 0x6e, 0x65, 0x61, 0x72, 0x44, 0x72, 0x61, 0x67, 0x12, 0x1a, 0x0a, 0x08, 0x4d, 0x61,
	0x78, 0x46, 0x6f, 0x72, 0x63, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x4d, 0x61,
	0x78, 0x46, 0x6f, 0x72, 0x63, 0x65, 0x12, 0x28, 0x0a, 0x0f, 0x52, 0x65, 0x76, 0x65, 0x72, 0x73,
	0x65, 0x46, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x0f, 0x52, 0x65, 0x76, 0x65, 0x72, 0x73, 0x65, 0x46, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x22, 0x0a, 0x0c, 0x49, 0x6d, 0x70, 0x75, 0x6c, 0x73, 0x65, 0x53, 0x70, 0x65, 0x65, 0x64,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0c, 0x49, 0x6d, 0x70, 0x75, 0x6c, 0x73, 0x65, 0x53,
	0x70, 0x65, 0x65, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x48, 0x70, 0x54, 0x79, 0x70, 0x65, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x48, 0x70, 0x54, 0x79, 0x70, 0x65, 0x12, 0x20, 0x0a, 0x0b,
	0x46, 0x6c, 0x61, 0x6d, 0x65, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x46, 0x6c, 0x61, 0x6d, 0x65, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x12, 0x20,
	0x0a, 0x0b, 0x54, 0x72, 0x61, 0x69, 0x6c, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x54, 0x72, 0x61, 0x69, 0x6c, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74,
	0x12, 0x1a, 0x0a, 0x08, 0x4e, 0x69, 0x63, 0x6b, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0c, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x4e, 0x69, 0x63, 0x6b, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06,
	0x4e, 0x61, 0x6d, 0x65, 0x49, 0x44, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x4e, 0x61,
	0x6d, 0x65, 0x49, 0x44, 0x12, 0x16, 0x0a, 0x06, 0x49, 0x6e, 0x66, 0x6f, 0x49, 0x44, 0x18, 0x0e,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x49, 0x6e, 0x66, 0x6f, 0x49, 0x44, 0x12, 0x32, 0x0a, 0x05,
	0x42, 0x61, 0x73, 0x65, 0x73, 0x18, 0x0f, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x73, 0x74,
	0x61, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e, 0x42,
	0x61, 0x73, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x05, 0x42, 0x61, 0x73, 0x65, 0x73,
	0x12, 0x55, 0x0a, 0x13, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x54, 0x65, 0x63,
	0x68, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x74, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e,
	0x73, 0x74, 0x61, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x76,
	0x65, 0x72, 0x79, 0x54, 0x65, 0x63, 0x68, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x74, 0x48, 0x00, 0x52,
	0x13, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x54, 0x65, 0x63, 0x68, 0x43, 0x6f,
	0x6d, 0x70, 0x61, 0x74, 0x88, 0x01, 0x01, 0x12, 0x12, 0x0a, 0x04, 0x4d, 0x61, 0x73, 0x73, 0x18,
	0x11, 0x20, 0x01, 0x28, 0x01, 0x52, 0x04, 0x4d, 0x61, 0x73, 0x73, 0x1a, 0x4f, 0x0a, 0x0a, 0x42,
	0x61, 0x73, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2b, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x73, 0x74, 0x61,
	0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x47, 0x6f, 0x6f,
	0x64, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x42, 0x16, 0x0a, 0x14,
	0x5f, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x54, 0x65, 0x63, 0x68, 0x43, 0x6f,
	0x6d, 0x70, 0x61, 0x74, 0x22, 0x3c, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x46, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x28, 0x0a, 0x05, 0x49, 0x74, 0x65, 0x6d,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x46, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x05, 0x49, 0x74, 0x65,
	0x6d, 0x73, 0x22, 0x09, 0x0a, 0x07, 0x46, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x34, 0x0a,
	0x0c, 0x47, 0x65, 0x74, 0x47, 0x75, 0x6e, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x24, 0x0a,
	0x05, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x73,
	0x74, 0x61, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x75, 0x6e, 0x52, 0x05, 0x49, 0x74,
	0x65, 0x6d, 0x73, 0x22, 0x05, 0x0a, 0x03, 0x47, 0x75, 0x6e, 0x22, 0x36, 0x0a, 0x0d, 0x47, 0x65,
	0x74, 0x4d, 0x69, 0x6e, 0x65, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x25, 0x0a, 0x05, 0x49,
	0x74, 0x65, 0x6d, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x73, 0x74, 0x61,
	0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x69, 0x6e, 0x65, 0x52, 0x05, 0x49, 0x74, 0x65,
	0x6d, 0x73, 0x22, 0x06, 0x0a, 0x04, 0x4d, 0x69, 0x6e, 0x65, 0x22, 0x3c, 0x0a, 0x10, 0x47, 0x65,
	0x74, 0x53, 0x63, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x28,
	0x0a, 0x05, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e,
	0x73, 0x74, 0x61, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x63, 0x61, 0x6e, 0x6e, 0x65,
	0x72, 0x52, 0x05, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x22, 0x09, 0x0a, 0x07, 0x53, 0x63, 0x61, 0x6e,
	0x6e, 0x65, 0x72, 0x22, 0x3a, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x53, 0x68, 0x69, 0x65, 0x6c, 0x64,
	0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x27, 0x0a, 0x05, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x53, 0x68, 0x69, 0x65, 0x6c, 0x64, 0x52, 0x05, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x22,
	0x08, 0x0a, 0x06, 0x53, 0x68, 0x69, 0x65, 0x6c, 0x64, 0x22, 0x36, 0x0a, 0x0d, 0x47, 0x65, 0x74,
	0x53, 0x68, 0x69, 0x70, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x25, 0x0a, 0x05, 0x49, 0x74,
	0x65, 0x6d, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x73, 0x74, 0x61, 0x74,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x68, 0x69, 0x70, 0x52, 0x05, 0x49, 0x74, 0x65, 0x6d,
	0x73, 0x22, 0x06, 0x0a, 0x04, 0x53, 0x68, 0x69, 0x70, 0x22, 0x3e, 0x0a, 0x11, 0x47, 0x65, 0x74,
	0x54, 0x68, 0x72, 0x75, 0x73, 0x74, 0x65, 0x72, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x29,
	0x0a, 0x05, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e,
	0x73, 0x74, 0x61, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x68, 0x72, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x52, 0x05, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x22, 0x0a, 0x0a, 0x08, 0x54, 0x68, 0x72,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x22, 0x3c, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x54, 0x72, 0x61, 0x63,
	0x74, 0x6f, 0x72, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x28, 0x0a, 0x05, 0x49, 0x74, 0x65,
	0x6d, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x72, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x05, 0x49, 0x74,
	0x65, 0x6d, 0x73, 0x22, 0x09, 0x0a, 0x07, 0x54, 0x72, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x22, 0x10,
	0x0a, 0x0e, 0x47, 0x65, 0x74, 0x48, 0x61, 0x73, 0x68, 0x65, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79,
	0x22, 0x34, 0x0a, 0x0c, 0x47, 0x65, 0x74, 0x50, 0x6f, 0x42, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79,
	0x12, 0x24, 0x0a, 0x05, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x0e, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x6f, 0x42, 0x52,
	0x05, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x22, 0x05, 0x0a, 0x03, 0x50, 0x6f, 0x42, 0x22, 0x3c, 0x0a,
	0x10, 0x47, 0x65, 0x74, 0x50, 0x6f, 0x42, 0x47, 0x6f, 0x6f, 0x64, 0x73, 0x52, 0x65, 0x70, 0x6c,
	0x79, 0x12, 0x28, 0x0a, 0x05, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x12, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x6f, 0x42,
	0x47, 0x6f, 0x6f, 0x64, 0x52, 0x05, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x22, 0x09, 0x0a, 0x07, 0x50,
	0x6f, 0x42, 0x47, 0x6f, 0x6f, 0x64, 0x22, 0x14, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x47, 0x72, 0x61,
	0x70, 0x68, 0x50, 0x61, 0x74, 0x68, 0x73, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x22, 0x14, 0x0a, 0x12,
	0x47, 0x65, 0x74, 0x47, 0x72, 0x61, 0x70, 0x68, 0x50, 0x61, 0x74, 0x68, 0x73, 0x52, 0x65, 0x70,
	0x6c, 0x79, 0x22, 0x12, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x50, 0x6f, 0x42, 0x42, 0x61, 0x73, 0x65,
	0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x32, 0xe9, 0x09, 0x0a, 0x08, 0x44, 0x61, 0x72, 0x6b, 0x47,
	0x52, 0x70, 0x63, 0x12, 0x37, 0x0a, 0x09, 0x47, 0x65, 0x74, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68,
	0x12, 0x10, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x6d, 0x70,
	0x74, 0x79, 0x1a, 0x16, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x48,
	0x65, 0x61, 0x6c, 0x74, 0x68, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x40, 0x0a, 0x08,
	0x47, 0x65, 0x74, 0x42, 0x61, 0x73, 0x65, 0x73, 0x12, 0x18, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x65, 0x74, 0x42, 0x61, 0x73, 0x65, 0x73, 0x49, 0x6e, 0x70,
	0x75, 0x74, 0x1a, 0x18, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47,
	0x65, 0x74, 0x42, 0x61, 0x73, 0x65, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x52,
	0x0a, 0x0e, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x64, 0x69, 0x74, 0x69, 0x65, 0x73,
	0x12, 0x1e, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x65, 0x74,
	0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x64, 0x69, 0x74, 0x69, 0x65, 0x73, 0x49, 0x6e, 0x70, 0x75, 0x74,
	0x1a, 0x1e, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x65, 0x74,
	0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x64, 0x69, 0x74, 0x69, 0x65, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79,
	0x22, 0x00, 0x12, 0x43, 0x0a, 0x08, 0x47, 0x65, 0x74, 0x41, 0x6d, 0x6d, 0x6f, 0x73, 0x12, 0x1c,
	0x2e, 0x73, 0x74, 0x61, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x65, 0x74, 0x45, 0x71,
	0x75, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x1a, 0x17, 0x2e, 0x73,
	0x74, 0x61, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x6d, 0x6d, 0x6f,
	0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x58, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x65, 0x72, 0x4d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x73, 0x12, 0x1c, 0x2e,
	0x73, 0x74, 0x61, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x65, 0x74, 0x45, 0x71, 0x75,
	0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x1a, 0x22, 0x2e, 0x73, 0x74,
	0x61, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x65, 0x72, 0x4d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22,
	0x00, 0x12, 0x48, 0x0a, 0x0a, 0x47, 0x65, 0x74, 0x45, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x73, 0x12,
	0x1c, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x65, 0x74, 0x45,
	0x71, 0x75, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x1a, 0x1a, 0x2e,
	0x73, 0x74, 0x61, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x65, 0x74, 0x45, 0x6e, 0x67,
	0x69, 0x6e, 0x65, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x3e, 0x0a, 0x0b, 0x47,
	0x65, 0x74, 0x46, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x10, 0x2e, 0x73, 0x74, 0x61,
	0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x1b, 0x2e, 0x73,
	0x74, 0x61, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x65, 0x74, 0x46, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x36, 0x0a, 0x07, 0x47,
	0x65, 0x74, 0x47, 0x75, 0x6e, 0x73, 0x12, 0x10, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x17, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x65, 0x74, 0x47, 0x75, 0x6e, 0x73, 0x52, 0x65, 0x70, 0x6c,
	0x79, 0x22, 0x00, 0x12, 0x38, 0x0a, 0x08, 0x47, 0x65, 0x74, 0x4d, 0x69, 0x6e, 0x65, 0x73, 0x12,
	0x10, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x6d, 0x70, 0x74,
	0x79, 0x1a, 0x18, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x65,
	0x74, 0x4d, 0x69, 0x6e, 0x65, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x3e, 0x0a,
	0x0b, 0x47, 0x65, 0x74, 0x53, 0x63, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x73, 0x12, 0x10, 0x2e, 0x73,
	0x74, 0x61, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x1b,
	0x2e, 0x73, 0x74, 0x61, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x63,
	0x61, 0x6e, 0x6e, 0x65, 0x72, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x3c, 0x0a,
	0x0a, 0x47, 0x65, 0x74, 0x53, 0x68, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x12, 0x10, 0x2e, 0x73, 0x74,
	0x61, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x1a, 0x2e,
	0x73, 0x74, 0x61, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x68, 0x69,
	0x65, 0x6c, 0x64, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x38, 0x0a, 0x08, 0x47,
	0x65, 0x74, 0x53, 0x68, 0x69, 0x70, 0x73, 0x12, 0x10, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x18, 0x2e, 0x73, 0x74, 0x61, 0x74,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x68, 0x69, 0x70, 0x73, 0x52, 0x65,
	0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x40, 0x0a, 0x0c, 0x47, 0x65, 0x74, 0x54, 0x68, 0x72, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x73, 0x12, 0x10, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x1c, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x65, 0x74, 0x54, 0x68, 0x72, 0x75, 0x73, 0x74, 0x65, 0x72, 0x73,
	0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x3e, 0x0a, 0x0b, 0x47, 0x65, 0x74, 0x54, 0x72,
	0x61, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x12, 0x10, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x1b, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x65, 0x74, 0x54, 0x72, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x73,
	0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x38, 0x0a, 0x09, 0x47, 0x65, 0x74, 0x48, 0x61,
	0x73, 0x68, 0x65, 0x73, 0x12, 0x10, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x19, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x47, 0x65, 0x74, 0x48, 0x61, 0x73, 0x68, 0x65, 0x73, 0x52, 0x65, 0x70, 0x6c,
	0x79, 0x12, 0x34, 0x0a, 0x07, 0x47, 0x65, 0x74, 0x50, 0x6f, 0x42, 0x73, 0x12, 0x10, 0x2e, 0x73,
	0x74, 0x61, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x17,
	0x2e, 0x73, 0x74, 0x61, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x6f,
	0x42, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x3c, 0x0a, 0x0b, 0x47, 0x65, 0x74, 0x50, 0x6f,
	0x42, 0x47, 0x6f, 0x6f, 0x64, 0x73, 0x12, 0x10, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x1b, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x6f, 0x42, 0x47, 0x6f, 0x6f, 0x64, 0x73,
	0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x3c, 0x0a, 0x0b, 0x47, 0x65, 0x74, 0x50, 0x6f, 0x42, 0x42,
	0x61, 0x73, 0x65, 0x73, 0x12, 0x10, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x1b, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x6f, 0x42, 0x42, 0x61, 0x73, 0x65, 0x73, 0x52, 0x65,
	0x70, 0x6c, 0x79, 0x12, 0x4d, 0x0a, 0x0d, 0x47, 0x65, 0x74, 0x47, 0x72, 0x61, 0x70, 0x68, 0x50,
	0x61, 0x74, 0x68, 0x73, 0x12, 0x1d, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x47, 0x65, 0x74, 0x47, 0x72, 0x61, 0x70, 0x68, 0x50, 0x61, 0x74, 0x68, 0x73, 0x49, 0x6e,
	0x70, 0x75, 0x74, 0x1a, 0x1d, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x47, 0x65, 0x74, 0x47, 0x72, 0x61, 0x70, 0x68, 0x50, 0x61, 0x74, 0x68, 0x73, 0x52, 0x65, 0x70,
	0x6c, 0x79, 0x42, 0x34, 0x5a, 0x32, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d,
	0x2f, 0x64, 0x61, 0x72, 0x6b, 0x6c, 0x61, 0x62, 0x38, 0x2f, 0x66, 0x6c, 0x2d, 0x64, 0x61, 0x72,
	0x6b, 0x73, 0x74, 0x61, 0x74, 0x2f, 0x64, 0x61, 0x72, 0x6b, 0x67, 0x72, 0x70, 0x63, 0x2f, 0x73,
	0x74, 0x61, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
})

var (
	file_main_proto_rawDescOnce sync.Once
	file_main_proto_rawDescData []byte
)

func file_main_proto_rawDescGZIP() []byte {
	file_main_proto_rawDescOnce.Do(func() {
		file_main_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_main_proto_rawDesc), len(file_main_proto_rawDesc)))
	})
	return file_main_proto_rawDescData
}

var file_main_proto_msgTypes = make([]protoimpl.MessageInfo, 52)
var file_main_proto_goTypes = []any{
	(*Empty)(nil),                   // 0: statproto.Empty
	(*HealthReply)(nil),             // 1: statproto.HealthReply
	(*GetEquipmentInput)(nil),       // 2: statproto.GetEquipmentInput
	(*GetBasesInput)(nil),           // 3: statproto.GetBasesInput
	(*GetBasesReply)(nil),           // 4: statproto.GetBasesReply
	(*Base)(nil),                    // 5: statproto.Base
	(*MiningInfo)(nil),              // 6: statproto.MiningInfo
	(*MarketGood)(nil),              // 7: statproto.MarketGood
	(*Pos)(nil),                     // 8: statproto.Pos
	(*GetCommoditiesInput)(nil),     // 9: statproto.GetCommoditiesInput
	(*GetCommoditiesReply)(nil),     // 10: statproto.GetCommoditiesReply
	(*Commodity)(nil),               // 11: statproto.Commodity
	(*GetAmmoReply)(nil),            // 12: statproto.GetAmmoReply
	(*Ammo)(nil),                    // 13: statproto.Ammo
	(*DiscoveryTechCompat)(nil),     // 14: statproto.DiscoveryTechCompat
	(*TechCompatAnswer)(nil),        // 15: statproto.TechCompatAnswer
	(*GetTechCompatInput)(nil),      // 16: statproto.GetTechCompatInput
	(*GetTechCompatReply)(nil),      // 17: statproto.GetTechCompatReply
	(*GetCounterMeasuresReply)(nil), // 18: statproto.GetCounterMeasuresReply
	(*CounterMeasure)(nil),          // 19: statproto.CounterMeasure
	(*GetEnginesReply)(nil),         // 20: statproto.GetEnginesReply
	(*Engine)(nil),                  // 21: statproto.Engine
	(*GetFactionsReply)(nil),        // 22: statproto.GetFactionsReply
	(*Faction)(nil),                 // 23: statproto.Faction
	(*GetGunsReply)(nil),            // 24: statproto.GetGunsReply
	(*Gun)(nil),                     // 25: statproto.Gun
	(*GetMinesReply)(nil),           // 26: statproto.GetMinesReply
	(*Mine)(nil),                    // 27: statproto.Mine
	(*GetScannersReply)(nil),        // 28: statproto.GetScannersReply
	(*Scanner)(nil),                 // 29: statproto.Scanner
	(*GetShieldsReply)(nil),         // 30: statproto.GetShieldsReply
	(*Shield)(nil),                  // 31: statproto.Shield
	(*GetShipsReply)(nil),           // 32: statproto.GetShipsReply
	(*Ship)(nil),                    // 33: statproto.Ship
	(*GetThrustersReply)(nil),       // 34: statproto.GetThrustersReply
	(*Thruster)(nil),                // 35: statproto.Thruster
	(*GetTractorsReply)(nil),        // 36: statproto.GetTractorsReply
	(*Tractor)(nil),                 // 37: statproto.Tractor
	(*GetHashesReply)(nil),          // 38: statproto.GetHashesReply
	(*GetPoBsReply)(nil),            // 39: statproto.GetPoBsReply
	(*PoB)(nil),                     // 40: statproto.PoB
	(*GetPoBGoodsReply)(nil),        // 41: statproto.GetPoBGoodsReply
	(*PoBGood)(nil),                 // 42: statproto.PoBGood
	(*GetGraphPathsInput)(nil),      // 43: statproto.GetGraphPathsInput
	(*GetGraphPathsReply)(nil),      // 44: statproto.GetGraphPathsReply
	(*GetPoBBasesReply)(nil),        // 45: statproto.GetPoBBasesReply
	nil,                             // 46: statproto.Base.MarketGoodsPerNickEntry
	nil,                             // 47: statproto.Commodity.BasesEntry
	nil,                             // 48: statproto.Ammo.BasesEntry
	nil,                             // 49: statproto.DiscoveryTechCompat.TechcompatByIDEntry
	nil,                             // 50: statproto.CounterMeasure.BasesEntry
	nil,                             // 51: statproto.Engine.BasesEntry
}
var file_main_proto_depIdxs = []int32{
	5,  // 0: statproto.GetBasesReply.Items:type_name -> statproto.Base
	8,  // 1: statproto.Base.Pos:type_name -> statproto.Pos
	46, // 2: statproto.Base.MarketGoodsPerNick:type_name -> statproto.Base.MarketGoodsPerNickEntry
	7,  // 3: statproto.MiningInfo.MinedGood:type_name -> statproto.MarketGood
	8,  // 4: statproto.MarketGood.BasePos:type_name -> statproto.Pos
	11, // 5: statproto.GetCommoditiesReply.Items:type_name -> statproto.Commodity
	47, // 6: statproto.Commodity.Bases:type_name -> statproto.Commodity.BasesEntry
	13, // 7: statproto.GetAmmoReply.Items:type_name -> statproto.Ammo
	48, // 8: statproto.Ammo.Bases:type_name -> statproto.Ammo.BasesEntry
	14, // 9: statproto.Ammo.DiscoveryTechCompat:type_name -> statproto.DiscoveryTechCompat
	49, // 10: statproto.DiscoveryTechCompat.TechcompatByID:type_name -> statproto.DiscoveryTechCompat.TechcompatByIDEntry
	14, // 11: statproto.TechCompatAnswer.TechCompat:type_name -> statproto.DiscoveryTechCompat
	15, // 12: statproto.GetTechCompatReply.Answers:type_name -> statproto.TechCompatAnswer
	19, // 13: statproto.GetCounterMeasuresReply.Items:type_name -> statproto.CounterMeasure
	50, // 14: statproto.CounterMeasure.Bases:type_name -> statproto.CounterMeasure.BasesEntry
	14, // 15: statproto.CounterMeasure.DiscoveryTechCompat:type_name -> statproto.DiscoveryTechCompat
	21, // 16: statproto.GetEnginesReply.Items:type_name -> statproto.Engine
	51, // 17: statproto.Engine.Bases:type_name -> statproto.Engine.BasesEntry
	14, // 18: statproto.Engine.DiscoveryTechCompat:type_name -> statproto.DiscoveryTechCompat
	23, // 19: statproto.GetFactionsReply.Items:type_name -> statproto.Faction
	25, // 20: statproto.GetGunsReply.Items:type_name -> statproto.Gun
	27, // 21: statproto.GetMinesReply.Items:type_name -> statproto.Mine
	29, // 22: statproto.GetScannersReply.Items:type_name -> statproto.Scanner
	31, // 23: statproto.GetShieldsReply.Items:type_name -> statproto.Shield
	33, // 24: statproto.GetShipsReply.Items:type_name -> statproto.Ship
	35, // 25: statproto.GetThrustersReply.Items:type_name -> statproto.Thruster
	37, // 26: statproto.GetTractorsReply.Items:type_name -> statproto.Tractor
	40, // 27: statproto.GetPoBsReply.Items:type_name -> statproto.PoB
	42, // 28: statproto.GetPoBGoodsReply.Items:type_name -> statproto.PoBGood
	7,  // 29: statproto.Base.MarketGoodsPerNickEntry.value:type_name -> statproto.MarketGood
	7,  // 30: statproto.Commodity.BasesEntry.value:type_name -> statproto.MarketGood
	7,  // 31: statproto.Ammo.BasesEntry.value:type_name -> statproto.MarketGood
	7,  // 32: statproto.CounterMeasure.BasesEntry.value:type_name -> statproto.MarketGood
	7,  // 33: statproto.Engine.BasesEntry.value:type_name -> statproto.MarketGood
	0,  // 34: statproto.DarkGRpc.GetHealth:input_type -> statproto.Empty
	3,  // 35: statproto.DarkGRpc.GetBases:input_type -> statproto.GetBasesInput
	9,  // 36: statproto.DarkGRpc.GetCommodities:input_type -> statproto.GetCommoditiesInput
	2,  // 37: statproto.DarkGRpc.GetAmmos:input_type -> statproto.GetEquipmentInput
	2,  // 38: statproto.DarkGRpc.GetCounterMeasures:input_type -> statproto.GetEquipmentInput
	2,  // 39: statproto.DarkGRpc.GetEngines:input_type -> statproto.GetEquipmentInput
	0,  // 40: statproto.DarkGRpc.GetFactions:input_type -> statproto.Empty
	0,  // 41: statproto.DarkGRpc.GetGuns:input_type -> statproto.Empty
	0,  // 42: statproto.DarkGRpc.GetMines:input_type -> statproto.Empty
	0,  // 43: statproto.DarkGRpc.GetScanners:input_type -> statproto.Empty
	0,  // 44: statproto.DarkGRpc.GetShields:input_type -> statproto.Empty
	0,  // 45: statproto.DarkGRpc.GetShips:input_type -> statproto.Empty
	0,  // 46: statproto.DarkGRpc.GetThrusters:input_type -> statproto.Empty
	0,  // 47: statproto.DarkGRpc.GetTractors:input_type -> statproto.Empty
	0,  // 48: statproto.DarkGRpc.GetHashes:input_type -> statproto.Empty
	0,  // 49: statproto.DarkGRpc.GetPoBs:input_type -> statproto.Empty
	0,  // 50: statproto.DarkGRpc.GetPoBGoods:input_type -> statproto.Empty
	0,  // 51: statproto.DarkGRpc.GetPoBBases:input_type -> statproto.Empty
	43, // 52: statproto.DarkGRpc.GetGraphPaths:input_type -> statproto.GetGraphPathsInput
	1,  // 53: statproto.DarkGRpc.GetHealth:output_type -> statproto.HealthReply
	4,  // 54: statproto.DarkGRpc.GetBases:output_type -> statproto.GetBasesReply
	10, // 55: statproto.DarkGRpc.GetCommodities:output_type -> statproto.GetCommoditiesReply
	12, // 56: statproto.DarkGRpc.GetAmmos:output_type -> statproto.GetAmmoReply
	18, // 57: statproto.DarkGRpc.GetCounterMeasures:output_type -> statproto.GetCounterMeasuresReply
	20, // 58: statproto.DarkGRpc.GetEngines:output_type -> statproto.GetEnginesReply
	22, // 59: statproto.DarkGRpc.GetFactions:output_type -> statproto.GetFactionsReply
	24, // 60: statproto.DarkGRpc.GetGuns:output_type -> statproto.GetGunsReply
	26, // 61: statproto.DarkGRpc.GetMines:output_type -> statproto.GetMinesReply
	28, // 62: statproto.DarkGRpc.GetScanners:output_type -> statproto.GetScannersReply
	30, // 63: statproto.DarkGRpc.GetShields:output_type -> statproto.GetShieldsReply
	32, // 64: statproto.DarkGRpc.GetShips:output_type -> statproto.GetShipsReply
	34, // 65: statproto.DarkGRpc.GetThrusters:output_type -> statproto.GetThrustersReply
	36, // 66: statproto.DarkGRpc.GetTractors:output_type -> statproto.GetTractorsReply
	38, // 67: statproto.DarkGRpc.GetHashes:output_type -> statproto.GetHashesReply
	39, // 68: statproto.DarkGRpc.GetPoBs:output_type -> statproto.GetPoBsReply
	41, // 69: statproto.DarkGRpc.GetPoBGoods:output_type -> statproto.GetPoBGoodsReply
	45, // 70: statproto.DarkGRpc.GetPoBBases:output_type -> statproto.GetPoBBasesReply
	44, // 71: statproto.DarkGRpc.GetGraphPaths:output_type -> statproto.GetGraphPathsReply
	53, // [53:72] is the sub-list for method output_type
	34, // [34:53] is the sub-list for method input_type
	34, // [34:34] is the sub-list for extension type_name
	34, // [34:34] is the sub-list for extension extendee
	0,  // [0:34] is the sub-list for field type_name
}

func init() { file_main_proto_init() }
func file_main_proto_init() {
	if File_main_proto != nil {
		return
	}
	file_main_proto_msgTypes[6].OneofWrappers = []any{}
	file_main_proto_msgTypes[7].OneofWrappers = []any{}
	file_main_proto_msgTypes[13].OneofWrappers = []any{}
	file_main_proto_msgTypes[15].OneofWrappers = []any{}
	file_main_proto_msgTypes[19].OneofWrappers = []any{}
	file_main_proto_msgTypes[21].OneofWrappers = []any{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_main_proto_rawDesc), len(file_main_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   52,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_main_proto_goTypes,
		DependencyIndexes: file_main_proto_depIdxs,
		MessageInfos:      file_main_proto_msgTypes,
	}.Build()
	File_main_proto = out.File
	file_main_proto_goTypes = nil
	file_main_proto_depIdxs = nil
}
