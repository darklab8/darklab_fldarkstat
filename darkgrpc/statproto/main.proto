syntax = "proto3";

option go_package = "github.com/darklab8/fl-darkstat/darkgrpc/statproto";

package statproto;

// The greeter service definition.
service DarkGRpc {
  // Sends a greeting
  rpc GetHealth (Empty) returns (HealthReply) {}

  rpc GetBases (GetBasesInput) returns (GetBasesReply) {}
  rpc GetCommodities (GetCommoditiesInput) returns (GetCommoditiesReply) {}
  rpc GetAmmos (GetAmmoInput) returns (GetAmmoReply) {}
  rpc GetCounterMeasures (Empty) returns (GetCounterMeasuresReply) {}
  rpc GetEngines (Empty) returns (GetEnginesReply) {}
  rpc GetFactions (Empty) returns (GetFactionsReply) {}
  rpc GetGuns (Empty) returns (GetGunsReply) {}
  rpc GetMines (Empty) returns (GetMinesReply) {}
  rpc GetScanners (Empty) returns (GetScannersReply) {}
  rpc GetShields (Empty) returns (GetShieldsReply) {}
  rpc GetShips (Empty) returns (GetShipsReply) {}
  rpc GetThrusters (Empty) returns (GetThrustersReply) {}
  rpc GetTractors (Empty) returns (GetTractorsReply) {}
  rpc GetHashes (Empty) returns (GetHashesReply);
  rpc GetPoBs (Empty) returns (GetPoBsReply);
  rpc GetPoBGoods (Empty) returns (GetPoBGoodsReply);
  rpc GetPoBBases (Empty) returns (GetPoBBasesReply);

  rpc GetGraphPaths (GetGraphPathsInput) returns (GetGraphPathsReply);
}

// The request message containing the user's name.
message Empty {
}
message HealthReply {
  bool is_healthy = 1;
}
message GetBasesInput {
  bool IncludeMarketGoods = 1;
}
message GetBasesReply {
  repeated Base Items = 1;
}

// The response message containing the greetings
message Base {
  string Name = 1;
  repeated string Archetypes = 2;
  string Nickname = 3; 
  string FactionName = 5; 
  string System = 6; 
  string SystemNickname = 7; 
  string Region = 9;
  int64 StridName = 10; 
  int64 InfocardID = 11; 
  string File = 12; 
  string BGCS_base_run_by = 13;
  Pos Pos = 14; 
  string SectorCoord = 15;
  bool IsTransportUnreachable = 16; 
  bool Reachable = 18; 
  bool IsPob = 19;

  map<string, MarketGood> MarketGoodsPerNick = 20;
}

message MiningInfo {
  int64 DynamicLootMin = 1;   
	int64 DynamicLootMax = 2;
	int64 DynamicLootDifficulty = 3;
	optional MarketGood MinedGood = 4;         
}


message MarketGood {
  string Nickname = 1;
  string ShipNickname = 2; 
  string Name = 3;     
  int64 PriceBase = 4; 
  string HpType = 5;   
  string Category = 6;

    int64 LevelRequired = 7;
    double RepRequired = 8;
    optional int64 PriceBaseBuysFor = 9; 
    int64 PriceBaseSellsFor  = 10;
    double Volume   = 11;   
    int64 ShipClass  = 12;        
    bool BaseSells    = 13;    
    bool IsServerSideOverride = 14;
    bool NotBuyable      = 15;     
    bool IsTransportUnreachable = 16;

    string BaseNickname = 17; 
    string BaseName = 18;   
    string  SystemName = 19; 
    string  Region = 20;    
    string  FactionName = 21; 
    Pos BasePos = 22;     
    string SectorCoord = 23;
}

message Pos {
  double X = 1;
  double Y = 2;
  double Z = 3;
}

message GetCommoditiesInput {
  bool IncludeMarketGoods = 1;
}
message GetCommoditiesReply {
  repeated Commodity Items = 1;
}

message Commodity {
	string Nickname = 1;        
	int64 PriceBase = 2;                                   
	string Name     = 3;                         
	bool Combinable = 4;  
	double Volume   = 5;                                    
	int64 ShipClass = 6;         
	int64 NameID      = 7;                                      
	int64 InfocardID  = 8; 
	map<string, MarketGood> Bases  = 9;            
	int64 PriceBestBaseBuysFor     = 10;                          
	int64 PriceBestBaseSellsFor    = 11;        
	int64 ProffitMargin            = 12;                          
	double Mass    = 13;            
}

message GetAmmoInput {
  bool IncludeMarketGoods = 1;
  bool IncludeTechCompat = 2;
}
message GetAmmoReply {
  repeated Ammo Items = 1;
}

message Ammo {
	string Name  = 1;
	int64 Price  = 2;

	int64 HitPts  = 3;
	double Volume = 4;
	double MunitionLifetime = 5;

	string Nickname = 6;
	int64 NameID    = 7;
	int64 InfoID    = 8;
	string SeekerType  = 9;
	int64 SeekerRange  = 10;
	int64 SeekerFovDeg = 11;

	map<string, MarketGood> Bases  = 12;            

	optional DiscoveryTechCompat DiscoveryTechCompat = 13;

  optional int64 AmountInCatridge = 14;
  optional int64 MaxCatridges     = 15;
  double Mass    = 16;
}

message DiscoveryTechCompat {
  map<string, double> TechcompatByID = 1;
  string TechCell = 2;
}

message TechCompatAnswer {
  optional DiscoveryTechCompat TechCompat = 1;
  optional string Error = 2;
  string Nickname = 3;
}

message GetTechCompatInput {
  repeated string Nicknames = 1;
}

message GetTechCompatReply {
  repeated TechCompatAnswer Answers = 1;
}

message GetCounterMeasuresReply {
  repeated CounterMeasure Items = 1;
}
message CounterMeasure {
	string Name = 1;
	int64 Price = 2;

	int64 HitPts    = 3;
	int64  AIRange  = 4;
	int64  Lifetime = 5;
	int64  Range    = 6;
	int64  DiversionPctg = 7;

	bool Lootable   = 8;
	string Nickname      = 9;
	int64  NameID        = 10;
	int64  InfoID        = 11;

	map<string, MarketGood> Bases  = 12;            
	optional DiscoveryTechCompat DiscoveryTechCompat = 13;

  optional int64 AmountInCatridge = 14;
  optional int64 MaxCatridges     = 15;
	double Mass      = 16;
}

message GetEnginesReply {
  repeated Engine Items = 1;
}
message Engine {
	string Name = 1;
	int64 Price = 2;

	int64 CruiseSpeed      = 3;
	int64 CruiseChargeTime = 4;
	int64 LinearDrag       = 5;
	int64 MaxForce         = 6;
	double ReverseFraction = 7;
	double ImpulseSpeed    = 8;

	string HpType          = 9;
	string FlameEffect     = 10;
	string TrailEffect     = 11;

	string Nickname        = 12;
	int64 NameID           = 13;
	int64 InfoID           = 14;

	map<string, MarketGood> Bases  = 15;            
	optional DiscoveryTechCompat DiscoveryTechCompat = 16;
	double Mass            = 17;
}
message GetFactionsReply {
  repeated Faction Items = 1;
}
message Faction {

}
message GetGunsReply {
  repeated Gun Items = 1;
}
message Gun {

}
message GetMinesReply {
  repeated Mine Items = 1;
}
message Mine {

}
message GetScannersReply {
  repeated Scanner Items = 1;
}
message Scanner {

}
message GetShieldsReply {
  repeated Shield Items = 1;
}
message Shield {

}
message GetShipsReply {
  repeated Ship Items = 1;
}
message Ship {

}
message GetThrustersReply {
  repeated Thruster Items = 1;
}
message Thruster {

}
message GetTractorsReply {
  repeated Tractor Items = 1;
}
message Tractor {

}
message GetHashesReply {

}
message GetPoBsReply {
  repeated PoB Items = 1;
}
message PoB {

}
message GetPoBGoodsReply {
  repeated PoBGood Items = 1;
}
message PoBGood {

}
message GetGraphPathsInput {

}
message GetGraphPathsReply {

}
message GetPoBBasesReply {

}