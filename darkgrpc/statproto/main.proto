syntax = "proto3";

option go_package = "github.com/darklab8/fl-darkstat/darkgrpc/statproto";

package statproto;

// The greeter service definition.
service DarkGRpc {
  // Sends a greeting
  rpc GetHealth (Empty) returns (HealthReply) {}

  rpc GetBases (Empty) returns (GetBasesReply) {}
  rpc GetBasesMarketGoods (GetMarketGoodsInput) returns (GetMarketGoodsReply) {}

  rpc GetCommodities (Empty) returns (GetCommoditiesReply) {}
  rpc GetCommoditiesMarketGoods (GetMarketGoodsInput) returns (GetMarketGoodsReply) {}

  rpc GetAmmos (Empty) returns (GetAmmoReply) {}
  rpc GetAmmosMarketGoods (GetMarketGoodsInput) returns (GetMarketGoodsReply) {}
  rpc GetAmmosTechCompat (GetTechCompatInput) returns (GetTechCompatReply) {}

  // Cms
  // Engines
  // Factions
  // Graph
  // Guns
  // Mines
  // Hashes
  // Mines
  // Pobs
  // Scanners
  // Shields
  // Ships
  // Thrusters
  // Tractors
}

// The request message containing the user's name.
message Empty {
}
message HealthReply {
  bool is_healthy = 1;
}
message GetMarketGoodsInput {
  repeated string Nicknames = 1;
}

message GetBasesReply {
  repeated Base Items = 1;
}

message GetMarketGoodsReply {
  repeated MarketGoodAnswer Answers = 1;
}

message MarketGoodAnswer {
  repeated MarketGood MarketGoods = 1;
  optional string Error = 2;
  string Nickname = 3;
}


// The response message containing the greetings
message Base {
  string Name = 1;
  repeated string Archetypes = 2;
  string Nickname = 3; 
  string FactionName = 5; 
  string System = 6; 
  string SystemNickname = 7; 
  string Region = 9;
  int32 StridName = 10; 
  int32 InfocardID = 11; 
  string File = 12; 
  string BGCS_base_run_by = 13;
  Pos Pos = 14; 
  string SectorCoord = 15;
  bool IsTransportUnreachable = 16; 
  bool Reachable = 18; 
  bool IsPob = 19;
}

message MiningInfo {
  int32 DynamicLootMin = 1;   
	int32 DynamicLootMax = 2;
	int32 DynamicLootDifficulty = 3;
	optional MarketGood MinedGood = 4;         
}


message MarketGood {
  string Nickname = 1;
  string ShipNickname = 2; 
  string Name = 3;     
  int32 PriceBase = 4; 
  string HpType = 5;   
  string Category = 6;

    int32 LevelRequired = 7;
    double RepRequired = 8;
    optional int32 PriceBaseBuysFor = 9; 
    int32 PriceBaseSellsFor  = 10;
    double Volume   = 11;   
    int64 ShipClass  = 12;        
    bool BaseSells    = 13;    
    bool IsServerSideOverride = 14;
    bool NotBuyable      = 15;     
    bool IsTransportUnreachable = 16;

    string BaseNickname = 17; 
    string BaseName = 18;   
    string  SystemName = 19; 
    string  Region = 20;    
    string  FactionName = 21; 
    Pos BasePos = 22;     
    string SectorCoord = 23;
}

message Pos {
  double X = 1;
  double Y = 2;
  double Z = 3;
}

message GetCommoditiesReply {
  repeated Commodity Items = 1;
}

message Commodity {
	string Nickname = 1;        
	int32 PriceBase = 2;                                   
	string Name     = 3;                         
	bool Combinable = 4;  
	double Volume   = 5;                                    
	int64 ShipClass = 6;         
	int32 NameID      = 7;                                      
	int32 InfocardID  = 8; 
	map<string, MarketGood> Bases  = 9;            
	int32 PriceBestBaseBuysFor     = 10;                          
	int32 PriceBestBaseSellsFor    = 11;        
	int32 ProffitMargin            = 12;                          
	double Mass    = 13;            
}

message GetAmmoReply {
  repeated Ammo Items = 1;
}

message Ammo {
	string Name  = 1;
	int32 Price  = 2;

	int32 HitPts  = 3;
	double Volume = 4;
	double MunitionLifetime = 5;

	string Nickname = 6;
	int32 NameID    = 7;
	int32 InfoID    = 8;
	string SeekerType  = 9;
	int32 SeekerRange  = 10;
	int32 SeekerFovDeg = 11;

	map<string, MarketGood> Bases  = 12;            

	optional DiscoveryTechCompat DiscoveryTechCompat = 13;

  optional int32 AmountInCatridge = 14;
  optional int32 MaxCatridges     = 15;
  double Mass    = 16;
}

message DiscoveryTechCompat {
  map<string, double> TechcompatByID = 1;
  string TechCell = 2;
}

message TechCompatAnswer {
  optional DiscoveryTechCompat TechCompat = 1;
  optional string Error = 2;
  string Nickname = 3;
}

message GetTechCompatInput {
  repeated string Nicknames = 1;
}

message GetTechCompatReply {
  repeated TechCompatAnswer Answers = 1;
}
