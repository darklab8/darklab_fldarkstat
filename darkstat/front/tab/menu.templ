package tab

import (
	"github.com/darklab8/fl-darkstat/darkstat/front/types"
	"github.com/darklab8/fl-darkstat/darkstat/front/urls"
	"github.com/darklab8/fl-darkstat/darkstat/settings"
	"github.com/darklab8/fl-darkstat/darkstat/front/frmt"
	"github.com/darklab8/go-utils/utils/utils_types"
	"strings"
)

templ Heading(shared *types.SharedData) {
	<style>
		.heading {
			display: flex;
			flex-direction: row;
			justify-content: space-between;
			min-height: 30px;
		}
		.right {
			margin: 10px;
			display: flex;
			flex-direction: column;
		}
		.left {
			align-self: stretch;

		}
		#time, #patch {
			color: var(--color_time);
			font-size: 0.8em;
			align-self: flex-end;
		}
		#heading_string {
			align-self: flex-end;
		}
	</style>
	<div class="heading">
		<div class="left">
			{ children... }
		</div>
		<div class="right">
			if shared.ShowDisco {
				<div id="patch">
					Patch: <a style="color:var(--color_time);" href="https://patch.discoverygc.com/patchlist.xml">{ shared.LatestPatch.Name }</a>
				</div>
			}
			<div id="time">
				Darkstat { settings.Env.AppVersion } refreshed at { types.GetCtx(ctx).Timestamp.Format("02 Jan 2006 15:04:05") } UTC
			</div>
			<div id="heading_string">
				@templ.Raw(types.GetCtx(ctx).Heading)
			</div>
		</div>
	</div>
}


script GoToUrl(current string, themes []string) {
	let index = 0; 

	for (let i=0, item; item = themes[i]; i++) {
	// Look no need to do list[i] in the body of the loop
		console.log("Looping: index ", i, "item" + item);
		if (location.pathname == item) {
			index = i;
		}
	}

	index = index + 1;
	if (index > themes.length -1) {
		index = 0;
	}

	location.href=themes[index];

	// if (location.pathname == current) {
	// 	location.href=opposite;
	// } else {
	// 	location.href=current;
	// }
	
}

templ Button(text []string, get_url utils_types.FilePath, url utils_types.FilePath) {
	if get_url == urls.Swagger {
		<a 
			href={ templ.SafeURL(types.GetCtx(ctx).SiteRoot + get_url.ToString()) }
			style="display: block;"
		>
			<button
				class={ templ.KV("selected", strings.Contains(get_url.ToString(), url.ToString())), "button", strings.Join(text,"") }
				role="tab"
				aria-selected="false"
				aria-controls="tab-content"
				style="width:40px; border-radius: 20px; height: 100%;" 
			>
				@frmt.MultiLinestring(text)
			</button>
		</a>

	// TODO refactor this hackery
	} else if get_url == urls.PoBs || get_url == urls.PoBGoods {
		<button
			preload="mouseover"
			hx-trigger="mousedown"
			hx-get={ types.GetCtx(ctx).RelayHost + types.GetCtx(ctx).RelayRoot + get_url.ToString() }
			class={ templ.KV("selected", strings.Contains(get_url.ToString(), url.ToString())), "button", strings.Join(text,"") }
			role="tab"
			aria-selected="false"
			aria-controls="tab-content"
		>
			@frmt.MultiLinestring(text)
		</button>
	} else {
		<button
			preload="mouseover"
			hx-trigger="mousedown"
			hx-get={ types.GetCtx(ctx).SiteRoot + get_url.ToString() }
			class={ templ.KV("selected", strings.Contains(get_url.ToString(), url.ToString())), "button", strings.Join(text,"") }
			role="tab"
			aria-selected="false"
			aria-controls="tab-content"
		>
			@frmt.MultiLinestring(text)
		</button>
	}
}

func AllItemsUrl(url utils_types.FilePath) utils_types.FilePath {
	return "all_" + url
}
func NotAllItemsUrl(url utils_types.FilePath) utils_types.FilePath {
	return utils_types.FilePath(strings.ReplaceAll(url.ToString(), "all_", ""))
}
